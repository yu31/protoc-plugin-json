syntax = "proto3";

package json;

option go_package = "github.com/yu31/protoc-plugin-json/xgo/pb/pbjson";

// Package name of class.
option java_package = "io.github.yu31.protoc.pb.pbjson";
// File name of class.
option java_outer_classname = "PBJSON";
option java_multiple_files = true;

import "google/protobuf/descriptor.proto";

// SerializeOptions in message scope.
extend google.protobuf.MessageOptions {
  MessageOptions message = 64032;
}

// Options in field scope.
extend google.protobuf.FieldOptions {
  FieldOptions field = 64033;
}

// Options in oneof scope.
extend google.protobuf.OneofOptions {
  OneofOptions oneof = 64034;
}

message MessageOptions {
  // Ignore represents whether skip generating method MarshalJSON and UnmarshalJSON for the this message.
  bool ignore = 1;

  // disallow_unknown_fields causes the Unmarshal to return an error when the destination
  // is a struct and the input contains object keys which do not match any
  // non-ignored, exported fields in the destination.
  // Only effect to UnmarshalJSON.
  bool disallow_unknown_fields = 2;
}

message OneofOptions {
  // The key name in JSON content. Default is the field's name in proto file.
  optional string json = 1;

  // The field and all fields in the oneof parts will be ignored if true.
  bool ignore = 2;

  // Same as the go struct tag `json:"xxx,omitempty"`.
  // omitempty indicates whether omit the field if it is empty in MarshalJSON.
  bool omitempty = 3;

  // Inline indicates whether directly expand all fields of oneof in the current scope.
  // If the `inline` is true for a oneof field:
  //     - The null value will be omitted in JSON content.
  //     - The json key of oneof fields cannot be conflict with the fields that in current structure.
  optional bool inline = 4;

  // TODO: Add parameters to support overwrite for unmarshal ?
}

message FieldOptions {
  // The key name in JSON content. Default is the field's name in proto file.
  optional string json = 1;

  // The field will be ignored if true.
  bool ignore = 2;

  // Same as the go struct tag `json:"xxx,omitempty"`.
  // omitempty indicates whether omit the field if it is empty in MarshalJSON.
  bool omitempty = 3;

  // Inline indicates whether directly expand all fields of message type fields in current areas.
  // If the `inline` is true for a message field:
  //  - The null value will be omitted in JSON content.
  //  - The json key of oneof fields cannot be conflict with the fields that in current structure.
  //
  // Limit: TODO: Supplementary test cases
  //  - Only support for field type message.
  //  - Circular references are not allowed
  optional bool inline = 4;

  // Format declares how to format the fields.
  TypeFormat format = 11;
}

message TypeFormat {
  oneof Kind {
    TypeInt32    int32    = 1;
    TypeInt64    int64    = 2;
    TypeSInt32   sint32   = 3;
    TypeSInt64   sint64   = 4;
    TypeSFixed32 sfixed32 = 5;
    TypeSFixed64 sfixed64 = 6;
    TypeUint32   uint32   = 7;
    TypeUint64   uint64   = 8;
    TypeFixed32  fixed32  = 9;
    TypeFixed64  fixed64  = 10;

    TypeFloat  float  = 11;
    TypeDouble double = 12;

    TypeBool bool = 13;
    TypeEnum enum = 14;

    TypeString  string  = 15; // Reserved.
    TypeBytes   bytes   = 16; // Reserved.
    TypeMessage message = 17; // Reserved.

    TypeAny       any       = 21;
    TypeDuration  duration  = 22;
    TypeTimestamp timestamp = 23;

    TypeRepeated repeated = 31;
    TypeMap      map      = 32;
  }
}

// TypeRepeated declares the codec applied to the field repeated.
message TypeRepeated {
  // Elem reports the codec of repeated elements.
  TypeFormat elem = 1;
}

// TypeMap declares the codec applied to the field map.
message TypeMap {
  // Key reports the codec of map key.
  TypeFormat key = 1;

  // Value reports the codec of map value.
  TypeFormat value = 2;
}

// TypeInt32 declares the codec for field type int32.
message TypeInt32 {
  enum Codec {
    // Unset represents the default value will be applied when encoding and decoding JSON.
    Unset = 0;

    // Numeric represents convert the field as numeric when encoding and decoding JSON.
    Numeric = 1;

    // String represents convert the field as strings when encoding and decoding JSON.
    String = 2;
  }

  // Codec specifies encoding format for the field type of int32.
  // The default is `Numeric` in plain value, repeated elements and map value.
  // And the default is `String` in map key.
  Codec codec = 1;
}

// TypeInt32 declares the codec for field type int64.
message TypeInt64 {
  enum Codec {
    // Unset represents the default value will be applied when encoding and decoding JSON.
    Unset = 0;

    // Numeric represents convert the field as numeric when encoding and decoding JSON.
    Numeric = 1;

    // String represents convert the field as strings when encoding and decoding JSON.
    String = 2;
  }

  // Codec specifies encoding format for the field type of int32.
  // The default is `Numeric` in plain value, repeated elements and map value.
  // And the default is `String` in map key.
  Codec codec = 1;
}

// TypeInt32 declares the codec for field type sint32.
message TypeSInt32 {
  enum Codec {
    // Unset represents the default value will be applied when encoding and decoding JSON.
    Unset = 0;

    // Numeric represents convert the field as numeric when encoding and decoding JSON.
    Numeric = 1;

    // String represents convert the field as strings when encoding and decoding JSON.
    String = 2;
  }

  // Codec specifies encoding format for the field type of sint32.
  // The default is `Numeric` in plain value, repeated elements and map value.
  // And the default is `String` in map key.
  Codec codec = 1;
}

// TypeInt32 declares the codec for field type sint64.
message TypeSInt64 {
  enum Codec {
    // Unset represents the default value will be applied when encoding and decoding JSON.
    Unset = 0;

    // Numeric represents convert the field as numeric when encoding and decoding JSON.
    Numeric = 1;

    // String represents convert the field as strings when encoding and decoding JSON.
    String = 2;
  }

  // Codec specifies encoding format for the field type of sint64.
  // The default is `Numeric` in plain value, repeated elements and map value.
  // And the default is `String` in map key.
  Codec codec = 1;
}

// TypeInt32 declares the codec for field type sfixed32.
message TypeSFixed32 {
  enum Codec {
    // Unset represents the default value will be applied when encoding and decoding JSON.
    Unset = 0;

    // Numeric represents convert the field as numeric when encoding and decoding JSON.
    Numeric = 1;

    // String represents convert the field as strings when encoding and decoding JSON.
    String = 2;
  }

  // Codec specifies encoding format for the field type of sfixed32.
  // The default is `Numeric` in plain value, repeated elements and map value.
  // And the default is `String` in map key.
  Codec codec = 1;
}

// TypeInt32 declares the codec for field type sfixed64.
message TypeSFixed64 {
  enum Codec {
    // Unset represents the default value will be applied when encoding and decoding JSON.
    Unset = 0;

    // Numeric represents convert the field as numeric when encoding and decoding JSON.
    Numeric = 1;

    // String represents convert the field as strings when encoding and decoding JSON.
    String = 2;
  }

  // Codec specifies encoding format for the field type of sfixed64.
  // The default is `Numeric` in plain value, repeated elements and map value.
  // And the default is `String` in map key.
  Codec codec = 1;
}

// TypeInt32 declares the codec for field type uint32.
message TypeUint32 {
  enum Codec {
    // Unset represents the default value will be applied when encoding and decoding JSON.
    Unset = 0;

    // Numeric represents convert the field as numeric when encoding and decoding JSON.
    Numeric = 1;

    // String represents convert the field as strings when encoding and decoding JSON.
    String = 2;
  }

  // Codec specifies encoding format for the field type of uint32.
  // The default is `Numeric` in plain value, repeated elements and map value.
  // And the default is `String` in map key.
  Codec codec = 1;
}

// TypeInt32 declares the codec for field type uint64.
message TypeUint64 {
  enum Codec {
    // Unset represents the default value will be applied when encoding and decoding JSON.
    Unset = 0;

    // Numeric represents convert the field as numeric when encoding and decoding JSON.
    Numeric = 1;

    // String represents convert the field as strings when encoding and decoding JSON.
    String = 2;
  }

  // Codec specifies encoding format for the field type of uint64.
  // The default is `Numeric` in plain value, repeated elements and map value.
  // And the default is `String` in map key.
  Codec codec = 1;
}

// TypeInt32 declares the codec for field type fixed32.
message TypeFixed32 {
  enum Codec {
    // Unset represents the default value will be applied when encoding and decoding JSON.
    Unset = 0;

    // Numeric represents convert the field as numeric when encoding and decoding JSON.
    Numeric = 1;

    // String represents convert the field as strings when encoding and decoding JSON.
    String = 2;
  }

  // Codec specifies encoding format for the field type of fixed32.
  // The default is `Numeric` in plain value, repeated elements and map value.
  // And the default is `String` in map key.
  Codec codec = 1;
}

// TypeInt32 declares the codec for field type fixed64.
message TypeFixed64 {
  enum Codec {
    // Unset represents the default value will be applied when encoding and decoding JSON.
    Unset = 0;

    // Numeric represents convert the field as numeric when encoding and decoding JSON.
    Numeric = 1;

    // String represents convert the field as strings when encoding and decoding JSON.
    String = 2;
  }

  // Codec specifies encoding format for the field type of fixed64.
  // The default is `Numeric` in plain value, repeated elements and map value.
  // And the default is `String` in map key.
  Codec codec = 1;
}

// TypeInt32 declares the codec for field type float.
message TypeFloat {
  enum Codec {
    // Unset represents the default value will be applied when encoding and decoding JSON.
    Unset = 0;

    // Numeric represents convert the field as numeric when encoding and decoding JSON.
    Numeric = 1;

    // String represents convert the field as strings when encoding and decoding JSON.
    String = 2;
  }

  // Codec specifies encoding format for the field type of float.
  // The default is `Numeric` in plain value, repeated elements and map value.
  Codec codec = 1;
}

// TypeInt32 declares the codec for field type double.
message TypeDouble {
  enum Codec {
    // Unset represents the default value will be applied when encoding and decoding JSON.
    Unset = 0;

    // Numeric represents convert the field as numeric when encoding and decoding JSON.
    Numeric = 1;

    // String represents convert the field as strings when encoding and decoding JSON.
    String = 2;
  }

  // Codec specifies encoding format for the field type of double.
  // The default is `Numeric` in plain value, repeated elements and map value.
  Codec codec = 1;
}

// TypeInt32 declares the codec for field type bool.
message TypeBool {
  enum Codec {
    // Unset represents the default value will be applied when encoding and decoding JSON.
    Unset = 0;
    
    // Bool represents convert the field as bools which `true` or `false` when encoding and decoding JSON.
    Bool = 1;

    // String represents convert the field as strings which `"true"` or `"false"` when encoding and decoding JSON.
    String = 2;
  }

  // Codec specifies encoding format for the field type of bool.
  // The default is `Bool` in plain value, repeated elements and map value.
  Codec codec = 1;
}

// TypeString declares the codec for field type string. Reserve
message TypeString {
}
// TypeBytes declares the codec for field type bytes. Reserve
message TypeBytes {
}
// TypeMessage declares the codec for field type message. Reserve
message TypeMessage {
}

// TypeInt32 declares the codec for field type enum.
message TypeEnum {
  enum Codec {
    // Unset represents the default value will be applied when encoding and decoding JSON.
    Unset = 0;

    // Numeric represents use the enum Numeric in encoding and decoding JSON.
    Numeric = 1;

    // NumericString represents use the enum Numeric and convert to string when encoding and decoding JSON.
    NumericString = 2;

    // String represents use the enum string in encoding and decoding JSON.
    EnumString = 3;
  }

  // Codec specifies encoding format for the field type of Enum.
  // The default is `Numeric` in plain value, repeated elements and map value.
  Codec codec = 1;
}

// TypeInt32 declares the codec for field type google.proto.Any.
message TypeAny {
  enum Codec {
    // Unset represents the default value will be applied when encoding and decoding JSON.
    Unset = 0;

    // Object represents convert the google.protobuf.Any as objects and encoding and decoding by standard JSON.
    Object = 1;

    // Proto represents encoding and decoding the google.protobuf.Any by library protojson.
    Proto = 2;
  }

  // Codec specifies encoding format for the field type of google.protobuf.Any.
  // The default is `Object` in plain value, repeated elements and map value.
  Codec codec = 1;
}

// FIXME: Supplement test cases that precision in microseconds, milliseconds and seconds.
// TypeInt32 declares the codec for field type google.proto.Duration.
message TypeDuration {
  enum Codec {
    // Unset represents the default value will be applied when encoding and decoding JSON.
    Unset = 0;

    // Object represents convert the google.protobuf.Duration as objects and encoding and decoding by standard JSON.
    Object = 1;

    // String represents covert the google.protobuf.Duration as strings when encoding and decoding.
    // e.g: "1m1s".
    TimeString = 2;

    // String represents covert the google.protobuf.Duration as nanoseconds of type int64 when encoding and decoding.
    Nanosecond = 3;

    // String represents use the Nanosecond and convert to string when encoding and decoding.
    NanosecondString = 4;

    // String represents covert the google.protobuf.Duration as microseconds of type int64 when encoding and decoding.
    Microsecond = 5;

    // String represents use the Microsecond and convert to string when encoding and decoding.
    MicrosecondString = 6;

    // String represents covert the google.protobuf.Duration as milliseconds of type int64 when encoding and decoding.
    Millisecond = 7;

    // String represents use the Millisecond and convert to string when encoding and decoding.
    MillisecondString = 8;

    // String represents covert the google.protobuf.Duration as seconds of type float64 when encoding and decoding.
    Second = 9;

    // String represents use the Second and convert to string when encoding and decoding.
    SecondString = 10;

    // String represents covert the google.protobuf.Duration as minutes of type float64 when encoding and decoding.
    Minute = 11;

    // String represents use the Minute and convert to string when encoding and decoding.
    MinuteString = 12;

    // String represents covert the google.protobuf.Duration as hours of type float64 when encoding and decoding.
    Hour = 13;

    // String represents use the Hour and convert to string when encoding and decoding.
    HourString = 14;
  }

  // Codec specifies encoding format for the field type of google.protobuf.Duration.
  // The default is `Object` in plain value, repeated elements and map value.
  Codec codec = 1;
}

// FIXME: Supplement test cases that precision in microseconds, milliseconds and seconds.
// TypeInt32 declares the codec for field type google.proto.Timestamp.
message TypeTimestamp {
  message Layout {
    // Used to set the time layout for language Golang.
    // Default is time.RFC3339Nano(`2006-01-02T15:04:05.999999999Z07:00`)
    string golang = 1;

    // Used to set the time layout for language Java.
    string java = 2;

    // Used to set the time layout for language Rust.
    string rust = 3;

    // Used to set the time layout for language Python.
    string python = 4;
  }

  enum Codec {
    // Unset represents the default value will be applied when encoding and decoding JSON.
    Unset = 0;

    // Object represents convert the google.protobuf.Timestamp as objects and encoding and decoding by standard JSON.
    Object = 1;

    // TimeLayout represents convert the google.protobuf.Timestamp as time strings by `Layout` when encoding and decoding.
    TimeLayout = 2;

    // UnixNano represents convert the google.protobuf.Timestamp as nanosecond timestamp of type int64 when encoding and decoding.
    UnixNano = 3;

    // String represents use the UnixNano and convert to string when encoding and decoding.
    UnixNanoString = 4;

    // UnixMicro represents convert the google.protobuf.Timestamp as microsecond timestamp of type int64 when encoding and decoding.
    UnixMicro = 5;

    // String represents use the UnixMicro and convert to string when encoding and decoding.
    UnixMicroString = 6;

    // UnixMilli represents convert the google.protobuf.Timestamp as millisecond timestamp of type int64 when encoding and decoding.
    UnixMilli = 7;

    // String represents use the UnixMilli and convert to string when encoding and decoding.
    UnixMilliString = 8;

    // UnixSec represents convert the google.protobuf.Timestamp as second timestamp of type int64 when encoding and decoding.
    UnixSec = 9;

    // String represents use the UnixSec and convert to string when encoding and decoding.
    UnixSecString = 10;
  }

  // Codec specifies encoding format for the field type of google.protobuf.Timestamp.
  // The default is `Object` in plain value, repeated elements and map value.
  Codec codec = 1;

  // Only used if the codec is `TimeLayout`.
  Layout layout = 2;
}

