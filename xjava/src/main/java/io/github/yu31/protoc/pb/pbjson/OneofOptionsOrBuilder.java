// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: json.proto

package io.github.yu31.protoc.pb.pbjson;

public interface OneofOptionsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:json.OneofOptions)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The key name in JSON content. Default is the field's name in proto file.
   * It effect the MarshalJSON and UnmarshalJSON.
   * </pre>
   *
   * <code>optional string json = 1;</code>
   * @return Whether the json field is set.
   */
  boolean hasJson();
  /**
   * <pre>
   * The key name in JSON content. Default is the field's name in proto file.
   * It effect the MarshalJSON and UnmarshalJSON.
   * </pre>
   *
   * <code>optional string json = 1;</code>
   * @return The json.
   */
  java.lang.String getJson();
  /**
   * <pre>
   * The key name in JSON content. Default is the field's name in proto file.
   * It effect the MarshalJSON and UnmarshalJSON.
   * </pre>
   *
   * <code>optional string json = 1;</code>
   * @return The bytes for json.
   */
  com.google.protobuf.ByteString
      getJsonBytes();

  /**
   * <pre>
   * The field and all fields in the oneof parts will be ignored if true.
   * It effect the MarshalJSON and UnmarshalJSON.
   * </pre>
   *
   * <code>bool ignore = 2;</code>
   * @return The ignore.
   */
  boolean getIgnore();

  /**
   * <pre>
   * Same as the go struct tag `json:"xxx,omitempty"`.
   * omitempty indicates whether omit the field if it is empty in MarshalJSON.
   * </pre>
   *
   * <code>bool omitempty = 3;</code>
   * @return The omitempty.
   */
  boolean getOmitempty();

  /**
   * <pre>
   * Inline indicates whether directly expand all fields of oneof in the current scope.
   * If the `inline` is true for a oneof field:
   *     - The null value will be omitted in JSON content.
   *     - The json key of oneof fields cannot be conflict with the fields that in current structure.
   * It effect the MarshalJSON and UnmarshalJSON.
   * </pre>
   *
   * <code>optional bool inline = 4;</code>
   * @return Whether the inline field is set.
   */
  boolean hasInline();
  /**
   * <pre>
   * Inline indicates whether directly expand all fields of oneof in the current scope.
   * If the `inline` is true for a oneof field:
   *     - The null value will be omitted in JSON content.
   *     - The json key of oneof fields cannot be conflict with the fields that in current structure.
   * It effect the MarshalJSON and UnmarshalJSON.
   * </pre>
   *
   * <code>optional bool inline = 4;</code>
   * @return The inline.
   */
  boolean getInline();
}
