// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: json.proto

package io.github.yu31.protoc.pb.pbjson;

public interface FieldOptionsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:json.FieldOptions)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The key name in json format. Default is field's name in proto.
   * If "json" is "-", The field will be ignore.
   * </pre>
   *
   * <code>optional string json = 1;</code>
   * @return Whether the json field is set.
   */
  boolean hasJson();
  /**
   * <pre>
   * The key name in json format. Default is field's name in proto.
   * If "json" is "-", The field will be ignore.
   * </pre>
   *
   * <code>optional string json = 1;</code>
   * @return The json.
   */
  java.lang.String getJson();
  /**
   * <pre>
   * The key name in json format. Default is field's name in proto.
   * If "json" is "-", The field will be ignore.
   * </pre>
   *
   * <code>optional string json = 1;</code>
   * @return The bytes for json.
   */
  com.google.protobuf.ByteString
      getJsonBytes();

  /**
   * <pre>
   * If true, the field will be ignore. It same as `json: "-"`
   * </pre>
   *
   * <code>bool ignore = 2;</code>
   * @return The ignore.
   */
  boolean getIgnore();

  /**
   * <pre>
   * Whether omit the field of empty value in encoding(MarshalJSON).
   * It same as the struct tag `json:"xxx,omitempty"`.
   * </pre>
   *
   * <code>bool omitempty = 3;</code>
   * @return The omitempty.
   */
  boolean getOmitempty();

  /**
   * <pre>
   * Whether use string format for enum type. default use integer.
   * </pre>
   *
   * <code>bool use_enum_string = 4;</code>
   * @return The useEnumString.
   */
  boolean getUseEnumString();
}
