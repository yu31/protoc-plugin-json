// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: json.proto

package io.github.yu31.protoc.pb.pbjson;

public interface FieldOptionsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:json.FieldOptions)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The key name in JSON content. Default is the field's name in proto file.
   * Same as `ignore: true`, the field will be ignored if set its value to `json: "-"`
   * It effect the MarshalJSON and UnmarshalJSON.
   * </pre>
   *
   * <code>optional string json = 1;</code>
   * @return Whether the json field is set.
   */
  boolean hasJson();
  /**
   * <pre>
   * The key name in JSON content. Default is the field's name in proto file.
   * Same as `ignore: true`, the field will be ignored if set its value to `json: "-"`
   * It effect the MarshalJSON and UnmarshalJSON.
   * </pre>
   *
   * <code>optional string json = 1;</code>
   * @return The json.
   */
  java.lang.String getJson();
  /**
   * <pre>
   * The key name in JSON content. Default is the field's name in proto file.
   * Same as `ignore: true`, the field will be ignored if set its value to `json: "-"`
   * It effect the MarshalJSON and UnmarshalJSON.
   * </pre>
   *
   * <code>optional string json = 1;</code>
   * @return The bytes for json.
   */
  com.google.protobuf.ByteString
      getJsonBytes();

  /**
   * <pre>
   * Same as `json: "-"`, The field will be ignored if its true.
   * It effect the MarshalJSON and UnmarshalJSON.
   * </pre>
   *
   * <code>bool ignore = 2;</code>
   * @return The ignore.
   */
  boolean getIgnore();

  /**
   * <pre>
   * Same as the go struct tag `json:"xxx,omitempty"`.
   * omitempty indicates whether omit the field if it is empty in MarshalJSON.
   * </pre>
   *
   * <code>bool omitempty = 3;</code>
   * @return The omitempty.
   */
  boolean getOmitempty();

  /**
   * <code>.json.TypeEnum enum = 11;</code>
   * @return Whether the enum field is set.
   */
  boolean hasEnum();
  /**
   * <code>.json.TypeEnum enum = 11;</code>
   * @return The enum.
   */
  io.github.yu31.protoc.pb.pbjson.TypeEnum getEnum();
  /**
   * <code>.json.TypeEnum enum = 11;</code>
   */
  io.github.yu31.protoc.pb.pbjson.TypeEnumOrBuilder getEnumOrBuilder();

  /**
   * <code>.json.TypeAny any = 12;</code>
   * @return Whether the any field is set.
   */
  boolean hasAny();
  /**
   * <code>.json.TypeAny any = 12;</code>
   * @return The any.
   */
  io.github.yu31.protoc.pb.pbjson.TypeAny getAny();
  /**
   * <code>.json.TypeAny any = 12;</code>
   */
  io.github.yu31.protoc.pb.pbjson.TypeAnyOrBuilder getAnyOrBuilder();

  /**
   * <code>.json.TypeDuration duration = 13;</code>
   * @return Whether the duration field is set.
   */
  boolean hasDuration();
  /**
   * <code>.json.TypeDuration duration = 13;</code>
   * @return The duration.
   */
  io.github.yu31.protoc.pb.pbjson.TypeDuration getDuration();
  /**
   * <code>.json.TypeDuration duration = 13;</code>
   */
  io.github.yu31.protoc.pb.pbjson.TypeDurationOrBuilder getDurationOrBuilder();

  /**
   * <code>.json.TypeTimestamp timestamp = 14;</code>
   * @return Whether the timestamp field is set.
   */
  boolean hasTimestamp();
  /**
   * <code>.json.TypeTimestamp timestamp = 14;</code>
   * @return The timestamp.
   */
  io.github.yu31.protoc.pb.pbjson.TypeTimestamp getTimestamp();
  /**
   * <code>.json.TypeTimestamp timestamp = 14;</code>
   */
  io.github.yu31.protoc.pb.pbjson.TypeTimestampOrBuilder getTimestampOrBuilder();

  public io.github.yu31.protoc.pb.pbjson.FieldOptions.TypeSetCase getTypeSetCase();
}
