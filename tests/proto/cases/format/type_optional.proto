syntax = "proto3";

package type_optional;

option go_package = "xgo/tests/pb/pbformat";

//import "google/protobuf/any.proto";
//import "google/protobuf/duration.proto";
//import "google/protobuf/timestamp.proto";

//import "tests/proto/module/external.proto";

//import "tests/proto/cases/references/private.proto";

import "proto/json.proto";

message TypeOptional1 {
  optional int32 f_int32a = 1 [ (json.field) = {
    format: { int32: { codec: Numeric } }
  } ];
  optional int32 f_int32b = 2 [ (json.field) = {
    format: { int32: { codec: String } }
  } ];

  optional int64 f_int64a = 3 [ (json.field) = {
    format: { int64: { codec: Numeric } }
  } ];
  optional int64 f_int64b = 4 [ (json.field) = {
    format: { int64: { codec: String } }
  } ];

  optional uint32 f_uint32a = 5 [ (json.field) = {
    format: { uint32: { codec: Numeric } }
  } ];
  optional uint32 f_uint32b = 6 [ (json.field) = {
    format: { uint32: { codec: String } }
  } ];

  optional uint64 f_uint64a = 7 [ (json.field) = {
    format: { uint64: { codec: Numeric } }
  } ];
  optional uint64 f_uint64b = 8 [ (json.field) = {
    format: { uint64: { codec: String } }
  } ];

  optional sint32 f_sint32a = 9 [ (json.field) = {
    format: { sint32: { codec: Numeric } }
  } ];
  optional sint32 f_sint32b = 10 [ (json.field) = {
    format: { sint32: { codec: String } }
  } ];

  optional sint64 f_sint64a = 11 [ (json.field) = {
    format: { sint64: { codec: Numeric } }
  } ];
  optional sint64 f_sint64b = 12 [ (json.field) = {
    format: { sint64: { codec: String } }
  } ];

  optional sfixed32 f_sfixed32a = 13 [ (json.field) = {
    format: { sfixed32: { codec: Numeric } }
  } ];
  optional sfixed32 f_sfixed32b = 14 [ (json.field) = {
    format: { sfixed32: { codec: String } }
  } ];

  optional sfixed64 f_sfixed64a = 15 [ (json.field) = {
    format: { sfixed64: { codec: Numeric } }
  } ];
  optional sfixed64 f_sfixed64b = 16 [ (json.field) = {
    format: { sfixed64: { codec: String } }
  } ];

  optional fixed32 f_fixed32a = 17 [ (json.field) = {
    format: { fixed32: { codec: Numeric } }
  } ];
  optional fixed32 f_fixed32b = 18 [ (json.field) = {
    format: { fixed32: { codec: String } }
  } ];

  optional fixed64 f_fixed64a = 19 [ (json.field) = {
    format: { fixed64: { codec: Numeric } }
  } ];
  optional fixed64 f_fixed64b = 20 [ (json.field) = {
    format: { fixed64: { codec: String } }
  } ];

  optional float f_float1 = 21 [ (json.field) = {
    format: { float: { codec: Numeric } }
  } ];
  optional float f_float2 = 22 [ (json.field) = {
    format: { float: { codec: String } }
  } ];

  optional double f_double1 = 23 [ (json.field) = {
    format: { double: { codec: Numeric } }
  } ];
  optional double f_double2 = 24 [ (json.field) = {
    format: { double: { codec: String } }
  } ];

  optional bool f_bool1 = 25 [ (json.field) = {
    format: { bool: { codec: Bool } }
  } ];
  optional bool f_bool2 = 27 [ (json.field) = {
    format: { bool: { codec: String } }
  } ];
}

// Only used to test type error.
message TypeOptional2 {
  optional string f_string1 = 1 [ (json.field) = { } ];

  optional bytes f_bytes1  = 2 [ (json.field) = { } ];
}
