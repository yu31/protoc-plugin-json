syntax = "proto3";

package type_map;

option go_package = "xgo/tests/pb/pbformat";

//import "google/protobuf/any.proto";
//import "google/protobuf/duration.proto";
//import "google/protobuf/timestamp.proto";

//import "tests/proto/module/external.proto";

//import "tests/proto/cases/references/private.proto";

import "proto/json.proto";

message TypeMap1 {
  map<int32, int32> f_int32a = 1 [ (json.field) = {
    format: { map: { key:{ int32: { codec: String } }, value: { int32: { codec: Numeric } } } }
  } ];
  map<int32, int32> f_int32b = 2 [ (json.field) = {
    format: { map: { key:{ int32: { codec: String } }, value: { int32: { codec: String } } } }
  } ];

  map<int64, int64> f_int64a = 3 [ (json.field) = {
    format: { map: { key:{ int64: { codec: String } }, value: { int64: { codec: Numeric } } } }
  } ];
  map<int64, int64> f_int64b = 4 [ (json.field) = {
    format: { map: { key:{ int64: { codec: String } }, value: { int64: { codec: String } } } }
  } ];

  map<uint32, uint32>  f_uint32a = 5 [ (json.field) = {
    format: { map: { key:{ uint32: { codec: String } }, value: { uint32: { codec: Numeric } } } }
  } ];
  map<uint32, uint32> f_uint32b = 6 [ (json.field) = {
    format: { map: { key:{ uint32: { codec: String } }, value: { uint32: { codec: String } } } }
  } ];

  map<uint64, uint64>  f_uint64a = 7 [ (json.field) = {
    format: { map: { key:{ uint64: { codec: String } }, value: { uint64: { codec: Numeric } } } }
  } ];
  map<uint64, uint64> f_uint64b = 8 [ (json.field) = {
    format: { map: { key:{ uint64: { codec: String } }, value: { uint64: { codec: String } } } }
  } ];

  map<sint32, sint32>  f_sint32a = 9 [ (json.field) = {
    format: { map: { key:{ sint32: { codec: String } }, value: { sint32: { codec: Numeric } } } }
  } ];
  map<sint32, sint32> f_sint32b = 10 [ (json.field) = {
    format: { map: { key:{ sint32: { codec: String } }, value: { sint32: { codec: String } } } }
  } ];

  map<sint64, sint64>  f_sint64a = 11 [ (json.field) = {
    format: { map: { key:{ sint64: { codec: String } }, value: { sint64: { codec: Numeric } } } }
  } ];
  map<sint64, sint64> f_sint64b = 12 [ (json.field) = {
    format: { map: { key:{ sint64: { codec: String } }, value: { sint64: { codec: String } } } }
  } ];

  map<sfixed32, sfixed32>  f_sfixed32a = 13 [ (json.field) = {
    format: { map: { key:{ sfixed32: { codec: String } }, value: { sfixed32: { codec: Numeric } } } }
  } ];
  map<sfixed32, sfixed32> f_sfixed32b = 14 [ (json.field) = {
    format: { map: { key:{ sfixed32: { codec: String } }, value: { sfixed32: { codec: String } } } }
  } ];

  map<sfixed64, sfixed64>  f_sfixed64a = 15 [ (json.field) = {
    format: { map: { key:{ sfixed64: { codec: String } }, value: { sfixed64: { codec: Numeric } } } }
  } ];
  map<sfixed64, sfixed64> f_sfixed64b = 16 [ (json.field) = {
    format: { map: { key:{ sfixed64: { codec: String } }, value: { sfixed64: { codec: String } } } }
  } ];

  map<fixed32, fixed32>  f_fixed32a = 17 [ (json.field) = {
    format: { map: { key:{ fixed32: { codec: String } }, value: { fixed32: { codec: Numeric } } } }
  } ];
  map<fixed32, fixed32> f_fixed32b = 18 [ (json.field) = {
    format: { map: { key:{ fixed32: { codec: String } }, value: { fixed32: { codec: String } } } }
  } ];

  map<fixed64, fixed64>  f_fixed64a = 19 [ (json.field) = {
    format: { map: { key:{ fixed64: { codec: String } }, value: { fixed64: { codec: Numeric } } } }
  } ];
  map<fixed64, fixed64> f_fixed64b = 20 [ (json.field) = {
    format: { map: { key:{ fixed64: { codec: String } }, value: { fixed64: { codec: String } } } }
  } ];

  map<string, float>  f_float1 = 21 [ (json.field) = {
    format: { map: { value: { float: { codec: Numeric } } } }
  } ];
  map<string, float> f_float2 = 22 [ (json.field) = {
    format: { map: { value: { float: { codec: String } } } }
  } ];

  map<string, double>  f_double1 = 23 [ (json.field) = {
    format: { map: { value: { double: { codec: Numeric } } } }
  } ];
  map<string, double> f_double2 = 24 [ (json.field) = {
    format: { map: { value: { double: { codec: String } } } }
  } ];
}

// Only test marshal/unmarshal
message TypeMap2 {
  map<int32, int32> f_int32a = 1 [ (json.field) = {
    format: { map: { key:{ int32: { codec: Numeric } }, value: { int32: { codec: Numeric } } } }
  } ];
  map<int32, int32> f_int32b = 2 [ (json.field) = {
    format: { map: { key:{ int32: { codec: String } }, value: { int32: { codec: String } } } }
  } ];

  map<int64, int64> f_int64a = 3 [ (json.field) = {
    format: { map: { key:{ int64: { codec: Numeric } }, value: { int64: { codec: Numeric } } } }
  } ];
  map<int64, int64> f_int64b = 4 [ (json.field) = {
    format: { map: { key:{ int64: { codec: String } }, value: { int64: { codec: String } } } }
  } ];

  map<uint32, uint32>  f_uint32a = 5 [ (json.field) = {
    format: { map: { key:{ uint32: { codec: Numeric } }, value: { uint32: { codec: Numeric } } } }
  } ];
  map<uint32, uint32> f_uint32b = 6 [ (json.field) = {
    format: { map: { key:{ uint32: { codec: String } }, value: { uint32: { codec: String } } } }
  } ];

  map<uint64, uint64>  f_uint64a = 7 [ (json.field) = {
    format: { map: { key:{ uint64: { codec: Numeric } }, value: { uint64: { codec: Numeric } } } }
  } ];
  map<uint64, uint64> f_uint64b = 8 [ (json.field) = {
    format: { map: { key:{ uint64: { codec: String } }, value: { uint64: { codec: String } } } }
  } ];

  map<sint32, sint32>  f_sint32a = 9 [ (json.field) = {
    format: { map: { key:{ sint32: { codec: Numeric } }, value: { sint32: { codec: Numeric } } } }
  } ];
  map<sint32, sint32> f_sint32b = 10 [ (json.field) = {
    format: { map: { key:{ sint32: { codec: String } }, value: { sint32: { codec: String } } } }
  } ];

  map<sint64, sint64>  f_sint64a = 11 [ (json.field) = {
    format: { map: { key:{ sint64: { codec: Numeric } }, value: { sint64: { codec: Numeric } } } }
  } ];
  map<sint64, sint64> f_sint64b = 12 [ (json.field) = {
    format: { map: { key:{ sint64: { codec: String } }, value: { sint64: { codec: String } } } }
  } ];

  map<sfixed32, sfixed32>  f_sfixed32a = 13 [ (json.field) = {
    format: { map: { key:{ sfixed32: { codec: Numeric } }, value: { sfixed32: { codec: Numeric } } } }
  } ];
  map<sfixed32, sfixed32> f_sfixed32b = 14 [ (json.field) = {
    format: { map: { key:{ sfixed32: { codec: String } }, value: { sfixed32: { codec: String } } } }
  } ];

  map<sfixed64, sfixed64>  f_sfixed64a = 15 [ (json.field) = {
    format: { map: { key:{ sfixed64: { codec: Numeric } }, value: { sfixed64: { codec: Numeric } } } }
  } ];
  map<sfixed64, sfixed64> f_sfixed64b = 16 [ (json.field) = {
    format: { map: { key:{ sfixed64: { codec: String } }, value: { sfixed64: { codec: String } } } }
  } ];

  map<fixed32, fixed32>  f_fixed32a = 17 [ (json.field) = {
    format: { map: { key:{ fixed32: { codec: Numeric } }, value: { fixed32: { codec: Numeric } } } }
  } ];
  map<fixed32, fixed32> f_fixed32b = 18 [ (json.field) = {
    format: { map: { key:{ fixed32: { codec: String } }, value: { fixed32: { codec: String } } } }
  } ];

  map<fixed64, fixed64>  f_fixed64a = 19 [ (json.field) = {
    format: { map: { key:{ fixed64: { codec: Numeric } }, value: { fixed64: { codec: Numeric } } } }
  } ];
  map<fixed64, fixed64> f_fixed64b = 20 [ (json.field) = {
    format: { map: { key:{ fixed64: { codec: String } }, value: { fixed64: { codec: String } } } }
  } ];

  map<string, float>  f_float1 = 21 [ (json.field) = {
    format: { map: { value: { float: { codec: Numeric } } } }
  } ];
  map<string, float> f_float2 = 22 [ (json.field) = {
    format: { map: { value: { float: { codec: String } } } }
  } ];

  map<string, double>  f_double1 = 23 [ (json.field) = {
    format: { map: { value: { double: { codec: Numeric } } } }
  } ];
  map<string, double> f_double2 = 24 [ (json.field) = {
    format: { map: { value: { double: { codec: String } } } }
  } ];

  map<bool, bool>  f_bool1 = 25 [ (json.field) = {
    format: { map: { key:{ bool: { codec: Bool } }, value: { bool: { codec: Bool } } } }
  } ];
  map<bool, bool> f_bool2 = 27 [ (json.field) = {
    format: { map: { key:{ bool: { codec: String } }, value: { bool: { codec: String } } } }
  } ];
}

// Only used to test type error.
message TypeMap3 {
  map<string, string> f_string1 = 1 [ (json.field) = { } ];

  map<string, bytes> f_bytes1  = 2 [ (json.field) = { } ];
}
