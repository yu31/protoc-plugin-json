syntax = "proto3";

package errors;

option go_package = "xgo/tests/pb/pberrors";

import "proto/json.proto";

// InvalidCodecMapKey for test cases that the codec of map key is invalid in unmarshal
message InvalidCodecMapKey {
  map<int32, int32> f_int32_key_numeric_val_numeric = 1 [ (json.field) = {
    format: { map: { key:{ int32: { codec: Numeric } }, value: { int32: { codec: Numeric } } } }
  } ];
  map<int32, int32> f_int32_key_string_val_string   = 2 [ (json.field) = {
    format: { map: { key:{ int32: { codec: String } }, value: { int32: { codec: String } } } }
  } ];

  map<int64, int64> f_int64_key_numeric_val_numeric = 3 [ (json.field) = {
    format: { map: { key:{ int64: { codec: Numeric } }, value: { int64: { codec: Numeric } } } }
  } ];
  map<int64, int64> f_int64_key_string_val_string   = 4 [ (json.field) = {
    format: { map: { key:{ int64: { codec: String } }, value: { int64: { codec: String } } } }
  } ];

  map<uint32, uint32>  f_uint32_key_numeric_val_numeric = 5 [ (json.field) = {
    format: { map: { key:{ uint32: { codec: Numeric } }, value: { uint32: { codec: Numeric } } } }
  } ];
  map<uint32, uint32> f_uint32_key_string_val_string    = 6 [ (json.field) = {
    format: { map: { key:{ uint32: { codec: String } }, value: { uint32: { codec: String } } } }
  } ];

  map<uint64, uint64>  f_uint64_key_numeric_val_numeric = 7 [ (json.field) = {
    format: { map: { key:{ uint64: { codec: Numeric } }, value: { uint64: { codec: Numeric } } } }
  } ];
  map<uint64, uint64> f_uint64_key_string_val_string    = 8 [ (json.field) = {
    format: { map: { key:{ uint64: { codec: String } }, value: { uint64: { codec: String } } } }
  } ];

  map<sint32, sint32>  f_sint32_key_numeric_val_numeric = 9 [ (json.field) = {
    format: { map: { key:{ sint32: { codec: Numeric } }, value: { sint32: { codec: Numeric } } } }
  } ];
  map<sint32, sint32> f_sint32_key_string_val_string    = 10 [ (json.field) = {
    format: { map: { key:{ sint32: { codec: String } }, value: { sint32: { codec: String } } } }
  } ];

  map<sint64, sint64>  f_sint64_key_numeric_val_numeric = 11 [ (json.field) = {
    format: { map: { key:{ sint64: { codec: Numeric } }, value: { sint64: { codec: Numeric } } } }
  } ];
  map<sint64, sint64> f_sint64_key_string_val_string    = 12 [ (json.field) = {
    format: { map: { key:{ sint64: { codec: String } }, value: { sint64: { codec: String } } } }
  } ];

  map<sfixed32, sfixed32>  f_sfixed32_key_numeric_val_numeric = 13 [ (json.field) = {
    format: { map: { key:{ sfixed32: { codec: Numeric } }, value: { sfixed32: { codec: Numeric } } } }
  } ];
  map<sfixed32, sfixed32> f_sfixed32_key_string_val_string    = 14 [ (json.field) = {
    format: { map: { key:{ sfixed32: { codec: String } }, value: { sfixed32: { codec: String } } } }
  } ];

  map<sfixed64, sfixed64>  f_sfixed64_key_numeric_val_numeric = 15 [ (json.field) = {
    format: { map: { key:{ sfixed64: { codec: Numeric } }, value: { sfixed64: { codec: Numeric } } } }
  } ];
  map<sfixed64, sfixed64> f_sfixed64_key_string_val_string    = 16 [ (json.field) = {
    format: { map: { key:{ sfixed64: { codec: String } }, value: { sfixed64: { codec: String } } } }
  } ];

  map<fixed32, fixed32>  f_fixed32_key_numeric_val_numeric = 17 [ (json.field) = {
    format: { map: { key:{ fixed32: { codec: Numeric } }, value: { fixed32: { codec: Numeric } } } }
  } ];
  map<fixed32, fixed32> f_fixed32_key_string_val_string    = 18 [ (json.field) = {
    format: { map: { key:{ fixed32: { codec: String } }, value: { fixed32: { codec: String } } } }
  } ];

  map<fixed64, fixed64>  f_fixed64_key_numeric_val_numeric = 19 [ (json.field) = {
    format: { map: { key:{ fixed64: { codec: Numeric } }, value: { fixed64: { codec: Numeric } } } }
  } ];
  map<fixed64, fixed64> f_fixed64_key_string_val_string    = 20 [ (json.field) = {
    format: { map: { key:{ fixed64: { codec: String } }, value: { fixed64: { codec: String } } } }
  } ];

  map<bool, bool> f_bool_key_bool_val_bool = 21 [ (json.field) = {
    format: { map: { key:{ bool: { codec: Bool } }, value: { bool: { codec: Bool } } } }
  } ];
  map<bool, bool> f_bool_key_string_val_string = 22 [ (json.field) = {
    format: { map: { key:{ bool: { codec: String } }, value: { bool: { codec: String } } } }
  } ];

  map<string, string> f_string_key_none_val_none1 = 23 [ (json.field) = {
    format: { map: { key: { string: { } }, value: { string: { } } } }
  } ];
}

