syntax = "proto3";

package type_common;

option go_package = "xgo/tests/pb/pbboundary";

import "proto/json.proto";

message Message1 {
  string f_string1 = 1 [ (json.field) = { } ];
  string f_string2 = 2 [ (json.field) = { } ];
  string f_string3 = 3 [ (json.field) = { } ];
}

// Repeated1 for test cases:
// 1. The field is not empty and the content is null in JSON.
// 2. The field is not empty and the content is empty in JSON.
// 3. The length of field is less than the content in JSON.
// 4. The length of field is greater than the content in JSON.
message Repeated1 {
  repeated string r_string1 = 1 [ (json.field) = {} ];
}

// Map1 for test cases:
// 1. The field is not empty and the content is null in JSON.
// 2. The field is not empty and the content is empty in JSON.
// 3. The length of field is less than the content in JSON.
// 4. The length of field is greater than the content in JSON.
message Map1 {
  map<string, string> m_string1 = 1 [ (json.field) = {} ];
}

// Complex1 for test cases:
// 1. multiple space between field.
message Complex1 {
  int32 f_int32 = 1 [ (json.field) = {} ];

  repeated int64 r_int64 = 2 [ (json.field) = {} ];

  Message1 f_message1 = 3 [ (json.field) = {} ];

  map<string, int32> m_int32 = 4 [ (json.field) = {} ];

  optional int64 f_int64 = 5 [ (json.field) = {} ];
}

// Complex1 for test cases:
// 1. multiple nesting of json content.
message Complex2 {
  message Level1 {
    Level2 level2 = 1 [ (json.field) = {} ];

    string f_string = 2 [ (json.field) = {} ];

    repeated string r_string = 3 [ (json.field) = {} ];
  }

  message Level2 {
    string f_string = 1 [ (json.field) = {} ];

    Level3 level3 = 2 [ (json.field) = {} ];

    repeated int64 r_int64 = 3 [ (json.field) = {} ];
  }

  message Level3 {
    int32 f_int32 = 1 [ (json.field) = {} ];

    repeated int64 r_int64 = 2 [ (json.field) = {} ];

    map<string, int32> m_int32 = 3 [ (json.field) = {} ];

    optional int64 p_int64 = 4 [ (json.field) = {} ];
  }

  string f_string = 1 [ (json.field) = {} ];

  repeated int64 r_int64 = 2 [ (json.field) = {} ];

  Level1 level1 = 3 [ (json.field) = {} ];
}


