syntax = "proto3";

package type_map;

option go_package = "xgo/tests/pb/pbbase";

import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

import "tests/proto/module/external.proto";

import "tests/proto/cases/base/private.proto";

import "proto/json.proto";

// EnumMap1 used tests cases in this file.
enum EnumMap1 {
  Zero  = 0;
  One   = 2;
  Two   = 3;
  Three = 5;
  Four  = 6;
  Five  = 7;
  Six   = 9;
  Seven = 11;
  Eight = 12;
  Nine  = 15;
  Ten   = 17;
}

// MessageMap1 used tests cases in this file.
message MessageMap1 {
  message Embed1 {
    message Embed2 {
      string f_string1 = 1 [ (json.field) = { } ];
      string f_string2 = 2 [ (json.field) = { } ];
      string f_string3 = 3 [ (json.field) = { } ];
    }
    string f_string1 = 1 [ (json.field) = { } ];
    string f_string2 = 2 [ (json.field) = { } ];
    string f_string3 = 3 [ (json.field) = { } ];
  }
  string f_string1 = 1 [ (json.field) = { } ];
  string f_string2 = 2 [ (json.field) = { } ];
  string f_string3 = 3 [ (json.field) = { } ];
}

// Test case for field Map.
// The type key is string.
message TypeMap1 {
  map<string, string> f_string1 = 1 [ (json.field) = { } ];
  map<string, string> f_string2 = 2 [ (json.field) = { } ];

  map<string, int32>    f_int32    = 11 [ (json.field) = { } ];
  map<string, int64>    f_int64    = 12 [ (json.field) = { } ];
  map<string, uint32>   f_uint32   = 13 [ (json.field) = { } ];
  map<string, uint64>   f_uint64   = 14 [ (json.field) = { } ];
  map<string, sint32>   f_sint32   = 15 [ (json.field) = { } ];
  map<string, sint64>   f_sint64   = 16 [ (json.field) = { } ];
  map<string, sfixed32> f_sfixed32 = 17 [ (json.field) = { } ];
  map<string, sfixed64> f_sfixed64 = 18 [ (json.field) = { } ];
  map<string, fixed32>  f_fixed32  = 19 [ (json.field) = { } ];
  map<string, fixed64>  f_fixed64  = 20 [ (json.field) = { } ];
  map<string, float>    f_float    = 21 [ (json.field) = { } ];
  map<string, double>   f_double   = 22 [ (json.field) = { } ];

  map<string, bool> f_bool1 = 31 [ (json.field) = { } ];

  map<string, bytes> f_bytes1 = 32 [ (json.field) = { } ];

  map<string, EnumMap1>                     f_enum1 = 51 [ (json.field) = { } ];
  map<string, external.Enum1>               f_enum2 = 52 [ (json.field) = { } ];
  map<string, external.Embed.Enum1>         f_enum3 = 53 [ (json.field) = { } ];
  map<string, external.Embed.Message.Enum1> f_enum4 = 54 [ (json.field) = { } ];
  map<string, private.EnumCommon1>          f_enum5 = 55 [ (json.field) = { } ];
  map<string, private.MessageCommon1.Enum1> f_enum6 = 56 [ (json.field) = { } ];

  map<string, google.protobuf.Duration> f_duration1 = 61 [ (json.field) = { } ];
  map<string, google.protobuf.Duration> f_duration2 = 62 [ (json.field) = { } ];

  map<string, google.protobuf.Timestamp> f_timestamp1 = 63 [ (json.field) = { } ];
  map<string, google.protobuf.Timestamp> f_timestamp2 = 64 [ (json.field) = { } ];

  map<string, google.protobuf.Any> f_any1 = 65 [ (json.field) = { } ];
  map<string, google.protobuf.Any> f_any2 = 66 [ (json.field) = { } ];

  map<string, MessageMap1>                          f_message1 = 71 [ (json.field) = { } ];
  map<string, MessageMap1.Embed1>                   f_message2 = 72 [ (json.field) = { } ];
  map<string, MessageMap1.Embed1.Embed2>            f_message3 = 73 [ (json.field) = { } ];
  map<string, external.Message1 >                   f_message4 = 74 [ (json.field) = { } ];
  map<string, external.Message1.Embed1>             f_message5 = 75 [ (json.field) = { } ];
  map<string, external.Message1.Embed1.Embed2>      f_message6 = 76 [ (json.field) = { } ];
  map<string, private.MessageCommon1>               f_message7 = 77 [ (json.field) = { } ];
  map<string, private.MessageCommon1.Embed1>        f_message8 = 78 [ (json.field) = { } ];
  map<string, private.MessageCommon1.Embed1.Embed2> f_message9 = 79 [ (json.field) = { } ];
}

// For test all type of map key.
message TypeMap2 {
  map<string, string>     f_string1  = 1  [ (json.field) = { } ];
  map<int32, int32>       f_int32    = 11 [ (json.field) = { } ];
  map<int64, int64>       f_int64    = 12 [ (json.field) = { } ];
  map<uint32, uint32>     f_uint32   = 13 [ (json.field) = { } ];
  map<uint64, uint64>     f_uint64   = 14 [ (json.field) = { } ];
  map<sint32, sint32>     f_sint32   = 15 [ (json.field) = { } ];
  map<sint64, sint64>     f_sint64   = 16 [ (json.field) = { } ];
  map<sfixed32, sfixed32> f_sfixed32 = 17 [ (json.field) = { } ];
  map<sfixed64, sfixed64> f_sfixed64 = 18 [ (json.field) = { } ];
  map<fixed32, fixed32>   f_fixed32  = 19 [ (json.field) = { } ];
  map<fixed64, fixed64>   f_fixed64  = 20 [ (json.field) = { } ];
}

// For test the key of map is bool
message TypeMap3 {
  map<bool, string>   f_string1  = 1  [ (json.field) = { } ];
  map<bool, int32>    f_int32    = 11 [ (json.field) = { } ];
  map<bool, int64>    f_int64    = 12 [ (json.field) = { } ];
  map<bool, uint32>   f_uint32   = 13 [ (json.field) = { } ];
  map<bool, uint64>   f_uint64   = 14 [ (json.field) = { } ];
  map<bool, sint32>   f_sint32   = 15 [ (json.field) = { } ];
  map<bool, sint64>   f_sint64   = 16 [ (json.field) = { } ];
  map<bool, sfixed32> f_sfixed32 = 17 [ (json.field) = { } ];
  map<bool, sfixed64> f_sfixed64 = 18 [ (json.field) = { } ];
  map<bool, fixed32>  f_fixed32  = 19 [ (json.field) = { } ];
  map<bool, fixed64>  f_fixed64  = 20 [ (json.field) = { } ];
  map<bool, bool>     f_bool     = 21 [ (json.field) = { } ];
}
