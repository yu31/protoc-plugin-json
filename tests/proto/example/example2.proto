syntax = "proto3";

package example2;

option go_package = "xgo/tests/pb/pbexample";

import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

//import "tests/proto/module/external.proto";

import "proto/json.proto";

enum Enum2 {
  Zero  = 0;
  One   = 2;
  Two   = 3;
  Three = 5;
  Four  = 6;
  Five  = 7;
  Six   = 9;
  Seven = 11;
  Eight = 12;
  Nine  = 15;
  Ten   = 17;
}

message Empty2 {

}

message Example2 {
  string   f_string1 = 1;

  oneof OnetType1 {
    string f_string2 = 2;
    Empty2 f_message3 = 3;
  }
  oneof OnetType2 {
    option (json.oneof) = { hide: true };

    string f_string4 = 4;
    string f_string5 = 5;
  }

  Enum2 f_enum1 = 61 [ (json.field) = {
    omitempty: true, reference: { plain : { value: { enum: { codec: Number } } } }
  } ];
  Enum2 f_enum2 = 62 [ (json.field) = {
    omitempty: true, reference: { plain : { value: { enum: { codec: String } } } }
  } ];
  Enum2 f_enum3 = 63 [ (json.field) = {
    omitempty: true, reference: { plain : { value: { enum: { codec: NumberString } } } }
  } ];

  optional Enum2 f_enum5 = 65 [ (json.field) = {
    omitempty: true, reference: { plain : { value: { enum: { codec: Number } } } }
  } ];
  optional Enum2 f_enum6 = 66 [ (json.field) = {
    omitempty: true, reference: { plain : { value: { enum: { codec: String } } } }
  } ];
  optional Enum2 f_enum7 = 67 [ (json.field) = {
    omitempty: true, reference: { plain : { value: { enum: { codec: NumberString } } } }
  } ];

  google.protobuf.Duration f_duration1   = 41;
  google.protobuf.Timestamp f_timestamp1 = 42 [ (json.field) = {
    json: "f_timestamp1", reference: { plain: { value: { timestamp: { codec: UnixSec } } }, },
  } ];

  Empty2              f_message11 = 51;
  google.protobuf.Any f_any1 = 54;

  int32    f_int32    = 11 [ (json.field) = { json: "f_int32", } ];

  repeated string r_int32 = 71 [ (json.field) = { json: "r_int32", } ];
  repeated Empty2 r_message = 73;
  repeated Enum2  r_enum = 74;

  map<string, string> m_string1 = 81;
  map<string, Empty2> m_message1 = 82;
  map<string, Enum2> m_enum = 83;
  map<int32, int32> m_int32 = 84 [ (json.field) = {
    json: "m_int32", reference: { map: {
      key: { int32: { codec: Number } },
      value: { int32: { codec: Number } },
    } }
  } ];
}
