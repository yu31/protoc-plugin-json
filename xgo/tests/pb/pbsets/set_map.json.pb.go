// Code generated by protoc-gen-gojson. DO NOT EDIT.
// versions:
// 		protoc-gen-gojson 0.0.1
// source: tests/proto/cases/sets/set_map.proto

package pbsets

import (
	errors "errors"
	_ "github.com/yu31/protoc-plugin-json/xgo/pb/pbjson"
	jsondecoder "github.com/yu31/protoc-plugin-json/xgo/pkg/jsondecoder"
	jsonencoder "github.com/yu31/protoc-plugin-json/xgo/pkg/jsonencoder"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// MarshalJSON implements interface json.Marshaler for proto message TypeSetMap1 in file tests/proto/cases/sets/set_map.proto
func (x *TypeSetMap1) MarshalJSON() ([]byte, error) {
	if x == nil {
		return []byte("null"), nil
	}
	var err error
	encoder := jsonencoder.New(704)

	// Add begin JSON identifier
	encoder.AppendObjectBegin()

	encoder.AppendObjectKey("f_any_native1")
	if x.FAnyNative1 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FAnyNative1 {
			encoder.AppendMapKeyString(mk)
			if err = encoder.AppendLiteralInterface(mv); err != nil {
				return nil, err
			}
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendLiteralNULL()
	}
	encoder.AppendObjectKey("f_any_proto1")
	if x.FAnyProto1 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FAnyProto1 {
			encoder.AppendMapKeyString(mk)
			if err = encoder.AppendWKTAnyByProto(mv); err != nil {
				return nil, err
			}
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendLiteralNULL()
	}
	encoder.AppendObjectKey("f_duration_native1")
	if x.FDurationNative1 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FDurationNative1 {
			encoder.AppendMapKeyString(mk)
			if err = encoder.AppendLiteralInterface(mv); err != nil {
				return nil, err
			}
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendLiteralNULL()
	}
	encoder.AppendObjectKey("f_duration_string1")
	if x.FDurationString1 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FDurationString1 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendLiteralString(mv.AsDuration().String())
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendLiteralNULL()
	}
	encoder.AppendObjectKey("f_duration_nanoseconds1")
	if x.FDurationNanoseconds1 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FDurationNanoseconds1 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendLiteralInt64(mv.AsDuration().Nanoseconds())
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendLiteralNULL()
	}
	encoder.AppendObjectKey("f_duration_microseconds1")
	if x.FDurationMicroseconds1 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FDurationMicroseconds1 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendLiteralInt64(mv.AsDuration().Microseconds())
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendLiteralNULL()
	}
	encoder.AppendObjectKey("f_duration_milliseconds1")
	if x.FDurationMilliseconds1 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FDurationMilliseconds1 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendLiteralInt64(mv.AsDuration().Milliseconds())
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendLiteralNULL()
	}
	encoder.AppendObjectKey("f_duration_seconds1")
	if x.FDurationSeconds1 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FDurationSeconds1 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendLiteralFloat64(mv.AsDuration().Seconds())
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendLiteralNULL()
	}
	encoder.AppendObjectKey("f_duration_minutes1")
	if x.FDurationMinutes1 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FDurationMinutes1 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendLiteralFloat64(mv.AsDuration().Minutes())
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendLiteralNULL()
	}
	encoder.AppendObjectKey("f_duration_hours1")
	if x.FDurationHours1 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FDurationHours1 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendLiteralFloat64(mv.AsDuration().Hours())
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendLiteralNULL()
	}
	encoder.AppendObjectKey("f_timestamp_native1")
	if x.FTimestampNative1 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FTimestampNative1 {
			encoder.AppendMapKeyString(mk)
			if err = encoder.AppendLiteralInterface(mv); err != nil {
				return nil, err
			}
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendLiteralNULL()
	}
	encoder.AppendObjectKey("f_timestamp_time_layout1")
	if x.FTimestampTimeLayout1 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FTimestampTimeLayout1 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendLiteralString(mv.AsTime().Format("2006-01-02T15:04:05Z07:00"))
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendLiteralNULL()
	}
	encoder.AppendObjectKey("f_timestamp_unix_nano1")
	if x.FTimestampUnixNano1 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FTimestampUnixNano1 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendLiteralInt64(mv.AsTime().UnixNano())
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendLiteralNULL()
	}
	encoder.AppendObjectKey("f_timestamp_unix_micro1")
	if x.FTimestampUnixMicro1 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FTimestampUnixMicro1 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendLiteralInt64(mv.AsTime().UnixMicro())
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendLiteralNULL()
	}
	encoder.AppendObjectKey("f_timestamp_unix_milli1")
	if x.FTimestampUnixMilli1 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FTimestampUnixMilli1 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendLiteralInt64(mv.AsTime().UnixMilli())
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendLiteralNULL()
	}
	encoder.AppendObjectKey("f_timestamp_unix_sec1")
	if x.FTimestampUnixSec1 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FTimestampUnixSec1 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendLiteralInt64(mv.AsTime().Unix())
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendLiteralNULL()
	}

	// Add end JSON identifier
	encoder.AppendObjectEnd()
	return encoder.Bytes(), err
}

// UnmarshalJSON implements json.Unmarshaler for proto message TypeSetMap1 in file tests/proto/cases/sets/set_map.proto
func (x *TypeSetMap1) UnmarshalJSON(b []byte) error {
	if x == nil {
		return errors.New("json: Unmarshal: xgo/tests/pb/pbsets.(*TypeSetMap1) is nil")
	}

	var (
		err     error
		isNULL  bool
		decoder *jsondecoder.Decoder
	)
	if decoder, err = jsondecoder.New(b); err != nil {
		return err
	}
	if isNULL, err = decoder.BeforeReadJSON(); err != nil {
		return err
	}
	if isNULL {
		return nil
	}
LOOP_SCAN:
	for { // Loop to scan object.
		var (
			jsonKey string
			isEnd   bool
		)
		if isEnd, err = decoder.BeforeScanNext(); err != nil {
			return err
		}
		if isEnd {
			break LOOP_SCAN
		}
		if jsonKey, err = decoder.ReadJSONKey(); err != nil {
			return err
		}
		switch jsonKey { // match the jsonKey
		case "f_any_native1":
			if isNULL, err = decoder.BeforeReadMap(jsonKey); err != nil {
				return err
			}
			if isNULL {
				x.FAnyNative1 = nil
				continue LOOP_SCAN
			}
			if x.FAnyNative1 == nil {
				x.FAnyNative1 = make(map[string]*anypb.Any)
			}
			for {
				if isEnd, err = decoder.BeforeReadNext(jsonKey); err != nil {
					return err
				}
				if isEnd {
					break
				}
				var mk string
				if mk, err = decoder.ReadMapKeyString(jsonKey); err != nil {
					return err
				}
				var vv *anypb.Any
				if isNULL, err = decoder.NextLiteralIsNULL(jsonKey); err != nil {
					return err
				}
				if !isNULL {
					if x.FAnyNative1[mk] != nil {
						vv = x.FAnyNative1[mk]
					} else {
						vv = new(anypb.Any)
					}
					if err = decoder.ReadLiteralInterface(jsonKey, vv); err != nil {
						return err
					}
				}
				x.FAnyNative1[mk] = vv
			}
		case "f_any_proto1":
			if isNULL, err = decoder.BeforeReadMap(jsonKey); err != nil {
				return err
			}
			if isNULL {
				x.FAnyProto1 = nil
				continue LOOP_SCAN
			}
			if x.FAnyProto1 == nil {
				x.FAnyProto1 = make(map[string]*anypb.Any)
			}
			for {
				if isEnd, err = decoder.BeforeReadNext(jsonKey); err != nil {
					return err
				}
				if isEnd {
					break
				}
				var mk string
				if mk, err = decoder.ReadMapKeyString(jsonKey); err != nil {
					return err
				}
				var vv *anypb.Any
				if isNULL, err = decoder.NextLiteralIsNULL(jsonKey); err != nil {
					return err
				}
				if !isNULL {
					if x.FAnyProto1[mk] != nil {
						vv = x.FAnyProto1[mk]
					} else {
						vv = new(anypb.Any)
					}
					if err = decoder.ReadWKTAnyByProto(jsonKey, vv); err != nil {
						return err
					}
				}
				x.FAnyProto1[mk] = vv
			}
		case "f_duration_native1":
			if isNULL, err = decoder.BeforeReadMap(jsonKey); err != nil {
				return err
			}
			if isNULL {
				x.FDurationNative1 = nil
				continue LOOP_SCAN
			}
			if x.FDurationNative1 == nil {
				x.FDurationNative1 = make(map[string]*durationpb.Duration)
			}
			for {
				if isEnd, err = decoder.BeforeReadNext(jsonKey); err != nil {
					return err
				}
				if isEnd {
					break
				}
				var mk string
				if mk, err = decoder.ReadMapKeyString(jsonKey); err != nil {
					return err
				}
				var vv *durationpb.Duration
				if isNULL, err = decoder.NextLiteralIsNULL(jsonKey); err != nil {
					return err
				}
				if !isNULL {
					if x.FDurationNative1[mk] != nil {
						vv = x.FDurationNative1[mk]
					} else {
						vv = new(durationpb.Duration)
					}
					if err = decoder.ReadLiteralInterface(jsonKey, vv); err != nil {
						return err
					}
				}
				x.FDurationNative1[mk] = vv
			}
		case "f_duration_string1":
			if isNULL, err = decoder.BeforeReadMap(jsonKey); err != nil {
				return err
			}
			if isNULL {
				x.FDurationString1 = nil
				continue LOOP_SCAN
			}
			if x.FDurationString1 == nil {
				x.FDurationString1 = make(map[string]*durationpb.Duration)
			}
			for {
				if isEnd, err = decoder.BeforeReadNext(jsonKey); err != nil {
					return err
				}
				if isEnd {
					break
				}
				var mk string
				if mk, err = decoder.ReadMapKeyString(jsonKey); err != nil {
					return err
				}
				var vv *durationpb.Duration
				if x.FDurationString1[mk] != nil {
					vv = x.FDurationString1[mk]
				} else {
					vv = new(durationpb.Duration)
				}
				if err = decoder.ReadWKTDurationByString(jsonKey, vv); err != nil {
					return err
				}
				x.FDurationString1[mk] = vv
			}
		case "f_duration_nanoseconds1":
			if isNULL, err = decoder.BeforeReadMap(jsonKey); err != nil {
				return err
			}
			if isNULL {
				x.FDurationNanoseconds1 = nil
				continue LOOP_SCAN
			}
			if x.FDurationNanoseconds1 == nil {
				x.FDurationNanoseconds1 = make(map[string]*durationpb.Duration)
			}
			for {
				if isEnd, err = decoder.BeforeReadNext(jsonKey); err != nil {
					return err
				}
				if isEnd {
					break
				}
				var mk string
				if mk, err = decoder.ReadMapKeyString(jsonKey); err != nil {
					return err
				}
				var vv *durationpb.Duration
				if x.FDurationNanoseconds1[mk] != nil {
					vv = x.FDurationNanoseconds1[mk]
				} else {
					vv = new(durationpb.Duration)
				}
				if err = decoder.ReadWKTDurationByNanoseconds(jsonKey, vv); err != nil {
					return err
				}
				x.FDurationNanoseconds1[mk] = vv
			}
		case "f_duration_microseconds1":
			if isNULL, err = decoder.BeforeReadMap(jsonKey); err != nil {
				return err
			}
			if isNULL {
				x.FDurationMicroseconds1 = nil
				continue LOOP_SCAN
			}
			if x.FDurationMicroseconds1 == nil {
				x.FDurationMicroseconds1 = make(map[string]*durationpb.Duration)
			}
			for {
				if isEnd, err = decoder.BeforeReadNext(jsonKey); err != nil {
					return err
				}
				if isEnd {
					break
				}
				var mk string
				if mk, err = decoder.ReadMapKeyString(jsonKey); err != nil {
					return err
				}
				var vv *durationpb.Duration
				if x.FDurationMicroseconds1[mk] != nil {
					vv = x.FDurationMicroseconds1[mk]
				} else {
					vv = new(durationpb.Duration)
				}
				if err = decoder.ReadWKTDurationByMicroseconds(jsonKey, vv); err != nil {
					return err
				}
				x.FDurationMicroseconds1[mk] = vv
			}
		case "f_duration_milliseconds1":
			if isNULL, err = decoder.BeforeReadMap(jsonKey); err != nil {
				return err
			}
			if isNULL {
				x.FDurationMilliseconds1 = nil
				continue LOOP_SCAN
			}
			if x.FDurationMilliseconds1 == nil {
				x.FDurationMilliseconds1 = make(map[string]*durationpb.Duration)
			}
			for {
				if isEnd, err = decoder.BeforeReadNext(jsonKey); err != nil {
					return err
				}
				if isEnd {
					break
				}
				var mk string
				if mk, err = decoder.ReadMapKeyString(jsonKey); err != nil {
					return err
				}
				var vv *durationpb.Duration
				if x.FDurationMilliseconds1[mk] != nil {
					vv = x.FDurationMilliseconds1[mk]
				} else {
					vv = new(durationpb.Duration)
				}
				if err = decoder.ReadWKTDurationByMilliseconds(jsonKey, vv); err != nil {
					return err
				}
				x.FDurationMilliseconds1[mk] = vv
			}
		case "f_duration_seconds1":
			if isNULL, err = decoder.BeforeReadMap(jsonKey); err != nil {
				return err
			}
			if isNULL {
				x.FDurationSeconds1 = nil
				continue LOOP_SCAN
			}
			if x.FDurationSeconds1 == nil {
				x.FDurationSeconds1 = make(map[string]*durationpb.Duration)
			}
			for {
				if isEnd, err = decoder.BeforeReadNext(jsonKey); err != nil {
					return err
				}
				if isEnd {
					break
				}
				var mk string
				if mk, err = decoder.ReadMapKeyString(jsonKey); err != nil {
					return err
				}
				var vv *durationpb.Duration
				if x.FDurationSeconds1[mk] != nil {
					vv = x.FDurationSeconds1[mk]
				} else {
					vv = new(durationpb.Duration)
				}
				if err = decoder.ReadWKTDurationBySeconds(jsonKey, vv); err != nil {
					return err
				}
				x.FDurationSeconds1[mk] = vv
			}
		case "f_duration_minutes1":
			if isNULL, err = decoder.BeforeReadMap(jsonKey); err != nil {
				return err
			}
			if isNULL {
				x.FDurationMinutes1 = nil
				continue LOOP_SCAN
			}
			if x.FDurationMinutes1 == nil {
				x.FDurationMinutes1 = make(map[string]*durationpb.Duration)
			}
			for {
				if isEnd, err = decoder.BeforeReadNext(jsonKey); err != nil {
					return err
				}
				if isEnd {
					break
				}
				var mk string
				if mk, err = decoder.ReadMapKeyString(jsonKey); err != nil {
					return err
				}
				var vv *durationpb.Duration
				if x.FDurationMinutes1[mk] != nil {
					vv = x.FDurationMinutes1[mk]
				} else {
					vv = new(durationpb.Duration)
				}
				if err = decoder.ReadWKTDurationByMinutes(jsonKey, vv); err != nil {
					return err
				}
				x.FDurationMinutes1[mk] = vv
			}
		case "f_duration_hours1":
			if isNULL, err = decoder.BeforeReadMap(jsonKey); err != nil {
				return err
			}
			if isNULL {
				x.FDurationHours1 = nil
				continue LOOP_SCAN
			}
			if x.FDurationHours1 == nil {
				x.FDurationHours1 = make(map[string]*durationpb.Duration)
			}
			for {
				if isEnd, err = decoder.BeforeReadNext(jsonKey); err != nil {
					return err
				}
				if isEnd {
					break
				}
				var mk string
				if mk, err = decoder.ReadMapKeyString(jsonKey); err != nil {
					return err
				}
				var vv *durationpb.Duration
				if x.FDurationHours1[mk] != nil {
					vv = x.FDurationHours1[mk]
				} else {
					vv = new(durationpb.Duration)
				}
				if err = decoder.ReadWKTDurationByHours(jsonKey, vv); err != nil {
					return err
				}
				x.FDurationHours1[mk] = vv
			}
		case "f_timestamp_native1":
			if isNULL, err = decoder.BeforeReadMap(jsonKey); err != nil {
				return err
			}
			if isNULL {
				x.FTimestampNative1 = nil
				continue LOOP_SCAN
			}
			if x.FTimestampNative1 == nil {
				x.FTimestampNative1 = make(map[string]*timestamppb.Timestamp)
			}
			for {
				if isEnd, err = decoder.BeforeReadNext(jsonKey); err != nil {
					return err
				}
				if isEnd {
					break
				}
				var mk string
				if mk, err = decoder.ReadMapKeyString(jsonKey); err != nil {
					return err
				}
				var vv *timestamppb.Timestamp
				if isNULL, err = decoder.NextLiteralIsNULL(jsonKey); err != nil {
					return err
				}
				if !isNULL {
					if x.FTimestampNative1[mk] != nil {
						vv = x.FTimestampNative1[mk]
					} else {
						vv = new(timestamppb.Timestamp)
					}
					if err = decoder.ReadLiteralInterface(jsonKey, vv); err != nil {
						return err
					}
				}
				x.FTimestampNative1[mk] = vv
			}
		case "f_timestamp_time_layout1":
			if isNULL, err = decoder.BeforeReadMap(jsonKey); err != nil {
				return err
			}
			if isNULL {
				x.FTimestampTimeLayout1 = nil
				continue LOOP_SCAN
			}
			if x.FTimestampTimeLayout1 == nil {
				x.FTimestampTimeLayout1 = make(map[string]*timestamppb.Timestamp)
			}
			for {
				if isEnd, err = decoder.BeforeReadNext(jsonKey); err != nil {
					return err
				}
				if isEnd {
					break
				}
				var mk string
				if mk, err = decoder.ReadMapKeyString(jsonKey); err != nil {
					return err
				}
				var vv *timestamppb.Timestamp
				if x.FTimestampTimeLayout1[mk] != nil {
					vv = x.FTimestampTimeLayout1[mk]
				} else {
					vv = new(timestamppb.Timestamp)
				}
				if err = decoder.ReadWKTTimestampByString(jsonKey, vv, "2006-01-02T15:04:05Z07:00"); err != nil {
					return err
				}
				x.FTimestampTimeLayout1[mk] = vv
			}
		case "f_timestamp_unix_nano1":
			if isNULL, err = decoder.BeforeReadMap(jsonKey); err != nil {
				return err
			}
			if isNULL {
				x.FTimestampUnixNano1 = nil
				continue LOOP_SCAN
			}
			if x.FTimestampUnixNano1 == nil {
				x.FTimestampUnixNano1 = make(map[string]*timestamppb.Timestamp)
			}
			for {
				if isEnd, err = decoder.BeforeReadNext(jsonKey); err != nil {
					return err
				}
				if isEnd {
					break
				}
				var mk string
				if mk, err = decoder.ReadMapKeyString(jsonKey); err != nil {
					return err
				}
				var vv *timestamppb.Timestamp
				if x.FTimestampUnixNano1[mk] != nil {
					vv = x.FTimestampUnixNano1[mk]
				} else {
					vv = new(timestamppb.Timestamp)
				}
				if err = decoder.ReadWKTTimestampByUnixNano(jsonKey, vv); err != nil {
					return err
				}
				x.FTimestampUnixNano1[mk] = vv
			}
		case "f_timestamp_unix_micro1":
			if isNULL, err = decoder.BeforeReadMap(jsonKey); err != nil {
				return err
			}
			if isNULL {
				x.FTimestampUnixMicro1 = nil
				continue LOOP_SCAN
			}
			if x.FTimestampUnixMicro1 == nil {
				x.FTimestampUnixMicro1 = make(map[string]*timestamppb.Timestamp)
			}
			for {
				if isEnd, err = decoder.BeforeReadNext(jsonKey); err != nil {
					return err
				}
				if isEnd {
					break
				}
				var mk string
				if mk, err = decoder.ReadMapKeyString(jsonKey); err != nil {
					return err
				}
				var vv *timestamppb.Timestamp
				if x.FTimestampUnixMicro1[mk] != nil {
					vv = x.FTimestampUnixMicro1[mk]
				} else {
					vv = new(timestamppb.Timestamp)
				}
				if err = decoder.ReadWKTTimestampByUnixMicro(jsonKey, vv); err != nil {
					return err
				}
				x.FTimestampUnixMicro1[mk] = vv
			}
		case "f_timestamp_unix_milli1":
			if isNULL, err = decoder.BeforeReadMap(jsonKey); err != nil {
				return err
			}
			if isNULL {
				x.FTimestampUnixMilli1 = nil
				continue LOOP_SCAN
			}
			if x.FTimestampUnixMilli1 == nil {
				x.FTimestampUnixMilli1 = make(map[string]*timestamppb.Timestamp)
			}
			for {
				if isEnd, err = decoder.BeforeReadNext(jsonKey); err != nil {
					return err
				}
				if isEnd {
					break
				}
				var mk string
				if mk, err = decoder.ReadMapKeyString(jsonKey); err != nil {
					return err
				}
				var vv *timestamppb.Timestamp
				if x.FTimestampUnixMilli1[mk] != nil {
					vv = x.FTimestampUnixMilli1[mk]
				} else {
					vv = new(timestamppb.Timestamp)
				}
				if err = decoder.ReadWKTTimestampByUnixMilli(jsonKey, vv); err != nil {
					return err
				}
				x.FTimestampUnixMilli1[mk] = vv
			}
		case "f_timestamp_unix_sec1":
			if isNULL, err = decoder.BeforeReadMap(jsonKey); err != nil {
				return err
			}
			if isNULL {
				x.FTimestampUnixSec1 = nil
				continue LOOP_SCAN
			}
			if x.FTimestampUnixSec1 == nil {
				x.FTimestampUnixSec1 = make(map[string]*timestamppb.Timestamp)
			}
			for {
				if isEnd, err = decoder.BeforeReadNext(jsonKey); err != nil {
					return err
				}
				if isEnd {
					break
				}
				var mk string
				if mk, err = decoder.ReadMapKeyString(jsonKey); err != nil {
					return err
				}
				var vv *timestamppb.Timestamp
				if x.FTimestampUnixSec1[mk] != nil {
					vv = x.FTimestampUnixSec1[mk]
				} else {
					vv = new(timestamppb.Timestamp)
				}
				if err = decoder.ReadWKTTimestampByUnixSec(jsonKey, vv); err != nil {
					return err
				}
				x.FTimestampUnixSec1[mk] = vv
			}
		default:
			if err = decoder.DiscardValue(jsonKey); err != nil {
				return err
			}
		} // end switch
	}
	return nil
}
