// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: tests/proto/cases/references/type_optional.proto

package pbreferences

import (
	_ "github.com/yu31/protoc-plugin-json/xgo/pb/pbjson"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TypeOptional1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FInt32A    *int32   `protobuf:"varint,1,opt,name=f_int32a,json=fInt32a,proto3,oneof" json:"f_int32a,omitempty"`
	FInt32B    *int32   `protobuf:"varint,2,opt,name=f_int32b,json=fInt32b,proto3,oneof" json:"f_int32b,omitempty"`
	FInt64A    *int64   `protobuf:"varint,3,opt,name=f_int64a,json=fInt64a,proto3,oneof" json:"f_int64a,omitempty"`
	FInt64B    *int64   `protobuf:"varint,4,opt,name=f_int64b,json=fInt64b,proto3,oneof" json:"f_int64b,omitempty"`
	FUint32A   *uint32  `protobuf:"varint,5,opt,name=f_uint32a,json=fUint32a,proto3,oneof" json:"f_uint32a,omitempty"`
	FUint32B   *uint32  `protobuf:"varint,6,opt,name=f_uint32b,json=fUint32b,proto3,oneof" json:"f_uint32b,omitempty"`
	FUint64A   *uint64  `protobuf:"varint,7,opt,name=f_uint64a,json=fUint64a,proto3,oneof" json:"f_uint64a,omitempty"`
	FUint64B   *uint64  `protobuf:"varint,8,opt,name=f_uint64b,json=fUint64b,proto3,oneof" json:"f_uint64b,omitempty"`
	FSint32A   *int32   `protobuf:"zigzag32,9,opt,name=f_sint32a,json=fSint32a,proto3,oneof" json:"f_sint32a,omitempty"`
	FSint32B   *int32   `protobuf:"zigzag32,10,opt,name=f_sint32b,json=fSint32b,proto3,oneof" json:"f_sint32b,omitempty"`
	FSint64A   *int64   `protobuf:"zigzag64,11,opt,name=f_sint64a,json=fSint64a,proto3,oneof" json:"f_sint64a,omitempty"`
	FSint64B   *int64   `protobuf:"zigzag64,12,opt,name=f_sint64b,json=fSint64b,proto3,oneof" json:"f_sint64b,omitempty"`
	FSfixed32A *int32   `protobuf:"fixed32,13,opt,name=f_sfixed32a,json=fSfixed32a,proto3,oneof" json:"f_sfixed32a,omitempty"`
	FSfixed32B *int32   `protobuf:"fixed32,14,opt,name=f_sfixed32b,json=fSfixed32b,proto3,oneof" json:"f_sfixed32b,omitempty"`
	FSfixed64A *int64   `protobuf:"fixed64,15,opt,name=f_sfixed64a,json=fSfixed64a,proto3,oneof" json:"f_sfixed64a,omitempty"`
	FSfixed64B *int64   `protobuf:"fixed64,16,opt,name=f_sfixed64b,json=fSfixed64b,proto3,oneof" json:"f_sfixed64b,omitempty"`
	FFixed32A  *uint32  `protobuf:"fixed32,17,opt,name=f_fixed32a,json=fFixed32a,proto3,oneof" json:"f_fixed32a,omitempty"`
	FFixed32B  *uint32  `protobuf:"fixed32,18,opt,name=f_fixed32b,json=fFixed32b,proto3,oneof" json:"f_fixed32b,omitempty"`
	FFixed64A  *uint64  `protobuf:"fixed64,19,opt,name=f_fixed64a,json=fFixed64a,proto3,oneof" json:"f_fixed64a,omitempty"`
	FFixed64B  *uint64  `protobuf:"fixed64,20,opt,name=f_fixed64b,json=fFixed64b,proto3,oneof" json:"f_fixed64b,omitempty"`
	FFloat1    *float32 `protobuf:"fixed32,21,opt,name=f_float1,json=fFloat1,proto3,oneof" json:"f_float1,omitempty"`
	FFloat2    *float32 `protobuf:"fixed32,22,opt,name=f_float2,json=fFloat2,proto3,oneof" json:"f_float2,omitempty"`
	FDouble1   *float64 `protobuf:"fixed64,23,opt,name=f_double1,json=fDouble1,proto3,oneof" json:"f_double1,omitempty"`
	FDouble2   *float64 `protobuf:"fixed64,24,opt,name=f_double2,json=fDouble2,proto3,oneof" json:"f_double2,omitempty"`
	FBool1     *bool    `protobuf:"varint,25,opt,name=f_bool1,json=fBool1,proto3,oneof" json:"f_bool1,omitempty"`
	FBool2     *bool    `protobuf:"varint,27,opt,name=f_bool2,json=fBool2,proto3,oneof" json:"f_bool2,omitempty"`
}

func (x *TypeOptional1) Reset() {
	*x = TypeOptional1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_cases_references_type_optional_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeOptional1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeOptional1) ProtoMessage() {}

func (x *TypeOptional1) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_cases_references_type_optional_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeOptional1.ProtoReflect.Descriptor instead.
func (*TypeOptional1) Descriptor() ([]byte, []int) {
	return file_tests_proto_cases_references_type_optional_proto_rawDescGZIP(), []int{0}
}

func (x *TypeOptional1) GetFInt32A() int32 {
	if x != nil && x.FInt32A != nil {
		return *x.FInt32A
	}
	return 0
}

func (x *TypeOptional1) GetFInt32B() int32 {
	if x != nil && x.FInt32B != nil {
		return *x.FInt32B
	}
	return 0
}

func (x *TypeOptional1) GetFInt64A() int64 {
	if x != nil && x.FInt64A != nil {
		return *x.FInt64A
	}
	return 0
}

func (x *TypeOptional1) GetFInt64B() int64 {
	if x != nil && x.FInt64B != nil {
		return *x.FInt64B
	}
	return 0
}

func (x *TypeOptional1) GetFUint32A() uint32 {
	if x != nil && x.FUint32A != nil {
		return *x.FUint32A
	}
	return 0
}

func (x *TypeOptional1) GetFUint32B() uint32 {
	if x != nil && x.FUint32B != nil {
		return *x.FUint32B
	}
	return 0
}

func (x *TypeOptional1) GetFUint64A() uint64 {
	if x != nil && x.FUint64A != nil {
		return *x.FUint64A
	}
	return 0
}

func (x *TypeOptional1) GetFUint64B() uint64 {
	if x != nil && x.FUint64B != nil {
		return *x.FUint64B
	}
	return 0
}

func (x *TypeOptional1) GetFSint32A() int32 {
	if x != nil && x.FSint32A != nil {
		return *x.FSint32A
	}
	return 0
}

func (x *TypeOptional1) GetFSint32B() int32 {
	if x != nil && x.FSint32B != nil {
		return *x.FSint32B
	}
	return 0
}

func (x *TypeOptional1) GetFSint64A() int64 {
	if x != nil && x.FSint64A != nil {
		return *x.FSint64A
	}
	return 0
}

func (x *TypeOptional1) GetFSint64B() int64 {
	if x != nil && x.FSint64B != nil {
		return *x.FSint64B
	}
	return 0
}

func (x *TypeOptional1) GetFSfixed32A() int32 {
	if x != nil && x.FSfixed32A != nil {
		return *x.FSfixed32A
	}
	return 0
}

func (x *TypeOptional1) GetFSfixed32B() int32 {
	if x != nil && x.FSfixed32B != nil {
		return *x.FSfixed32B
	}
	return 0
}

func (x *TypeOptional1) GetFSfixed64A() int64 {
	if x != nil && x.FSfixed64A != nil {
		return *x.FSfixed64A
	}
	return 0
}

func (x *TypeOptional1) GetFSfixed64B() int64 {
	if x != nil && x.FSfixed64B != nil {
		return *x.FSfixed64B
	}
	return 0
}

func (x *TypeOptional1) GetFFixed32A() uint32 {
	if x != nil && x.FFixed32A != nil {
		return *x.FFixed32A
	}
	return 0
}

func (x *TypeOptional1) GetFFixed32B() uint32 {
	if x != nil && x.FFixed32B != nil {
		return *x.FFixed32B
	}
	return 0
}

func (x *TypeOptional1) GetFFixed64A() uint64 {
	if x != nil && x.FFixed64A != nil {
		return *x.FFixed64A
	}
	return 0
}

func (x *TypeOptional1) GetFFixed64B() uint64 {
	if x != nil && x.FFixed64B != nil {
		return *x.FFixed64B
	}
	return 0
}

func (x *TypeOptional1) GetFFloat1() float32 {
	if x != nil && x.FFloat1 != nil {
		return *x.FFloat1
	}
	return 0
}

func (x *TypeOptional1) GetFFloat2() float32 {
	if x != nil && x.FFloat2 != nil {
		return *x.FFloat2
	}
	return 0
}

func (x *TypeOptional1) GetFDouble1() float64 {
	if x != nil && x.FDouble1 != nil {
		return *x.FDouble1
	}
	return 0
}

func (x *TypeOptional1) GetFDouble2() float64 {
	if x != nil && x.FDouble2 != nil {
		return *x.FDouble2
	}
	return 0
}

func (x *TypeOptional1) GetFBool1() bool {
	if x != nil && x.FBool1 != nil {
		return *x.FBool1
	}
	return false
}

func (x *TypeOptional1) GetFBool2() bool {
	if x != nil && x.FBool2 != nil {
		return *x.FBool2
	}
	return false
}

var File_tests_proto_cases_references_type_optional_proto protoreflect.FileDescriptor

var file_tests_proto_cases_references_type_optional_proto_rawDesc = []byte{
	0x0a, 0x30, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x1a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x0d, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x31, 0x12, 0x2e, 0x0a, 0x08, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0x8a, 0xa2, 0x1f, 0x0a, 0x22, 0x08, 0x0a,
	0x06, 0x0a, 0x04, 0x5a, 0x02, 0x08, 0x01, 0x48, 0x00, 0x52, 0x07, 0x66, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x61, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x08, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0x8a, 0xa2, 0x1f, 0x0a, 0x22, 0x08, 0x0a,
	0x06, 0x0a, 0x04, 0x5a, 0x02, 0x08, 0x02, 0x48, 0x01, 0x52, 0x07, 0x66, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x62, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x08, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0e, 0x8a, 0xa2, 0x1f, 0x0a, 0x22, 0x08, 0x0a,
	0x06, 0x0a, 0x04, 0x62, 0x02, 0x08, 0x01, 0x48, 0x02, 0x52, 0x07, 0x66, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x61, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x08, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0e, 0x8a, 0xa2, 0x1f, 0x0a, 0x22, 0x08, 0x0a,
	0x06, 0x0a, 0x04, 0x62, 0x02, 0x08, 0x02, 0x48, 0x03, 0x52, 0x07, 0x66, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x62, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x09, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0f, 0x8a, 0xa2, 0x1f, 0x0b, 0x22, 0x09,
	0x0a, 0x07, 0x0a, 0x05, 0x8a, 0x01, 0x02, 0x08, 0x01, 0x48, 0x04, 0x52, 0x08, 0x66, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x61, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x09, 0x66, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0f, 0x8a, 0xa2, 0x1f,
	0x0b, 0x22, 0x09, 0x0a, 0x07, 0x0a, 0x05, 0x8a, 0x01, 0x02, 0x08, 0x02, 0x48, 0x05, 0x52, 0x08,
	0x66, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x62, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x09, 0x66,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0f,
	0x8a, 0xa2, 0x1f, 0x0b, 0x22, 0x09, 0x0a, 0x07, 0x0a, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x48,
	0x06, 0x52, 0x08, 0x66, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x61, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x09, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x0f, 0x8a, 0xa2, 0x1f, 0x0b, 0x22, 0x09, 0x0a, 0x07, 0x0a, 0x05, 0x92, 0x01, 0x02,
	0x08, 0x02, 0x48, 0x07, 0x52, 0x08, 0x66, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x62, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x61, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x11, 0x42, 0x0e, 0x8a, 0xa2, 0x1f, 0x0a, 0x22, 0x08, 0x0a, 0x06, 0x0a, 0x04,
	0x6a, 0x02, 0x08, 0x01, 0x48, 0x08, 0x52, 0x08, 0x66, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x61,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x62,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x42, 0x0e, 0x8a, 0xa2, 0x1f, 0x0a, 0x22, 0x08, 0x0a, 0x06,
	0x0a, 0x04, 0x6a, 0x02, 0x08, 0x02, 0x48, 0x09, 0x52, 0x08, 0x66, 0x53, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x62, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x42, 0x0e, 0x8a, 0xa2, 0x1f, 0x0a, 0x22, 0x08,
	0x0a, 0x06, 0x0a, 0x04, 0x72, 0x02, 0x08, 0x01, 0x48, 0x0a, 0x52, 0x08, 0x66, 0x53, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x61, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x62, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x12, 0x42, 0x0e, 0x8a, 0xa2, 0x1f, 0x0a,
	0x22, 0x08, 0x0a, 0x06, 0x0a, 0x04, 0x72, 0x02, 0x08, 0x02, 0x48, 0x0b, 0x52, 0x08, 0x66, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x62, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0b, 0x66, 0x5f, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x0e,
	0x8a, 0xa2, 0x1f, 0x0a, 0x22, 0x08, 0x0a, 0x06, 0x0a, 0x04, 0x7a, 0x02, 0x08, 0x01, 0x48, 0x0c,
	0x52, 0x0a, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x61, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x0b, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x62, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0f, 0x42, 0x0e, 0x8a, 0xa2, 0x1f, 0x0a, 0x22, 0x08, 0x0a, 0x06, 0x0a, 0x04,
	0x7a, 0x02, 0x08, 0x02, 0x48, 0x0d, 0x52, 0x0a, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x62, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0b, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0f, 0x8a, 0xa2, 0x1f, 0x0b,
	0x22, 0x09, 0x0a, 0x07, 0x0a, 0x05, 0x82, 0x01, 0x02, 0x08, 0x01, 0x48, 0x0e, 0x52, 0x0a, 0x66,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x61, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0b,
	0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x62, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x10, 0x42, 0x0f, 0x8a, 0xa2, 0x1f, 0x0b, 0x22, 0x09, 0x0a, 0x07, 0x0a, 0x05, 0x82, 0x01, 0x02,
	0x08, 0x02, 0x48, 0x0f, 0x52, 0x0a, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x62,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x07, 0x42, 0x0f, 0x8a, 0xa2, 0x1f, 0x0b, 0x22, 0x09, 0x0a,
	0x07, 0x0a, 0x05, 0x9a, 0x01, 0x02, 0x08, 0x01, 0x48, 0x10, 0x52, 0x09, 0x66, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x61, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x66, 0x5f, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x62, 0x18, 0x12, 0x20, 0x01, 0x28, 0x07, 0x42, 0x0f, 0x8a, 0xa2,
	0x1f, 0x0b, 0x22, 0x09, 0x0a, 0x07, 0x0a, 0x05, 0x9a, 0x01, 0x02, 0x08, 0x02, 0x48, 0x11, 0x52,
	0x09, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x62, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x0a, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x06, 0x42, 0x0f, 0x8a, 0xa2, 0x1f, 0x0b, 0x22, 0x09, 0x0a, 0x07, 0x0a, 0x05, 0xa2, 0x01, 0x02,
	0x08, 0x01, 0x48, 0x12, 0x52, 0x09, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x61, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x62,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x06, 0x42, 0x0f, 0x8a, 0xa2, 0x1f, 0x0b, 0x22, 0x09, 0x0a, 0x07,
	0x0a, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x02, 0x48, 0x13, 0x52, 0x09, 0x66, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x62, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x08, 0x66, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x31, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0f, 0x8a, 0xa2, 0x1f, 0x0b, 0x22,
	0x09, 0x0a, 0x07, 0x0a, 0x05, 0xaa, 0x01, 0x02, 0x08, 0x01, 0x48, 0x14, 0x52, 0x07, 0x66, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x31, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x08, 0x66, 0x5f, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x32, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0f, 0x8a, 0xa2, 0x1f, 0x0b,
	0x22, 0x09, 0x0a, 0x07, 0x0a, 0x05, 0xaa, 0x01, 0x02, 0x08, 0x02, 0x48, 0x15, 0x52, 0x07, 0x66,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x09, 0x66, 0x5f, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x31, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0f, 0x8a, 0xa2,
	0x1f, 0x0b, 0x22, 0x09, 0x0a, 0x07, 0x0a, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x48, 0x16, 0x52,
	0x08, 0x66, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x09,
	0x66, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x32, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x0f, 0x8a, 0xa2, 0x1f, 0x0b, 0x22, 0x09, 0x0a, 0x07, 0x0a, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x02,
	0x48, 0x17, 0x52, 0x08, 0x66, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x07, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x31, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x0f, 0x8a, 0xa2, 0x1f, 0x0b, 0x22, 0x09, 0x0a, 0x07, 0x0a, 0x05, 0xba, 0x01, 0x02, 0x08,
	0x01, 0x48, 0x18, 0x52, 0x06, 0x66, 0x42, 0x6f, 0x6f, 0x6c, 0x31, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x07, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x0f, 0x8a, 0xa2, 0x1f, 0x0b, 0x22, 0x09, 0x0a, 0x07, 0x0a, 0x05, 0xba, 0x01, 0x02, 0x08, 0x02,
	0x48, 0x19, 0x52, 0x06, 0x66, 0x42, 0x6f, 0x6f, 0x6c, 0x32, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66,
	0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x62, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x5f, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x62, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x61, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x62, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x62, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x5f,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x5f, 0x73, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x62, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x62, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x61, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x62, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x61, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x62, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x61,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x62, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x61, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x62, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x66, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x31, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66,
	0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x31, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x5f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x32, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x31, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x42, 0x1b, 0x5a, 0x19, 0x78,
	0x67, 0x6f, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x62, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tests_proto_cases_references_type_optional_proto_rawDescOnce sync.Once
	file_tests_proto_cases_references_type_optional_proto_rawDescData = file_tests_proto_cases_references_type_optional_proto_rawDesc
)

func file_tests_proto_cases_references_type_optional_proto_rawDescGZIP() []byte {
	file_tests_proto_cases_references_type_optional_proto_rawDescOnce.Do(func() {
		file_tests_proto_cases_references_type_optional_proto_rawDescData = protoimpl.X.CompressGZIP(file_tests_proto_cases_references_type_optional_proto_rawDescData)
	})
	return file_tests_proto_cases_references_type_optional_proto_rawDescData
}

var file_tests_proto_cases_references_type_optional_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_tests_proto_cases_references_type_optional_proto_goTypes = []interface{}{
	(*TypeOptional1)(nil), // 0: type_optional.TypeOptional1
}
var file_tests_proto_cases_references_type_optional_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_tests_proto_cases_references_type_optional_proto_init() }
func file_tests_proto_cases_references_type_optional_proto_init() {
	if File_tests_proto_cases_references_type_optional_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tests_proto_cases_references_type_optional_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeOptional1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tests_proto_cases_references_type_optional_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tests_proto_cases_references_type_optional_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tests_proto_cases_references_type_optional_proto_goTypes,
		DependencyIndexes: file_tests_proto_cases_references_type_optional_proto_depIdxs,
		MessageInfos:      file_tests_proto_cases_references_type_optional_proto_msgTypes,
	}.Build()
	File_tests_proto_cases_references_type_optional_proto = out.File
	file_tests_proto_cases_references_type_optional_proto_rawDesc = nil
	file_tests_proto_cases_references_type_optional_proto_goTypes = nil
	file_tests_proto_cases_references_type_optional_proto_depIdxs = nil
}
