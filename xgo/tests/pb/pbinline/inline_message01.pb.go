// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: tests/proto/cases/inline/inline_message01.proto

package pbinline

import (
	_ "github.com/yu31/protoc-plugin-json/xgo/pb/pbjson"
	pbexternal "github.com/yu31/protoc-plugin-json/xgo/tests/pb/pbexternal"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Link to 02/03/04/05
type MessageLevel01 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Field for literal.
	Level01FString1 string `protobuf:"bytes,1,opt,name=level01_f_string1,json=level01FString1,proto3" json:"level01_f_string1,omitempty"`
	Level01FString2 string `protobuf:"bytes,2,opt,name=level01_f_string2,json=level01FString2,proto3" json:"level01_f_string2,omitempty"`
	// Field for optional.
	Level01PString1 *string `protobuf:"bytes,11,opt,name=level01_p_string1,json=level01PString1,proto3,oneof" json:"level01_p_string1,omitempty"`
	Level01PString2 *string `protobuf:"bytes,12,opt,name=level01_p_string2,json=level01PString2,proto3,oneof" json:"level01_p_string2,omitempty"`
	// Field for repeated.
	Level01RString1 []string `protobuf:"bytes,21,rep,name=level01_r_string1,json=level01RString1,proto3" json:"level01_r_string1,omitempty"`
	Level01RString2 []string `protobuf:"bytes,22,rep,name=level01_r_string2,json=level01RString2,proto3" json:"level01_r_string2,omitempty"`
	// Field for map.
	Level01MString1 map[string]string `protobuf:"bytes,31,rep,name=level01_m_string1,json=level01MString1,proto3" json:"level01_m_string1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Level01MString2 map[string]string `protobuf:"bytes,32,rep,name=level01_m_string2,json=level01MString2,proto3" json:"level01_m_string2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Field message and extern-line.
	Level01FMessageExtern1 *pbexternal.Message1 `protobuf:"bytes,41,opt,name=level01_f_message_extern1,json=level01FMessageExtern1,proto3" json:"level01_f_message_extern1,omitempty"`
	Level01FMessageExtern2 *pbexternal.Message1 `protobuf:"bytes,42,opt,name=level01_f_message_extern2,json=level01FMessageExtern2,proto3" json:"level01_f_message_extern2,omitempty"`
	// Field message and inline.
	Level01FMessageInline02 *MessageLevel02 `protobuf:"bytes,51,opt,name=level01_f_message_inline02,json=level01FMessageInline02,proto3" json:"level01_f_message_inline02,omitempty"`
	Level01FMessageInline03 *MessageLevel03 `protobuf:"bytes,52,opt,name=level01_f_message_inline03,json=level01FMessageInline03,proto3" json:"level01_f_message_inline03,omitempty"`
	// Field for oneof and extern-line.
	//
	// Types that are assignable to Level01OneOfExtern1:
	//	*MessageLevel01_Level01One1String1
	//	*MessageLevel01_Level01One1MessageInline02
	//	*MessageLevel01_Level01One1MessageInline03
	//	*MessageLevel01_Level01One1MessageInlineEmtpy
	//	*MessageLevel01_Level01One1MessageInlineIgnoreByRef
	//	*MessageLevel01_Level01One1MessageInlineIgnoreFields
	Level01OneOfExtern1 isMessageLevel01_Level01OneOfExtern1 `protobuf_oneof:"Level01OneOfExtern1"`
	// Field for oneof and inline.
	//
	// Types that are assignable to Level01OneOfInline1:
	//	*MessageLevel01_Level01One2String1
	//	*MessageLevel01_Level01One2MessageExtern1
	//	*MessageLevel01_Level01One2MessageExtern2
	//	*MessageLevel01_Level01One2MessageInline04
	//	*MessageLevel01_Level01One2MessageInline05
	//	*MessageLevel01_Level01One2MessageInlineEmtpy
	//	*MessageLevel01_Level01One2MessageInlineIgnoreByRef
	//	*MessageLevel01_Level01One2MessageInlineIgnoreFields
	Level01OneOfInline1 isMessageLevel01_Level01OneOfInline1 `protobuf_oneof:"Level01OneOfInline1"`
	// Types that are assignable to Level01OneOfOmitempty1:
	//	*MessageLevel01_Level01One3String1
	//	*MessageLevel01_Level01One3Int32A
	Level01OneOfOmitempty1            isMessageLevel01_Level01OneOfOmitempty1 `protobuf_oneof:"Level01OneOfOmitempty1"`
	Level01FMessageInlineEmtpy        *MessageEmpty1                          `protobuf:"bytes,61,opt,name=level01_f_message_inline_emtpy,json=level01FMessageInlineEmtpy,proto3" json:"level01_f_message_inline_emtpy,omitempty"`
	Level01FMessageInlineIgnoreByRef  *MessageIgnoreByRef                     `protobuf:"bytes,62,opt,name=level01_f_message_inline_ignore_by_ref,json=level01FMessageInlineIgnoreByRef,proto3" json:"level01_f_message_inline_ignore_by_ref,omitempty"`
	Level01FMessageInlineIgnoreFields *MessageIgnoreFields                    `protobuf:"bytes,63,opt,name=level01_f_message_inline_ignore_fields,json=level01FMessageInlineIgnoreFields,proto3" json:"level01_f_message_inline_ignore_fields,omitempty"`
	// Types that are assignable to Level01OneOfIgnoreSelf1:
	//	*MessageLevel01_Level01One4String1
	//	*MessageLevel01_Level01One4Int32A
	Level01OneOfIgnoreSelf1 isMessageLevel01_Level01OneOfIgnoreSelf1 `protobuf_oneof:"Level01OneOfIgnoreSelf1"`
	// Types that are assignable to Level01OneOfIgnoreParts1:
	//	*MessageLevel01_Level01One5String1
	//	*MessageLevel01_Level01One5Int32A
	Level01OneOfIgnoreParts1 isMessageLevel01_Level01OneOfIgnoreParts1 `protobuf_oneof:"Level01OneOfIgnoreParts1"`
}

func (x *MessageLevel01) Reset() {
	*x = MessageLevel01{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_cases_inline_inline_message01_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageLevel01) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageLevel01) ProtoMessage() {}

func (x *MessageLevel01) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_cases_inline_inline_message01_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageLevel01.ProtoReflect.Descriptor instead.
func (*MessageLevel01) Descriptor() ([]byte, []int) {
	return file_tests_proto_cases_inline_inline_message01_proto_rawDescGZIP(), []int{0}
}

func (x *MessageLevel01) GetLevel01FString1() string {
	if x != nil {
		return x.Level01FString1
	}
	return ""
}

func (x *MessageLevel01) GetLevel01FString2() string {
	if x != nil {
		return x.Level01FString2
	}
	return ""
}

func (x *MessageLevel01) GetLevel01PString1() string {
	if x != nil && x.Level01PString1 != nil {
		return *x.Level01PString1
	}
	return ""
}

func (x *MessageLevel01) GetLevel01PString2() string {
	if x != nil && x.Level01PString2 != nil {
		return *x.Level01PString2
	}
	return ""
}

func (x *MessageLevel01) GetLevel01RString1() []string {
	if x != nil {
		return x.Level01RString1
	}
	return nil
}

func (x *MessageLevel01) GetLevel01RString2() []string {
	if x != nil {
		return x.Level01RString2
	}
	return nil
}

func (x *MessageLevel01) GetLevel01MString1() map[string]string {
	if x != nil {
		return x.Level01MString1
	}
	return nil
}

func (x *MessageLevel01) GetLevel01MString2() map[string]string {
	if x != nil {
		return x.Level01MString2
	}
	return nil
}

func (x *MessageLevel01) GetLevel01FMessageExtern1() *pbexternal.Message1 {
	if x != nil {
		return x.Level01FMessageExtern1
	}
	return nil
}

func (x *MessageLevel01) GetLevel01FMessageExtern2() *pbexternal.Message1 {
	if x != nil {
		return x.Level01FMessageExtern2
	}
	return nil
}

func (x *MessageLevel01) GetLevel01FMessageInline02() *MessageLevel02 {
	if x != nil {
		return x.Level01FMessageInline02
	}
	return nil
}

func (x *MessageLevel01) GetLevel01FMessageInline03() *MessageLevel03 {
	if x != nil {
		return x.Level01FMessageInline03
	}
	return nil
}

func (m *MessageLevel01) GetLevel01OneOfExtern1() isMessageLevel01_Level01OneOfExtern1 {
	if m != nil {
		return m.Level01OneOfExtern1
	}
	return nil
}

func (x *MessageLevel01) GetLevel01One1String1() string {
	if x, ok := x.GetLevel01OneOfExtern1().(*MessageLevel01_Level01One1String1); ok {
		return x.Level01One1String1
	}
	return ""
}

func (x *MessageLevel01) GetLevel01One1MessageInline02() *MessageLevel02 {
	if x, ok := x.GetLevel01OneOfExtern1().(*MessageLevel01_Level01One1MessageInline02); ok {
		return x.Level01One1MessageInline02
	}
	return nil
}

func (x *MessageLevel01) GetLevel01One1MessageInline03() *MessageLevel03 {
	if x, ok := x.GetLevel01OneOfExtern1().(*MessageLevel01_Level01One1MessageInline03); ok {
		return x.Level01One1MessageInline03
	}
	return nil
}

func (x *MessageLevel01) GetLevel01One1MessageInlineEmtpy() *MessageEmpty1 {
	if x, ok := x.GetLevel01OneOfExtern1().(*MessageLevel01_Level01One1MessageInlineEmtpy); ok {
		return x.Level01One1MessageInlineEmtpy
	}
	return nil
}

func (x *MessageLevel01) GetLevel01One1MessageInlineIgnoreByRef() *MessageIgnoreByRef {
	if x, ok := x.GetLevel01OneOfExtern1().(*MessageLevel01_Level01One1MessageInlineIgnoreByRef); ok {
		return x.Level01One1MessageInlineIgnoreByRef
	}
	return nil
}

func (x *MessageLevel01) GetLevel01One1MessageInlineIgnoreFields() *MessageIgnoreFields {
	if x, ok := x.GetLevel01OneOfExtern1().(*MessageLevel01_Level01One1MessageInlineIgnoreFields); ok {
		return x.Level01One1MessageInlineIgnoreFields
	}
	return nil
}

func (m *MessageLevel01) GetLevel01OneOfInline1() isMessageLevel01_Level01OneOfInline1 {
	if m != nil {
		return m.Level01OneOfInline1
	}
	return nil
}

func (x *MessageLevel01) GetLevel01One2String1() string {
	if x, ok := x.GetLevel01OneOfInline1().(*MessageLevel01_Level01One2String1); ok {
		return x.Level01One2String1
	}
	return ""
}

func (x *MessageLevel01) GetLevel01One2MessageExtern1() *pbexternal.Message1 {
	if x, ok := x.GetLevel01OneOfInline1().(*MessageLevel01_Level01One2MessageExtern1); ok {
		return x.Level01One2MessageExtern1
	}
	return nil
}

func (x *MessageLevel01) GetLevel01One2MessageExtern2() *pbexternal.Message1 {
	if x, ok := x.GetLevel01OneOfInline1().(*MessageLevel01_Level01One2MessageExtern2); ok {
		return x.Level01One2MessageExtern2
	}
	return nil
}

func (x *MessageLevel01) GetLevel01One2MessageInline04() *MessageLevel04 {
	if x, ok := x.GetLevel01OneOfInline1().(*MessageLevel01_Level01One2MessageInline04); ok {
		return x.Level01One2MessageInline04
	}
	return nil
}

func (x *MessageLevel01) GetLevel01One2MessageInline05() *MessageLevel05 {
	if x, ok := x.GetLevel01OneOfInline1().(*MessageLevel01_Level01One2MessageInline05); ok {
		return x.Level01One2MessageInline05
	}
	return nil
}

func (x *MessageLevel01) GetLevel01One2MessageInlineEmtpy() *MessageEmpty1 {
	if x, ok := x.GetLevel01OneOfInline1().(*MessageLevel01_Level01One2MessageInlineEmtpy); ok {
		return x.Level01One2MessageInlineEmtpy
	}
	return nil
}

func (x *MessageLevel01) GetLevel01One2MessageInlineIgnoreByRef() *MessageIgnoreByRef {
	if x, ok := x.GetLevel01OneOfInline1().(*MessageLevel01_Level01One2MessageInlineIgnoreByRef); ok {
		return x.Level01One2MessageInlineIgnoreByRef
	}
	return nil
}

func (x *MessageLevel01) GetLevel01One2MessageInlineIgnoreFields() *MessageIgnoreFields {
	if x, ok := x.GetLevel01OneOfInline1().(*MessageLevel01_Level01One2MessageInlineIgnoreFields); ok {
		return x.Level01One2MessageInlineIgnoreFields
	}
	return nil
}

func (m *MessageLevel01) GetLevel01OneOfOmitempty1() isMessageLevel01_Level01OneOfOmitempty1 {
	if m != nil {
		return m.Level01OneOfOmitempty1
	}
	return nil
}

func (x *MessageLevel01) GetLevel01One3String1() string {
	if x, ok := x.GetLevel01OneOfOmitempty1().(*MessageLevel01_Level01One3String1); ok {
		return x.Level01One3String1
	}
	return ""
}

func (x *MessageLevel01) GetLevel01One3Int32A() int32 {
	if x, ok := x.GetLevel01OneOfOmitempty1().(*MessageLevel01_Level01One3Int32A); ok {
		return x.Level01One3Int32A
	}
	return 0
}

func (x *MessageLevel01) GetLevel01FMessageInlineEmtpy() *MessageEmpty1 {
	if x != nil {
		return x.Level01FMessageInlineEmtpy
	}
	return nil
}

func (x *MessageLevel01) GetLevel01FMessageInlineIgnoreByRef() *MessageIgnoreByRef {
	if x != nil {
		return x.Level01FMessageInlineIgnoreByRef
	}
	return nil
}

func (x *MessageLevel01) GetLevel01FMessageInlineIgnoreFields() *MessageIgnoreFields {
	if x != nil {
		return x.Level01FMessageInlineIgnoreFields
	}
	return nil
}

func (m *MessageLevel01) GetLevel01OneOfIgnoreSelf1() isMessageLevel01_Level01OneOfIgnoreSelf1 {
	if m != nil {
		return m.Level01OneOfIgnoreSelf1
	}
	return nil
}

func (x *MessageLevel01) GetLevel01One4String1() string {
	if x, ok := x.GetLevel01OneOfIgnoreSelf1().(*MessageLevel01_Level01One4String1); ok {
		return x.Level01One4String1
	}
	return ""
}

func (x *MessageLevel01) GetLevel01One4Int32A() int32 {
	if x, ok := x.GetLevel01OneOfIgnoreSelf1().(*MessageLevel01_Level01One4Int32A); ok {
		return x.Level01One4Int32A
	}
	return 0
}

func (m *MessageLevel01) GetLevel01OneOfIgnoreParts1() isMessageLevel01_Level01OneOfIgnoreParts1 {
	if m != nil {
		return m.Level01OneOfIgnoreParts1
	}
	return nil
}

func (x *MessageLevel01) GetLevel01One5String1() string {
	if x, ok := x.GetLevel01OneOfIgnoreParts1().(*MessageLevel01_Level01One5String1); ok {
		return x.Level01One5String1
	}
	return ""
}

func (x *MessageLevel01) GetLevel01One5Int32A() int32 {
	if x, ok := x.GetLevel01OneOfIgnoreParts1().(*MessageLevel01_Level01One5Int32A); ok {
		return x.Level01One5Int32A
	}
	return 0
}

type isMessageLevel01_Level01OneOfExtern1 interface {
	isMessageLevel01_Level01OneOfExtern1()
}

type MessageLevel01_Level01One1String1 struct {
	Level01One1String1 string `protobuf:"bytes,101,opt,name=level01_one1_string1,json=level01One1String1,proto3,oneof"`
}

type MessageLevel01_Level01One1MessageInline02 struct {
	// Field message and inline.
	Level01One1MessageInline02 *MessageLevel02 `protobuf:"bytes,121,opt,name=level01_one1_message_inline02,json=level01One1MessageInline02,proto3,oneof"`
}

type MessageLevel01_Level01One1MessageInline03 struct {
	Level01One1MessageInline03 *MessageLevel03 `protobuf:"bytes,122,opt,name=level01_one1_message_inline03,json=level01One1MessageInline03,proto3,oneof"`
}

type MessageLevel01_Level01One1MessageInlineEmtpy struct {
	Level01One1MessageInlineEmtpy *MessageEmpty1 `protobuf:"bytes,143,opt,name=level01_one1_message_inline_emtpy,json=level01One1MessageInlineEmtpy,proto3,oneof"`
}

type MessageLevel01_Level01One1MessageInlineIgnoreByRef struct {
	Level01One1MessageInlineIgnoreByRef *MessageIgnoreByRef `protobuf:"bytes,144,opt,name=level01_one1_message_inline_ignore_by_ref,json=level01One1MessageInlineIgnoreByRef,proto3,oneof"`
}

type MessageLevel01_Level01One1MessageInlineIgnoreFields struct {
	Level01One1MessageInlineIgnoreFields *MessageIgnoreFields `protobuf:"bytes,145,opt,name=level01_one1_message_inline_ignore_fields,json=level01One1MessageInlineIgnoreFields,proto3,oneof"`
}

func (*MessageLevel01_Level01One1String1) isMessageLevel01_Level01OneOfExtern1() {}

func (*MessageLevel01_Level01One1MessageInline02) isMessageLevel01_Level01OneOfExtern1() {}

func (*MessageLevel01_Level01One1MessageInline03) isMessageLevel01_Level01OneOfExtern1() {}

func (*MessageLevel01_Level01One1MessageInlineEmtpy) isMessageLevel01_Level01OneOfExtern1() {}

func (*MessageLevel01_Level01One1MessageInlineIgnoreByRef) isMessageLevel01_Level01OneOfExtern1() {}

func (*MessageLevel01_Level01One1MessageInlineIgnoreFields) isMessageLevel01_Level01OneOfExtern1() {}

type isMessageLevel01_Level01OneOfInline1 interface {
	isMessageLevel01_Level01OneOfInline1()
}

type MessageLevel01_Level01One2String1 struct {
	Level01One2String1 string `protobuf:"bytes,201,opt,name=level01_one2_string1,json=level01One2String1,proto3,oneof"`
}

type MessageLevel01_Level01One2MessageExtern1 struct {
	// Field message and extern-line.
	Level01One2MessageExtern1 *pbexternal.Message1 `protobuf:"bytes,211,opt,name=level01_one2_message_extern1,json=level01One2MessageExtern1,proto3,oneof"`
}

type MessageLevel01_Level01One2MessageExtern2 struct {
	Level01One2MessageExtern2 *pbexternal.Message1 `protobuf:"bytes,212,opt,name=level01_one2_message_extern2,json=level01One2MessageExtern2,proto3,oneof"`
}

type MessageLevel01_Level01One2MessageInline04 struct {
	// Field message and inline.
	Level01One2MessageInline04 *MessageLevel04 `protobuf:"bytes,221,opt,name=level01_one2_message_inline04,json=level01One2MessageInline04,proto3,oneof"`
}

type MessageLevel01_Level01One2MessageInline05 struct {
	Level01One2MessageInline05 *MessageLevel05 `protobuf:"bytes,222,opt,name=level01_one2_message_inline05,json=level01One2MessageInline05,proto3,oneof"`
}

type MessageLevel01_Level01One2MessageInlineEmtpy struct {
	Level01One2MessageInlineEmtpy *MessageEmpty1 `protobuf:"bytes,243,opt,name=level01_one2_message_inline_emtpy,json=level01One2MessageInlineEmtpy,proto3,oneof"`
}

type MessageLevel01_Level01One2MessageInlineIgnoreByRef struct {
	Level01One2MessageInlineIgnoreByRef *MessageIgnoreByRef `protobuf:"bytes,244,opt,name=level01_one2_message_inline_ignore_by_ref,json=level01One2MessageInlineIgnoreByRef,proto3,oneof"`
}

type MessageLevel01_Level01One2MessageInlineIgnoreFields struct {
	Level01One2MessageInlineIgnoreFields *MessageIgnoreFields `protobuf:"bytes,245,opt,name=level01_one2_message_inline_ignore_fields,json=level01One2MessageInlineIgnoreFields,proto3,oneof"`
}

func (*MessageLevel01_Level01One2String1) isMessageLevel01_Level01OneOfInline1() {}

func (*MessageLevel01_Level01One2MessageExtern1) isMessageLevel01_Level01OneOfInline1() {}

func (*MessageLevel01_Level01One2MessageExtern2) isMessageLevel01_Level01OneOfInline1() {}

func (*MessageLevel01_Level01One2MessageInline04) isMessageLevel01_Level01OneOfInline1() {}

func (*MessageLevel01_Level01One2MessageInline05) isMessageLevel01_Level01OneOfInline1() {}

func (*MessageLevel01_Level01One2MessageInlineEmtpy) isMessageLevel01_Level01OneOfInline1() {}

func (*MessageLevel01_Level01One2MessageInlineIgnoreByRef) isMessageLevel01_Level01OneOfInline1() {}

func (*MessageLevel01_Level01One2MessageInlineIgnoreFields) isMessageLevel01_Level01OneOfInline1() {}

type isMessageLevel01_Level01OneOfOmitempty1 interface {
	isMessageLevel01_Level01OneOfOmitempty1()
}

type MessageLevel01_Level01One3String1 struct {
	Level01One3String1 string `protobuf:"bytes,301,opt,name=level01_one3_string1,json=level01One3String1,proto3,oneof"`
}

type MessageLevel01_Level01One3Int32A struct {
	Level01One3Int32A int32 `protobuf:"varint,302,opt,name=level01_one3_int32a,json=level01One3Int32a,proto3,oneof"`
}

func (*MessageLevel01_Level01One3String1) isMessageLevel01_Level01OneOfOmitempty1() {}

func (*MessageLevel01_Level01One3Int32A) isMessageLevel01_Level01OneOfOmitempty1() {}

type isMessageLevel01_Level01OneOfIgnoreSelf1 interface {
	isMessageLevel01_Level01OneOfIgnoreSelf1()
}

type MessageLevel01_Level01One4String1 struct {
	Level01One4String1 string `protobuf:"bytes,401,opt,name=level01_one4_string1,json=level01One4String1,proto3,oneof"`
}

type MessageLevel01_Level01One4Int32A struct {
	Level01One4Int32A int32 `protobuf:"varint,402,opt,name=level01_one4_int32a,json=level01One4Int32a,proto3,oneof"`
}

func (*MessageLevel01_Level01One4String1) isMessageLevel01_Level01OneOfIgnoreSelf1() {}

func (*MessageLevel01_Level01One4Int32A) isMessageLevel01_Level01OneOfIgnoreSelf1() {}

type isMessageLevel01_Level01OneOfIgnoreParts1 interface {
	isMessageLevel01_Level01OneOfIgnoreParts1()
}

type MessageLevel01_Level01One5String1 struct {
	Level01One5String1 string `protobuf:"bytes,501,opt,name=level01_one5_string1,json=level01One5String1,proto3,oneof"`
}

type MessageLevel01_Level01One5Int32A struct {
	Level01One5Int32A int32 `protobuf:"varint,502,opt,name=level01_one5_int32a,json=level01One5Int32a,proto3,oneof"`
}

func (*MessageLevel01_Level01One5String1) isMessageLevel01_Level01OneOfIgnoreParts1() {}

func (*MessageLevel01_Level01One5Int32A) isMessageLevel01_Level01OneOfIgnoreParts1() {}

var File_tests_proto_cases_inline_inline_message01_proto protoreflect.FileDescriptor

var file_tests_proto_cases_inline_inline_message01_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x69, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x30, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x1a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61, 0x73, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x2f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x30,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x2f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x30, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x2f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x30, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x2f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x30, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x1c, 0x0a, 0x0e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x12, 0x45, 0x0a,
	0x11, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x8a, 0xa2, 0x1f, 0x15, 0x0a, 0x13,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x63, 0x5f, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x31, 0x52, 0x0f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x46, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x31, 0x12, 0x30, 0x0a, 0x11, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f,
	0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x0f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x46, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x4a, 0x0a, 0x11, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30,
	0x31, 0x5f, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x19, 0x8a, 0xa2, 0x1f, 0x15, 0x0a, 0x13, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31,
	0x5f, 0x63, 0x5f, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x48, 0x05, 0x52, 0x0f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x50, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x11, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x70, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x8a,
	0xa2, 0x1f, 0x00, 0x48, 0x06, 0x52, 0x0f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x50, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x11, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x30, 0x31, 0x5f, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x19, 0x8a, 0xa2, 0x1f, 0x15, 0x0a, 0x13, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x30, 0x31, 0x5f, 0x63, 0x5f, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x52,
	0x0f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x52, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31,
	0x12, 0x30, 0x0a, 0x11, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x72, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x42, 0x04, 0x8a, 0xa2, 0x1f,
	0x00, 0x52, 0x0f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x52, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x32, 0x12, 0x72, 0x0a, 0x11, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x6d, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x30, 0x31, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x4d, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x19, 0x8a, 0xa2, 0x1f, 0x15,
	0x0a, 0x13, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x63, 0x5f, 0x6d, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x31, 0x52, 0x0f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x4d, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x5d, 0x0a, 0x11, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30,
	0x31, 0x5f, 0x6d, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x20, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x30,
	0x31, 0x4d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04,
	0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x0f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x4d, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x55, 0x0a, 0x19, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31,
	0x5f, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x31, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x42, 0x06, 0x8a, 0xa2,
	0x1f, 0x02, 0x20, 0x00, 0x52, 0x16, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x46, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x31, 0x12, 0x55, 0x0a, 0x19,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x32, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x31, 0x42, 0x06, 0x8a, 0xa2, 0x1f, 0x02, 0x20, 0x00, 0x52, 0x16, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x30, 0x31, 0x46, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x32, 0x12, 0x5b, 0x0a, 0x1a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x66,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x30,
	0x32, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x32, 0x42,
	0x06, 0x8a, 0xa2, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x17, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31,
	0x46, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x30, 0x32,
	0x12, 0x5b, 0x0a, 0x1a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x66, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x30, 0x33, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x33, 0x42, 0x06, 0x8a, 0xa2,
	0x1f, 0x02, 0x20, 0x01, 0x52, 0x17, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x46, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x30, 0x33, 0x12, 0x50, 0x0a,
	0x14, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x8a, 0xa2, 0x1f,
	0x18, 0x0a, 0x16, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x63, 0x5f, 0x6f, 0x6e, 0x65,
	0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x48, 0x00, 0x52, 0x12, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x30, 0x31, 0x4f, 0x6e, 0x65, 0x31, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12,
	0x63, 0x0a, 0x1d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x6f, 0x6e, 0x65, 0x31, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x30, 0x32,
	0x18, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x32, 0x42, 0x06,
	0x8a, 0xa2, 0x1f, 0x02, 0x20, 0x01, 0x48, 0x00, 0x52, 0x1a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30,
	0x31, 0x4f, 0x6e, 0x65, 0x31, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x30, 0x32, 0x12, 0x63, 0x0a, 0x1d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f,
	0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x30, 0x33, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x30, 0x33, 0x42, 0x06, 0x8a, 0xa2, 0x1f, 0x02, 0x20, 0x01, 0x48, 0x00, 0x52, 0x1a, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x4f, 0x6e, 0x65, 0x31, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x30, 0x33, 0x12, 0x6a, 0x0a, 0x21, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x30, 0x31, 0x5f, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x6d, 0x74, 0x70, 0x79, 0x18, 0x8f,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x31, 0x42, 0x06, 0x8a, 0xa2,
	0x1f, 0x02, 0x20, 0x01, 0x48, 0x00, 0x52, 0x1d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x4f,
	0x6e, 0x65, 0x31, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x45, 0x6d, 0x74, 0x70, 0x79, 0x12, 0x7f, 0x0a, 0x29, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31,
	0x5f, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x42, 0x79, 0x52, 0x65, 0x66, 0x42, 0x08, 0x8a, 0xa2, 0x1f, 0x04, 0x10, 0x01, 0x20, 0x01, 0x48,
	0x00, 0x52, 0x23, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x4f, 0x6e, 0x65, 0x31, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x42, 0x79, 0x52, 0x65, 0x66, 0x12, 0x7f, 0x0a, 0x29, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30,
	0x31, 0x5f, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x06, 0x8a, 0xa2, 0x1f, 0x02, 0x20, 0x01, 0x48,
	0x00, 0x52, 0x24, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x4f, 0x6e, 0x65, 0x31, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x51, 0x0a, 0x14, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x30, 0x31, 0x5f, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18,
	0xc9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x8a, 0xa2, 0x1f, 0x18, 0x0a, 0x16, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x63, 0x5f, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x31, 0x48, 0x01, 0x52, 0x12, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x4f,
	0x6e, 0x65, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x5e, 0x0a, 0x1c, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x31, 0x18, 0xd3, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x31, 0x42, 0x06, 0x8a, 0xa2, 0x1f, 0x02, 0x20, 0x00, 0x48, 0x01, 0x52,
	0x19, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x4f, 0x6e, 0x65, 0x32, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x31, 0x12, 0x5e, 0x0a, 0x1c, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x32, 0x18, 0xd4, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x31, 0x42, 0x06, 0x8a, 0xa2, 0x1f, 0x02, 0x20, 0x00, 0x48, 0x01, 0x52,
	0x19, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x4f, 0x6e, 0x65, 0x32, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x32, 0x12, 0x64, 0x0a, 0x1d, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x30, 0x34, 0x18, 0xdd, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x34, 0x42, 0x06, 0x8a, 0xa2, 0x1f, 0x02,
	0x20, 0x01, 0x48, 0x01, 0x52, 0x1a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x4f, 0x6e, 0x65,
	0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x30, 0x34,
	0x12, 0x64, 0x0a, 0x1d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x6f, 0x6e, 0x65, 0x32,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x30,
	0x35, 0x18, 0xde, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x35,
	0x42, 0x06, 0x8a, 0xa2, 0x1f, 0x02, 0x20, 0x01, 0x48, 0x01, 0x52, 0x1a, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x30, 0x31, 0x4f, 0x6e, 0x65, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x30, 0x35, 0x12, 0x6a, 0x0a, 0x21, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30,
	0x31, 0x5f, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x6d, 0x74, 0x70, 0x79, 0x18, 0xf3, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x31, 0x42, 0x06, 0x8a, 0xa2, 0x1f, 0x02, 0x20,
	0x01, 0x48, 0x01, 0x52, 0x1d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x4f, 0x6e, 0x65, 0x32,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6d, 0x74,
	0x70, 0x79, 0x12, 0x7f, 0x0a, 0x29, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x6f, 0x6e,
	0x65, 0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0xf4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x52,
	0x65, 0x66, 0x42, 0x08, 0x8a, 0xa2, 0x1f, 0x04, 0x10, 0x01, 0x20, 0x01, 0x48, 0x01, 0x52, 0x23,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x4f, 0x6e, 0x65, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x42, 0x79,
	0x52, 0x65, 0x66, 0x12, 0x7f, 0x0a, 0x29, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x6f,
	0x6e, 0x65, 0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0xf5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x42, 0x06, 0x8a, 0xa2, 0x1f, 0x02, 0x20, 0x01, 0x48, 0x01, 0x52, 0x24,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x4f, 0x6e, 0x65, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x14, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f,
	0x6f, 0x6e, 0x65, 0x33, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0xad, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0x8a, 0xa2, 0x1f, 0x02, 0x18, 0x01, 0x48, 0x02, 0x52, 0x12, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x4f, 0x6e, 0x65, 0x33, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x31, 0x12, 0x39, 0x0a, 0x13, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x6f, 0x6e, 0x65,
	0x33, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x61, 0x18, 0xae, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x06, 0x8a, 0xa2, 0x1f, 0x02, 0x18, 0x01, 0x48, 0x02, 0x52, 0x11, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x30, 0x31, 0x4f, 0x6e, 0x65, 0x33, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x61, 0x12, 0x61, 0x0a, 0x1e,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x6d, 0x74, 0x70, 0x79, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x31, 0x42, 0x06, 0x8a, 0xa2, 0x1f,
	0x02, 0x20, 0x01, 0x52, 0x1a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x46, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6d, 0x74, 0x70, 0x79, 0x12,
	0x76, 0x0a, 0x26, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x66, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x52, 0x65, 0x66, 0x42, 0x08, 0x8a, 0xa2, 0x1f,
	0x04, 0x10, 0x01, 0x20, 0x01, 0x52, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x46, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x42, 0x79, 0x52, 0x65, 0x66, 0x12, 0x76, 0x0a, 0x26, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x30, 0x31, 0x5f, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x42, 0x06, 0x8a, 0xa2, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x21, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x30, 0x31, 0x46, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x39, 0x0a, 0x14, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x6f, 0x6e, 0x65, 0x34, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x91, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0x8a, 0xa2, 0x1f, 0x00, 0x48, 0x03, 0x52, 0x12, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x4f,
	0x6e, 0x65, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x37, 0x0a, 0x13, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x6f, 0x6e, 0x65, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x61, 0x18, 0x92, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x48, 0x03,
	0x52, 0x11, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x4f, 0x6e, 0x65, 0x34, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x61, 0x12, 0x3b, 0x0a, 0x14, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x6f,
	0x6e, 0x65, 0x35, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0xf5, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0x8a, 0xa2, 0x1f, 0x02, 0x10, 0x01, 0x48, 0x04, 0x52, 0x12, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x30, 0x31, 0x4f, 0x6e, 0x65, 0x35, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31,
	0x12, 0x39, 0x0a, 0x13, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x6f, 0x6e, 0x65, 0x35,
	0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x61, 0x18, 0xf6, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06,
	0x8a, 0xa2, 0x1f, 0x02, 0x10, 0x01, 0x48, 0x04, 0x52, 0x11, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30,
	0x31, 0x4f, 0x6e, 0x65, 0x35, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x61, 0x1a, 0x42, 0x0a, 0x14, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x4d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x42, 0x0a, 0x14, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x4d, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x33, 0x0a, 0x13, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x4f, 0x6e,
	0x65, 0x4f, 0x66, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x31, 0x12, 0x1c, 0x92, 0xa2, 0x1f, 0x18,
	0x0a, 0x14, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x31, 0x20, 0x00, 0x42, 0x33, 0x0a, 0x13, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x30, 0x31, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x31, 0x12,
	0x1c, 0x92, 0xa2, 0x1f, 0x18, 0x0a, 0x14, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x6f,
	0x6e, 0x65, 0x32, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x31, 0x20, 0x01, 0x42, 0x39, 0x0a,
	0x16, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x4f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x31, 0x12, 0x1f, 0x92, 0xa2, 0x1f, 0x1b, 0x0a, 0x17, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x6f, 0x6e, 0x65, 0x33, 0x5f, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x31, 0x20, 0x01, 0x42, 0x3e, 0x0a, 0x17, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x30, 0x31, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x53, 0x65,
	0x6c, 0x66, 0x31, 0x12, 0x23, 0x92, 0xa2, 0x1f, 0x1f, 0x0a, 0x19, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x30, 0x31, 0x5f, 0x6f, 0x6e, 0x65, 0x34, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x73,
	0x65, 0x6c, 0x66, 0x31, 0x10, 0x01, 0x20, 0x01, 0x42, 0x3e, 0x0a, 0x18, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x30, 0x31, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x73, 0x31, 0x12, 0x22, 0x92, 0xa2, 0x1f, 0x1e, 0x0a, 0x1a, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x30, 0x31, 0x5f, 0x6f, 0x6e, 0x65, 0x35, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x73, 0x31, 0x20, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x30, 0x31, 0x5f, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x31, 0x5f, 0x70, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x32, 0x42, 0x17, 0x5a, 0x15, 0x78, 0x67, 0x6f, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x62, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tests_proto_cases_inline_inline_message01_proto_rawDescOnce sync.Once
	file_tests_proto_cases_inline_inline_message01_proto_rawDescData = file_tests_proto_cases_inline_inline_message01_proto_rawDesc
)

func file_tests_proto_cases_inline_inline_message01_proto_rawDescGZIP() []byte {
	file_tests_proto_cases_inline_inline_message01_proto_rawDescOnce.Do(func() {
		file_tests_proto_cases_inline_inline_message01_proto_rawDescData = protoimpl.X.CompressGZIP(file_tests_proto_cases_inline_inline_message01_proto_rawDescData)
	})
	return file_tests_proto_cases_inline_inline_message01_proto_rawDescData
}

var file_tests_proto_cases_inline_inline_message01_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_tests_proto_cases_inline_inline_message01_proto_goTypes = []interface{}{
	(*MessageLevel01)(nil),      // 0: inline.MessageLevel01
	nil,                         // 1: inline.MessageLevel01.Level01MString1Entry
	nil,                         // 2: inline.MessageLevel01.Level01MString2Entry
	(*pbexternal.Message1)(nil), // 3: external.Message1
	(*MessageLevel02)(nil),      // 4: inline.MessageLevel02
	(*MessageLevel03)(nil),      // 5: inline.MessageLevel03
	(*MessageEmpty1)(nil),       // 6: inline.MessageEmpty1
	(*MessageIgnoreByRef)(nil),  // 7: inline.MessageIgnoreByRef
	(*MessageIgnoreFields)(nil), // 8: inline.MessageIgnoreFields
	(*MessageLevel04)(nil),      // 9: inline.MessageLevel04
	(*MessageLevel05)(nil),      // 10: inline.MessageLevel05
}
var file_tests_proto_cases_inline_inline_message01_proto_depIdxs = []int32{
	1,  // 0: inline.MessageLevel01.level01_m_string1:type_name -> inline.MessageLevel01.Level01MString1Entry
	2,  // 1: inline.MessageLevel01.level01_m_string2:type_name -> inline.MessageLevel01.Level01MString2Entry
	3,  // 2: inline.MessageLevel01.level01_f_message_extern1:type_name -> external.Message1
	3,  // 3: inline.MessageLevel01.level01_f_message_extern2:type_name -> external.Message1
	4,  // 4: inline.MessageLevel01.level01_f_message_inline02:type_name -> inline.MessageLevel02
	5,  // 5: inline.MessageLevel01.level01_f_message_inline03:type_name -> inline.MessageLevel03
	4,  // 6: inline.MessageLevel01.level01_one1_message_inline02:type_name -> inline.MessageLevel02
	5,  // 7: inline.MessageLevel01.level01_one1_message_inline03:type_name -> inline.MessageLevel03
	6,  // 8: inline.MessageLevel01.level01_one1_message_inline_emtpy:type_name -> inline.MessageEmpty1
	7,  // 9: inline.MessageLevel01.level01_one1_message_inline_ignore_by_ref:type_name -> inline.MessageIgnoreByRef
	8,  // 10: inline.MessageLevel01.level01_one1_message_inline_ignore_fields:type_name -> inline.MessageIgnoreFields
	3,  // 11: inline.MessageLevel01.level01_one2_message_extern1:type_name -> external.Message1
	3,  // 12: inline.MessageLevel01.level01_one2_message_extern2:type_name -> external.Message1
	9,  // 13: inline.MessageLevel01.level01_one2_message_inline04:type_name -> inline.MessageLevel04
	10, // 14: inline.MessageLevel01.level01_one2_message_inline05:type_name -> inline.MessageLevel05
	6,  // 15: inline.MessageLevel01.level01_one2_message_inline_emtpy:type_name -> inline.MessageEmpty1
	7,  // 16: inline.MessageLevel01.level01_one2_message_inline_ignore_by_ref:type_name -> inline.MessageIgnoreByRef
	8,  // 17: inline.MessageLevel01.level01_one2_message_inline_ignore_fields:type_name -> inline.MessageIgnoreFields
	6,  // 18: inline.MessageLevel01.level01_f_message_inline_emtpy:type_name -> inline.MessageEmpty1
	7,  // 19: inline.MessageLevel01.level01_f_message_inline_ignore_by_ref:type_name -> inline.MessageIgnoreByRef
	8,  // 20: inline.MessageLevel01.level01_f_message_inline_ignore_fields:type_name -> inline.MessageIgnoreFields
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_tests_proto_cases_inline_inline_message01_proto_init() }
func file_tests_proto_cases_inline_inline_message01_proto_init() {
	if File_tests_proto_cases_inline_inline_message01_proto != nil {
		return
	}
	file_tests_proto_cases_inline_private_proto_init()
	file_tests_proto_cases_inline_inline_message02_proto_init()
	file_tests_proto_cases_inline_inline_message03_proto_init()
	file_tests_proto_cases_inline_inline_message04_proto_init()
	file_tests_proto_cases_inline_inline_message05_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tests_proto_cases_inline_inline_message01_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageLevel01); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tests_proto_cases_inline_inline_message01_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*MessageLevel01_Level01One1String1)(nil),
		(*MessageLevel01_Level01One1MessageInline02)(nil),
		(*MessageLevel01_Level01One1MessageInline03)(nil),
		(*MessageLevel01_Level01One1MessageInlineEmtpy)(nil),
		(*MessageLevel01_Level01One1MessageInlineIgnoreByRef)(nil),
		(*MessageLevel01_Level01One1MessageInlineIgnoreFields)(nil),
		(*MessageLevel01_Level01One2String1)(nil),
		(*MessageLevel01_Level01One2MessageExtern1)(nil),
		(*MessageLevel01_Level01One2MessageExtern2)(nil),
		(*MessageLevel01_Level01One2MessageInline04)(nil),
		(*MessageLevel01_Level01One2MessageInline05)(nil),
		(*MessageLevel01_Level01One2MessageInlineEmtpy)(nil),
		(*MessageLevel01_Level01One2MessageInlineIgnoreByRef)(nil),
		(*MessageLevel01_Level01One2MessageInlineIgnoreFields)(nil),
		(*MessageLevel01_Level01One3String1)(nil),
		(*MessageLevel01_Level01One3Int32A)(nil),
		(*MessageLevel01_Level01One4String1)(nil),
		(*MessageLevel01_Level01One4Int32A)(nil),
		(*MessageLevel01_Level01One5String1)(nil),
		(*MessageLevel01_Level01One5Int32A)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tests_proto_cases_inline_inline_message01_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tests_proto_cases_inline_inline_message01_proto_goTypes,
		DependencyIndexes: file_tests_proto_cases_inline_inline_message01_proto_depIdxs,
		MessageInfos:      file_tests_proto_cases_inline_inline_message01_proto_msgTypes,
	}.Build()
	File_tests_proto_cases_inline_inline_message01_proto = out.File
	file_tests_proto_cases_inline_inline_message01_proto_rawDesc = nil
	file_tests_proto_cases_inline_inline_message01_proto_goTypes = nil
	file_tests_proto_cases_inline_inline_message01_proto_depIdxs = nil
}
