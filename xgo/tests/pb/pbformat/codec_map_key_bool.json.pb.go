// Code generated by protoc-gen-gojson. DO NOT EDIT.
// versions:
// 		protoc-gen-gojson 0.0.1
// source: tests/proto/cases/format/codec_map_key_bool.proto

package pbformat

import (
	errors "errors"
	_ "github.com/yu31/protoc-plugin-json/xgo/pb/pbjson"
	jsondecoder "github.com/yu31/protoc-plugin-json/xgo/pkg/jsondecoder"
	jsonencoder "github.com/yu31/protoc-plugin-json/xgo/pkg/jsonencoder"
	_ "github.com/yu31/protoc-plugin-json/xgo/tests/pb/pbexternal"
	_ "google.golang.org/protobuf/types/known/anypb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
)

// MarshalJSON implements interface json.Marshaler for proto message CodecMapKeyBool in file tests/proto/cases/format/codec_map_key_bool.proto
func (x *CodecMapKeyBool) MarshalJSON() ([]byte, error) {
	if x == nil {
		return []byte("null"), nil
	}
	enc := jsonencoder.New(44784)
	enc.AppendObjectBegin() // Add begin JSON identifier

	jsonencoder.AppendMapBoolI32(enc, "f_int32_key_unset_val_unset", x.FInt32KeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapBoolI32(enc, "f_int32_key_bool_val_numeric", x.FInt32KeyBoolValNumeric, false, false, false)
	jsonencoder.AppendMapBoolI32(enc, "f_int32_key_bool_val_string", x.FInt32KeyBoolValString, false, false, true)
	jsonencoder.AppendMapBoolI32(enc, "f_int32_key_string_val_numeric", x.FInt32KeyStringValNumeric, false, true, false)
	jsonencoder.AppendMapBoolI32(enc, "f_int32_key_string_val_string", x.FInt32KeyStringValString, false, true, true)
	jsonencoder.AppendMapBoolI64(enc, "f_int64_key_unset_val_unset", x.FInt64KeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapBoolI64(enc, "f_int64_key_bool_val_numeric", x.FInt64KeyBoolValNumeric, false, false, false)
	jsonencoder.AppendMapBoolI64(enc, "f_int64_key_bool_val_string", x.FInt64KeyBoolValString, false, false, true)
	jsonencoder.AppendMapBoolI64(enc, "f_int64_key_string_val_numeric", x.FInt64KeyStringValNumeric, false, true, false)
	jsonencoder.AppendMapBoolI64(enc, "f_int64_key_string_val_string", x.FInt64KeyStringValString, false, true, true)
	jsonencoder.AppendMapBoolU32(enc, "f_uint32_key_unset_val_unset", x.FUint32KeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapBoolU32(enc, "f_uint32_key_bool_val_numeric", x.FUint32KeyBoolValNumeric, false, false, false)
	jsonencoder.AppendMapBoolU32(enc, "f_uint32_key_bool_val_string", x.FUint32KeyBoolValString, false, false, true)
	jsonencoder.AppendMapBoolU32(enc, "f_uint32_key_string_val_numeric", x.FUint32KeyStringValNumeric, false, true, false)
	jsonencoder.AppendMapBoolU32(enc, "f_uint32_key_string_val_string", x.FUint32KeyStringValString, false, true, true)
	jsonencoder.AppendMapBoolU64(enc, "f_uint64_key_unset_val_unset", x.FUint64KeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapBoolU64(enc, "f_uint64_key_bool_val_numeric", x.FUint64KeyBoolValNumeric, false, false, false)
	jsonencoder.AppendMapBoolU64(enc, "f_uint64_key_bool_val_string", x.FUint64KeyBoolValString, false, false, true)
	jsonencoder.AppendMapBoolU64(enc, "f_uint64_key_string_val_numeric", x.FUint64KeyStringValNumeric, false, true, false)
	jsonencoder.AppendMapBoolU64(enc, "f_uint64_key_string_val_string", x.FUint64KeyStringValString, false, true, true)
	jsonencoder.AppendMapBoolI32(enc, "f_sint32_key_unset_val_unset", x.FSint32KeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapBoolI32(enc, "f_sint32_key_bool_val_numeric", x.FSint32KeyBoolValNumeric, false, false, false)
	jsonencoder.AppendMapBoolI32(enc, "f_sint32_key_bool_val_string", x.FSint32KeyBoolValString, false, false, true)
	jsonencoder.AppendMapBoolI32(enc, "f_sint32_key_string_val_numeric", x.FSint32KeyStringValNumeric, false, true, false)
	jsonencoder.AppendMapBoolI32(enc, "f_sint32_key_string_val_string", x.FSint32KeyStringValString, false, true, true)
	jsonencoder.AppendMapBoolI64(enc, "f_sint64_key_unset_val_unset", x.FSint64KeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapBoolI64(enc, "f_sint64_key_bool_val_numeric", x.FSint64KeyBoolValNumeric, false, false, false)
	jsonencoder.AppendMapBoolI64(enc, "f_sint64_key_bool_val_string", x.FSint64KeyBoolValString, false, false, true)
	jsonencoder.AppendMapBoolI64(enc, "f_sint64_key_string_val_numeric", x.FSint64KeyStringValNumeric, false, true, false)
	jsonencoder.AppendMapBoolI64(enc, "f_sint64_key_string_val_string", x.FSint64KeyStringValString, false, true, true)
	jsonencoder.AppendMapBoolI32(enc, "f_sfixed32_key_unset_val_unset", x.FSfixed32KeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapBoolI32(enc, "f_sfixed32_key_bool_val_numeric", x.FSfixed32KeyBoolValNumeric, false, false, false)
	jsonencoder.AppendMapBoolI32(enc, "f_sfixed32_key_bool_val_string", x.FSfixed32KeyBoolValString, false, false, true)
	jsonencoder.AppendMapBoolI32(enc, "f_sfixed32_key_string_val_numeric", x.FSfixed32KeyStringValNumeric, false, true, false)
	jsonencoder.AppendMapBoolI32(enc, "f_sfixed32_key_string_val_string", x.FSfixed32KeyStringValString, false, true, true)
	jsonencoder.AppendMapBoolI64(enc, "f_sfixed64_key_unset_val_unset", x.FSfixed64KeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapBoolI64(enc, "f_sfixed64_key_bool_val_numeric", x.FSfixed64KeyBoolValNumeric, false, false, false)
	jsonencoder.AppendMapBoolI64(enc, "f_sfixed64_key_bool_val_string", x.FSfixed64KeyBoolValString, false, false, true)
	jsonencoder.AppendMapBoolI64(enc, "f_sfixed64_key_string_val_numeric", x.FSfixed64KeyStringValNumeric, false, true, false)
	jsonencoder.AppendMapBoolI64(enc, "f_sfixed64_key_string_val_string", x.FSfixed64KeyStringValString, false, true, true)
	jsonencoder.AppendMapBoolU32(enc, "f_fixed32_key_unset_val_unset", x.FFixed32KeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapBoolU32(enc, "f_fixed32_key_bool_val_numeric", x.FFixed32KeyBoolValNumeric, false, false, false)
	jsonencoder.AppendMapBoolU32(enc, "f_fixed32_key_bool_val_string", x.FFixed32KeyBoolValString, false, false, true)
	jsonencoder.AppendMapBoolU32(enc, "f_fixed32_key_string_val_numeric", x.FFixed32KeyStringValNumeric, false, true, false)
	jsonencoder.AppendMapBoolU32(enc, "f_fixed32_key_string_val_string", x.FFixed32KeyStringValString, false, true, true)
	jsonencoder.AppendMapBoolU64(enc, "f_fixed64_key_unset_val_unset", x.FFixed64KeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapBoolU64(enc, "f_fixed64_key_bool_val_numeric", x.FFixed64KeyBoolValNumeric, false, false, false)
	jsonencoder.AppendMapBoolU64(enc, "f_fixed64_key_bool_val_string", x.FFixed64KeyBoolValString, false, false, true)
	jsonencoder.AppendMapBoolU64(enc, "f_fixed64_key_string_val_numeric", x.FFixed64KeyStringValNumeric, false, true, false)
	jsonencoder.AppendMapBoolU64(enc, "f_fixed64_key_string_val_string", x.FFixed64KeyStringValString, false, true, true)
	jsonencoder.AppendMapBoolF32(enc, "f_float_key_unset_val_unset", x.FFloatKeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapBoolF32(enc, "f_float_key_bool_val_numeric", x.FFloatKeyBoolValNumeric, false, false, false)
	jsonencoder.AppendMapBoolF32(enc, "f_float_key_bool_val_string", x.FFloatKeyBoolValString, false, false, true)
	jsonencoder.AppendMapBoolF32(enc, "f_float_key_string_val_numeric", x.FFloatKeyStringValNumeric, false, true, false)
	jsonencoder.AppendMapBoolF32(enc, "f_float_key_string_val_string", x.FFloatKeyStringValString, false, true, true)
	jsonencoder.AppendMapBoolF64(enc, "f_double_key_unset_val_unset", x.FDoubleKeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapBoolF64(enc, "f_double_key_bool_val_numeric", x.FDoubleKeyBoolValNumeric, false, false, false)
	jsonencoder.AppendMapBoolF64(enc, "f_double_key_bool_val_string", x.FDoubleKeyBoolValString, false, false, true)
	jsonencoder.AppendMapBoolF64(enc, "f_double_key_string_val_numeric", x.FDoubleKeyStringValNumeric, false, true, false)
	jsonencoder.AppendMapBoolF64(enc, "f_double_key_string_val_string", x.FDoubleKeyStringValString, false, true, true)
	jsonencoder.AppendMapBoolBool(enc, "f_bool_key_unset_val_unset", x.FBoolKeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapBoolBool(enc, "f_bool_key_bool_val_bool", x.FBoolKeyBoolValBool, false, false, false)
	jsonencoder.AppendMapBoolBool(enc, "f_bool_key_bool_val_string", x.FBoolKeyBoolValString, false, false, true)
	jsonencoder.AppendMapBoolBool(enc, "f_bool_key_string_val_bool", x.FBoolKeyStringValBool, false, true, false)
	jsonencoder.AppendMapBoolBool(enc, "f_bool_key_string_val_string", x.FBoolKeyStringValString, false, true, true)
	jsonencoder.AppendMapBoolStr(enc, "f_string_key_unset_val_none", x.FStringKeyUnsetValNone, false, true)
	jsonencoder.AppendMapBoolStr(enc, "f_string_key_bool_val_none", x.FStringKeyBoolValNone, false, false)
	jsonencoder.AppendMapBoolStr(enc, "f_string_key_string_val_none", x.FStringKeyStringValNone, false, true)
	if err := jsonencoder.AppendMapBoolBytes(enc, "f_bytes_key_unset_val_none", x.FBytesKeyUnsetValNone, false, true); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapBoolBytes(enc, "f_bytes_key_bool_val_none", x.FBytesKeyBoolValNone, false, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapBoolBytes(enc, "f_bytes_key_string_val_none", x.FBytesKeyStringValNone, false, true); err != nil {
		return nil, err
	}
	jsonencoder.AppendMapBoolEnumNum(enc, "f_enum_key_unset_val_unset", x.FEnumKeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapBoolEnumNum(enc, "f_enum_key_bool_val_numeric", x.FEnumKeyBoolValNumeric, false, false, false)
	jsonencoder.AppendMapBoolEnumNum(enc, "f_enum_key_bool_val_numeric_string", x.FEnumKeyBoolValNumericString, false, false, true)
	jsonencoder.AppendMapBoolEnumStr(enc, "f_enum_key_bool_val_enum_string", x.FEnumKeyBoolValEnumString, false, false)
	jsonencoder.AppendMapBoolEnumNum(enc, "f_enum_key_string_val_numeric", x.FEnumKeyStringValNumeric, false, true, false)
	jsonencoder.AppendMapBoolEnumNum(enc, "f_enum_key_string_val_numeric_string", x.FEnumKeyStringValNumericString, false, true, true)
	jsonencoder.AppendMapBoolEnumStr(enc, "f_enum_key_string_val_enum_string", x.FEnumKeyStringValEnumString, false, true)
	if err := jsonencoder.AppendMapBoolMessage(enc, "f_message_key_unset_val_none", x.FMessageKeyUnsetValNone, false, true); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapBoolMessage(enc, "f_message_key_bool_val_none", x.FMessageKeyBoolValNone, false, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapBoolMessage(enc, "f_message_key_string_val_none", x.FMessageKeyStringValNone, false, true); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapBoolWKTDurObject(enc, "f_duration_key_unset_val_unset", x.FDurationKeyUnsetValUnset, false, true); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapBoolWKTDurObject(enc, "f_duration_key_bool_val_object", x.FDurationKeyBoolValObject, false, false); err != nil {
		return nil, err
	}
	jsonencoder.AppendMapBoolWKTDurTimeStr(enc, "f_duration_key_bool_val_time_string", x.FDurationKeyBoolValTimeString, false, false)
	jsonencoder.AppendMapBoolWKTDurNano(enc, "f_duration_key_bool_val_nanosecond", x.FDurationKeyBoolValNanosecond, false, false, false)
	jsonencoder.AppendMapBoolWKTDurNano(enc, "f_duration_key_bool_val_nanosecond_string", x.FDurationKeyBoolValNanosecondString, false, false, true)
	jsonencoder.AppendMapBoolWKTDurMicro(enc, "f_duration_key_bool_val_microsecond", x.FDurationKeyBoolValMicrosecond, false, false, false)
	jsonencoder.AppendMapBoolWKTDurMicro(enc, "f_duration_key_bool_val_microsecond_string", x.FDurationKeyBoolValMicrosecondString, false, false, true)
	jsonencoder.AppendMapBoolWKTDurMilli(enc, "f_duration_key_bool_val_millisecond", x.FDurationKeyBoolValMillisecond, false, false, false)
	jsonencoder.AppendMapBoolWKTDurMilli(enc, "f_duration_key_bool_val_millisecond_string", x.FDurationKeyBoolValMillisecondString, false, false, true)
	jsonencoder.AppendMapBoolWKTDurSecond(enc, "f_duration_key_bool_val_second", x.FDurationKeyBoolValSecond, false, false, false)
	jsonencoder.AppendMapBoolWKTDurSecond(enc, "f_duration_key_bool_val_second_string", x.FDurationKeyBoolValSecondString, false, false, true)
	jsonencoder.AppendMapBoolWKTDurMinute(enc, "f_duration_key_bool_val_minute", x.FDurationKeyBoolValMinute, false, false, false)
	jsonencoder.AppendMapBoolWKTDurMinute(enc, "f_duration_key_bool_val_minute_string", x.FDurationKeyBoolValMinuteString, false, false, true)
	jsonencoder.AppendMapBoolWKTDurHour(enc, "f_duration_key_bool_val_hour", x.FDurationKeyBoolValHour, false, false, false)
	jsonencoder.AppendMapBoolWKTDurHour(enc, "f_duration_key_bool_val_hour_string", x.FDurationKeyBoolValHourString, false, false, true)
	if err := jsonencoder.AppendMapBoolWKTDurObject(enc, "f_duration_key_string_val_unset", x.FDurationKeyStringValUnset, false, true); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapBoolWKTDurObject(enc, "f_duration_key_string_val_object", x.FDurationKeyStringValObject, false, true); err != nil {
		return nil, err
	}
	jsonencoder.AppendMapBoolWKTDurTimeStr(enc, "f_duration_key_string_val_time_string", x.FDurationKeyStringValTimeString, false, true)
	jsonencoder.AppendMapBoolWKTDurNano(enc, "f_duration_key_string_val_nanosecond", x.FDurationKeyStringValNanosecond, false, true, false)
	jsonencoder.AppendMapBoolWKTDurNano(enc, "f_duration_key_string_val_nanosecond_string", x.FDurationKeyStringValNanosecondString, false, true, true)
	jsonencoder.AppendMapBoolWKTDurMicro(enc, "f_duration_key_string_val_microsecond", x.FDurationKeyStringValMicrosecond, false, true, false)
	jsonencoder.AppendMapBoolWKTDurMicro(enc, "f_duration_key_string_val_microsecond_string", x.FDurationKeyStringValMicrosecondString, false, true, true)
	jsonencoder.AppendMapBoolWKTDurMilli(enc, "f_duration_key_string_val_millisecond", x.FDurationKeyStringValMillisecond, false, true, false)
	jsonencoder.AppendMapBoolWKTDurMilli(enc, "f_duration_key_string_val_millisecond_string", x.FDurationKeyStringValMillisecondString, false, true, true)
	jsonencoder.AppendMapBoolWKTDurSecond(enc, "f_duration_key_string_val_second", x.FDurationKeyStringValSecond, false, true, false)
	jsonencoder.AppendMapBoolWKTDurSecond(enc, "f_duration_key_string_val_second_string", x.FDurationKeyStringValSecondString, false, true, true)
	jsonencoder.AppendMapBoolWKTDurMinute(enc, "f_duration_key_string_val_minute", x.FDurationKeyStringValMinute, false, true, false)
	jsonencoder.AppendMapBoolWKTDurMinute(enc, "f_duration_key_string_val_minute_string", x.FDurationKeyStringValMinuteString, false, true, true)
	jsonencoder.AppendMapBoolWKTDurHour(enc, "f_duration_key_string_val_hour", x.FDurationKeyStringValHour, false, true, false)
	jsonencoder.AppendMapBoolWKTDurHour(enc, "f_duration_key_string_val_hour_string", x.FDurationKeyStringValHourString, false, true, true)
	if err := jsonencoder.AppendMapBoolWKTTsObject(enc, "f_timestamp_key_unset_val_unset", x.FTimestampKeyUnsetValUnset, false, true); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapBoolWKTTsObject(enc, "f_timestamp_key_bool_val_object", x.FTimestampKeyBoolValObject, false, false); err != nil {
		return nil, err
	}
	jsonencoder.AppendMapBoolWKTTsLayout(enc, "f_timestamp_key_bool_val_time_layout", x.FTimestampKeyBoolValTimeLayout, false, false, "2006-01-02T15:04:05.999999999Z07:00")
	jsonencoder.AppendMapBoolWKTTsUnixNano(enc, "f_timestamp_key_bool_val_unix_nano", x.FTimestampKeyBoolValUnixNano, false, false, false)
	jsonencoder.AppendMapBoolWKTTsUnixNano(enc, "f_timestamp_key_bool_val_unix_nano_string", x.FTimestampKeyBoolValUnixNanoString, false, false, true)
	jsonencoder.AppendMapBoolWKTTsUnixMicro(enc, "f_timestamp_key_bool_val_unix_micro", x.FTimestampKeyBoolValUnixMicro, false, false, false)
	jsonencoder.AppendMapBoolWKTTsUnixMicro(enc, "f_timestamp_key_bool_val_unix_micro_string", x.FTimestampKeyBoolValUnixMicroString, false, false, true)
	jsonencoder.AppendMapBoolWKTTsUnixMilli(enc, "f_timestamp_key_bool_val_unix_milli", x.FTimestampKeyBoolValUnixMilli, false, false, false)
	jsonencoder.AppendMapBoolWKTTsUnixMilli(enc, "f_timestamp_key_bool_val_unix_milli_string", x.FTimestampKeyBoolValUnixMilliString, false, false, true)
	jsonencoder.AppendMapBoolWKTTsUnixSec(enc, "f_timestamp_key_bool_val_unix_sec", x.FTimestampKeyBoolValUnixSec, false, false, false)
	jsonencoder.AppendMapBoolWKTTsUnixSec(enc, "f_timestamp_key_bool_val_unix_sec_string", x.FTimestampKeyBoolValUnixSecString, false, false, true)
	if err := jsonencoder.AppendMapBoolWKTTsObject(enc, "f_timestamp_key_string_val_object", x.FTimestampKeyStringValObject, false, true); err != nil {
		return nil, err
	}
	jsonencoder.AppendMapBoolWKTTsLayout(enc, "f_timestamp_key_string_val_time_layout", x.FTimestampKeyStringValTimeLayout, false, true, "2006-01-02T15:04:05.999999999Z07:00")
	jsonencoder.AppendMapBoolWKTTsUnixNano(enc, "f_timestamp_key_string_val_unix_nano", x.FTimestampKeyStringValUnixNano, false, true, false)
	jsonencoder.AppendMapBoolWKTTsUnixNano(enc, "f_timestamp_key_string_val_unix_nano_string", x.FTimestampKeyStringValUnixNanoString, false, true, true)
	jsonencoder.AppendMapBoolWKTTsUnixMicro(enc, "f_timestamp_key_string_val_unix_micro", x.FTimestampKeyStringValUnixMicro, false, true, false)
	jsonencoder.AppendMapBoolWKTTsUnixMicro(enc, "f_timestamp_key_string_val_unix_micro_string", x.FTimestampKeyStringValUnixMicroString, false, true, true)
	jsonencoder.AppendMapBoolWKTTsUnixMilli(enc, "f_timestamp_key_string_val_unix_milli", x.FTimestampKeyStringValUnixMilli, false, true, false)
	jsonencoder.AppendMapBoolWKTTsUnixMilli(enc, "f_timestamp_key_string_val_unix_milli_string", x.FTimestampKeyStringValUnixMilliString, false, true, true)
	jsonencoder.AppendMapBoolWKTTsUnixSec(enc, "f_timestamp_key_string_val_unix_sec", x.FTimestampKeyStringValUnixSec, false, true, false)
	jsonencoder.AppendMapBoolWKTTsUnixSec(enc, "f_timestamp_key_string_val_unix_sec_string", x.FTimestampKeyStringValUnixSecString, false, true, true)
	if err := jsonencoder.AppendMapBoolWKTAnyObject(enc, "f_any_key_unset_val_unset", x.FAnyKeyUnsetValUnset, false, true); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapBoolWKTAnyObject(enc, "f_any_key_bool_val_object", x.FAnyKeyBoolValObject, false, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapBoolWKTAnyProto(enc, "f_any_key_bool_val_proto", x.FAnyKeyBoolValProto, false, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapBoolWKTAnyObject(enc, "f_any_key_string_val_object", x.FAnyKeyStringValObject, false, true); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapBoolWKTAnyProto(enc, "f_any_key_string_val_proto", x.FAnyKeyStringValProto, false, true); err != nil {
		return nil, err
	}
	enc.AppendObjectEnd() // Add end JSON identifier
	return enc.Bytes(), nil
}

// UnmarshalJSON implements json.Unmarshaler for proto message CodecMapKeyBool in file tests/proto/cases/format/codec_map_key_bool.proto
func (x *CodecMapKeyBool) UnmarshalJSON(b []byte) error {
	if x == nil {
		return errors.New("json: Unmarshal: xgo/tests/pb/pbformat.(*CodecMapKeyBool) is nil")
	}
	var (
		err    error
		isNULL bool
		dec    *jsondecoder.Decoder
	)
	if dec, err = jsondecoder.New(b); err != nil {
		return err
	}
	if isNULL, err = dec.BeforeScanJSON(); err != nil || isNULL {
		return err
	}
LOOP_SCAN:
	for { // Loop to read the JSON objects
		var (
			jsonKey string
			isEnd   bool
		)

		if isEnd, err = dec.BeforeScanNext(); err != nil {
			return err
		}
		if isEnd {
			break LOOP_SCAN
		}

		if jsonKey, err = dec.ReadJSONKey(); err != nil {
			return err
		}
		switch jsonKey { // match the jsonKey
		case "f_int32_key_unset_val_unset":
			if x.FInt32KeyUnsetValUnset, err = jsondecoder.ReadMapBoolI32(dec, x.FInt32KeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_int32_key_bool_val_numeric":
			if x.FInt32KeyBoolValNumeric, err = jsondecoder.ReadMapBoolI32(dec, x.FInt32KeyBoolValNumeric, false, false); err != nil {
				return err
			}
		case "f_int32_key_bool_val_string":
			if x.FInt32KeyBoolValString, err = jsondecoder.ReadMapBoolI32(dec, x.FInt32KeyBoolValString, false, true); err != nil {
				return err
			}
		case "f_int32_key_string_val_numeric":
			if x.FInt32KeyStringValNumeric, err = jsondecoder.ReadMapBoolI32(dec, x.FInt32KeyStringValNumeric, true, false); err != nil {
				return err
			}
		case "f_int32_key_string_val_string":
			if x.FInt32KeyStringValString, err = jsondecoder.ReadMapBoolI32(dec, x.FInt32KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_int64_key_unset_val_unset":
			if x.FInt64KeyUnsetValUnset, err = jsondecoder.ReadMapBoolI64(dec, x.FInt64KeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_int64_key_bool_val_numeric":
			if x.FInt64KeyBoolValNumeric, err = jsondecoder.ReadMapBoolI64(dec, x.FInt64KeyBoolValNumeric, false, false); err != nil {
				return err
			}
		case "f_int64_key_bool_val_string":
			if x.FInt64KeyBoolValString, err = jsondecoder.ReadMapBoolI64(dec, x.FInt64KeyBoolValString, false, true); err != nil {
				return err
			}
		case "f_int64_key_string_val_numeric":
			if x.FInt64KeyStringValNumeric, err = jsondecoder.ReadMapBoolI64(dec, x.FInt64KeyStringValNumeric, true, false); err != nil {
				return err
			}
		case "f_int64_key_string_val_string":
			if x.FInt64KeyStringValString, err = jsondecoder.ReadMapBoolI64(dec, x.FInt64KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_uint32_key_unset_val_unset":
			if x.FUint32KeyUnsetValUnset, err = jsondecoder.ReadMapBoolU32(dec, x.FUint32KeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_uint32_key_bool_val_numeric":
			if x.FUint32KeyBoolValNumeric, err = jsondecoder.ReadMapBoolU32(dec, x.FUint32KeyBoolValNumeric, false, false); err != nil {
				return err
			}
		case "f_uint32_key_bool_val_string":
			if x.FUint32KeyBoolValString, err = jsondecoder.ReadMapBoolU32(dec, x.FUint32KeyBoolValString, false, true); err != nil {
				return err
			}
		case "f_uint32_key_string_val_numeric":
			if x.FUint32KeyStringValNumeric, err = jsondecoder.ReadMapBoolU32(dec, x.FUint32KeyStringValNumeric, true, false); err != nil {
				return err
			}
		case "f_uint32_key_string_val_string":
			if x.FUint32KeyStringValString, err = jsondecoder.ReadMapBoolU32(dec, x.FUint32KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_uint64_key_unset_val_unset":
			if x.FUint64KeyUnsetValUnset, err = jsondecoder.ReadMapBoolU64(dec, x.FUint64KeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_uint64_key_bool_val_numeric":
			if x.FUint64KeyBoolValNumeric, err = jsondecoder.ReadMapBoolU64(dec, x.FUint64KeyBoolValNumeric, false, false); err != nil {
				return err
			}
		case "f_uint64_key_bool_val_string":
			if x.FUint64KeyBoolValString, err = jsondecoder.ReadMapBoolU64(dec, x.FUint64KeyBoolValString, false, true); err != nil {
				return err
			}
		case "f_uint64_key_string_val_numeric":
			if x.FUint64KeyStringValNumeric, err = jsondecoder.ReadMapBoolU64(dec, x.FUint64KeyStringValNumeric, true, false); err != nil {
				return err
			}
		case "f_uint64_key_string_val_string":
			if x.FUint64KeyStringValString, err = jsondecoder.ReadMapBoolU64(dec, x.FUint64KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_sint32_key_unset_val_unset":
			if x.FSint32KeyUnsetValUnset, err = jsondecoder.ReadMapBoolI32(dec, x.FSint32KeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_sint32_key_bool_val_numeric":
			if x.FSint32KeyBoolValNumeric, err = jsondecoder.ReadMapBoolI32(dec, x.FSint32KeyBoolValNumeric, false, false); err != nil {
				return err
			}
		case "f_sint32_key_bool_val_string":
			if x.FSint32KeyBoolValString, err = jsondecoder.ReadMapBoolI32(dec, x.FSint32KeyBoolValString, false, true); err != nil {
				return err
			}
		case "f_sint32_key_string_val_numeric":
			if x.FSint32KeyStringValNumeric, err = jsondecoder.ReadMapBoolI32(dec, x.FSint32KeyStringValNumeric, true, false); err != nil {
				return err
			}
		case "f_sint32_key_string_val_string":
			if x.FSint32KeyStringValString, err = jsondecoder.ReadMapBoolI32(dec, x.FSint32KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_sint64_key_unset_val_unset":
			if x.FSint64KeyUnsetValUnset, err = jsondecoder.ReadMapBoolI64(dec, x.FSint64KeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_sint64_key_bool_val_numeric":
			if x.FSint64KeyBoolValNumeric, err = jsondecoder.ReadMapBoolI64(dec, x.FSint64KeyBoolValNumeric, false, false); err != nil {
				return err
			}
		case "f_sint64_key_bool_val_string":
			if x.FSint64KeyBoolValString, err = jsondecoder.ReadMapBoolI64(dec, x.FSint64KeyBoolValString, false, true); err != nil {
				return err
			}
		case "f_sint64_key_string_val_numeric":
			if x.FSint64KeyStringValNumeric, err = jsondecoder.ReadMapBoolI64(dec, x.FSint64KeyStringValNumeric, true, false); err != nil {
				return err
			}
		case "f_sint64_key_string_val_string":
			if x.FSint64KeyStringValString, err = jsondecoder.ReadMapBoolI64(dec, x.FSint64KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_sfixed32_key_unset_val_unset":
			if x.FSfixed32KeyUnsetValUnset, err = jsondecoder.ReadMapBoolI32(dec, x.FSfixed32KeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_sfixed32_key_bool_val_numeric":
			if x.FSfixed32KeyBoolValNumeric, err = jsondecoder.ReadMapBoolI32(dec, x.FSfixed32KeyBoolValNumeric, false, false); err != nil {
				return err
			}
		case "f_sfixed32_key_bool_val_string":
			if x.FSfixed32KeyBoolValString, err = jsondecoder.ReadMapBoolI32(dec, x.FSfixed32KeyBoolValString, false, true); err != nil {
				return err
			}
		case "f_sfixed32_key_string_val_numeric":
			if x.FSfixed32KeyStringValNumeric, err = jsondecoder.ReadMapBoolI32(dec, x.FSfixed32KeyStringValNumeric, true, false); err != nil {
				return err
			}
		case "f_sfixed32_key_string_val_string":
			if x.FSfixed32KeyStringValString, err = jsondecoder.ReadMapBoolI32(dec, x.FSfixed32KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_sfixed64_key_unset_val_unset":
			if x.FSfixed64KeyUnsetValUnset, err = jsondecoder.ReadMapBoolI64(dec, x.FSfixed64KeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_sfixed64_key_bool_val_numeric":
			if x.FSfixed64KeyBoolValNumeric, err = jsondecoder.ReadMapBoolI64(dec, x.FSfixed64KeyBoolValNumeric, false, false); err != nil {
				return err
			}
		case "f_sfixed64_key_bool_val_string":
			if x.FSfixed64KeyBoolValString, err = jsondecoder.ReadMapBoolI64(dec, x.FSfixed64KeyBoolValString, false, true); err != nil {
				return err
			}
		case "f_sfixed64_key_string_val_numeric":
			if x.FSfixed64KeyStringValNumeric, err = jsondecoder.ReadMapBoolI64(dec, x.FSfixed64KeyStringValNumeric, true, false); err != nil {
				return err
			}
		case "f_sfixed64_key_string_val_string":
			if x.FSfixed64KeyStringValString, err = jsondecoder.ReadMapBoolI64(dec, x.FSfixed64KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_fixed32_key_unset_val_unset":
			if x.FFixed32KeyUnsetValUnset, err = jsondecoder.ReadMapBoolU32(dec, x.FFixed32KeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_fixed32_key_bool_val_numeric":
			if x.FFixed32KeyBoolValNumeric, err = jsondecoder.ReadMapBoolU32(dec, x.FFixed32KeyBoolValNumeric, false, false); err != nil {
				return err
			}
		case "f_fixed32_key_bool_val_string":
			if x.FFixed32KeyBoolValString, err = jsondecoder.ReadMapBoolU32(dec, x.FFixed32KeyBoolValString, false, true); err != nil {
				return err
			}
		case "f_fixed32_key_string_val_numeric":
			if x.FFixed32KeyStringValNumeric, err = jsondecoder.ReadMapBoolU32(dec, x.FFixed32KeyStringValNumeric, true, false); err != nil {
				return err
			}
		case "f_fixed32_key_string_val_string":
			if x.FFixed32KeyStringValString, err = jsondecoder.ReadMapBoolU32(dec, x.FFixed32KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_fixed64_key_unset_val_unset":
			if x.FFixed64KeyUnsetValUnset, err = jsondecoder.ReadMapBoolU64(dec, x.FFixed64KeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_fixed64_key_bool_val_numeric":
			if x.FFixed64KeyBoolValNumeric, err = jsondecoder.ReadMapBoolU64(dec, x.FFixed64KeyBoolValNumeric, false, false); err != nil {
				return err
			}
		case "f_fixed64_key_bool_val_string":
			if x.FFixed64KeyBoolValString, err = jsondecoder.ReadMapBoolU64(dec, x.FFixed64KeyBoolValString, false, true); err != nil {
				return err
			}
		case "f_fixed64_key_string_val_numeric":
			if x.FFixed64KeyStringValNumeric, err = jsondecoder.ReadMapBoolU64(dec, x.FFixed64KeyStringValNumeric, true, false); err != nil {
				return err
			}
		case "f_fixed64_key_string_val_string":
			if x.FFixed64KeyStringValString, err = jsondecoder.ReadMapBoolU64(dec, x.FFixed64KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_float_key_unset_val_unset":
			if x.FFloatKeyUnsetValUnset, err = jsondecoder.ReadMapBoolF32(dec, x.FFloatKeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_float_key_bool_val_numeric":
			if x.FFloatKeyBoolValNumeric, err = jsondecoder.ReadMapBoolF32(dec, x.FFloatKeyBoolValNumeric, false, false); err != nil {
				return err
			}
		case "f_float_key_bool_val_string":
			if x.FFloatKeyBoolValString, err = jsondecoder.ReadMapBoolF32(dec, x.FFloatKeyBoolValString, false, true); err != nil {
				return err
			}
		case "f_float_key_string_val_numeric":
			if x.FFloatKeyStringValNumeric, err = jsondecoder.ReadMapBoolF32(dec, x.FFloatKeyStringValNumeric, true, false); err != nil {
				return err
			}
		case "f_float_key_string_val_string":
			if x.FFloatKeyStringValString, err = jsondecoder.ReadMapBoolF32(dec, x.FFloatKeyStringValString, true, true); err != nil {
				return err
			}
		case "f_double_key_unset_val_unset":
			if x.FDoubleKeyUnsetValUnset, err = jsondecoder.ReadMapBoolF64(dec, x.FDoubleKeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_double_key_bool_val_numeric":
			if x.FDoubleKeyBoolValNumeric, err = jsondecoder.ReadMapBoolF64(dec, x.FDoubleKeyBoolValNumeric, false, false); err != nil {
				return err
			}
		case "f_double_key_bool_val_string":
			if x.FDoubleKeyBoolValString, err = jsondecoder.ReadMapBoolF64(dec, x.FDoubleKeyBoolValString, false, true); err != nil {
				return err
			}
		case "f_double_key_string_val_numeric":
			if x.FDoubleKeyStringValNumeric, err = jsondecoder.ReadMapBoolF64(dec, x.FDoubleKeyStringValNumeric, true, false); err != nil {
				return err
			}
		case "f_double_key_string_val_string":
			if x.FDoubleKeyStringValString, err = jsondecoder.ReadMapBoolF64(dec, x.FDoubleKeyStringValString, true, true); err != nil {
				return err
			}
		case "f_bool_key_unset_val_unset":
			if x.FBoolKeyUnsetValUnset, err = jsondecoder.ReadMapBoolBool(dec, x.FBoolKeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_bool_key_bool_val_bool":
			if x.FBoolKeyBoolValBool, err = jsondecoder.ReadMapBoolBool(dec, x.FBoolKeyBoolValBool, false, false); err != nil {
				return err
			}
		case "f_bool_key_bool_val_string":
			if x.FBoolKeyBoolValString, err = jsondecoder.ReadMapBoolBool(dec, x.FBoolKeyBoolValString, false, true); err != nil {
				return err
			}
		case "f_bool_key_string_val_bool":
			if x.FBoolKeyStringValBool, err = jsondecoder.ReadMapBoolBool(dec, x.FBoolKeyStringValBool, true, false); err != nil {
				return err
			}
		case "f_bool_key_string_val_string":
			if x.FBoolKeyStringValString, err = jsondecoder.ReadMapBoolBool(dec, x.FBoolKeyStringValString, true, true); err != nil {
				return err
			}
		case "f_string_key_unset_val_none":
			if x.FStringKeyUnsetValNone, err = jsondecoder.ReadMapBoolStr(dec, x.FStringKeyUnsetValNone, true); err != nil {
				return err
			}
		case "f_string_key_bool_val_none":
			if x.FStringKeyBoolValNone, err = jsondecoder.ReadMapBoolStr(dec, x.FStringKeyBoolValNone, false); err != nil {
				return err
			}
		case "f_string_key_string_val_none":
			if x.FStringKeyStringValNone, err = jsondecoder.ReadMapBoolStr(dec, x.FStringKeyStringValNone, true); err != nil {
				return err
			}
		case "f_bytes_key_unset_val_none":
			if x.FBytesKeyUnsetValNone, err = jsondecoder.ReadMapBoolBytes(dec, x.FBytesKeyUnsetValNone, true); err != nil {
				return err
			}
		case "f_bytes_key_bool_val_none":
			if x.FBytesKeyBoolValNone, err = jsondecoder.ReadMapBoolBytes(dec, x.FBytesKeyBoolValNone, false); err != nil {
				return err
			}
		case "f_bytes_key_string_val_none":
			if x.FBytesKeyStringValNone, err = jsondecoder.ReadMapBoolBytes(dec, x.FBytesKeyStringValNone, true); err != nil {
				return err
			}
		case "f_enum_key_unset_val_unset":
			if x.FEnumKeyUnsetValUnset, err = jsondecoder.ReadMapBoolEnumNum(dec, x.FEnumKeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_enum_key_bool_val_numeric":
			if x.FEnumKeyBoolValNumeric, err = jsondecoder.ReadMapBoolEnumNum(dec, x.FEnumKeyBoolValNumeric, false, false); err != nil {
				return err
			}
		case "f_enum_key_bool_val_numeric_string":
			if x.FEnumKeyBoolValNumericString, err = jsondecoder.ReadMapBoolEnumNum(dec, x.FEnumKeyBoolValNumericString, false, true); err != nil {
				return err
			}
		case "f_enum_key_bool_val_enum_string":
			if x.FEnumKeyBoolValEnumString, err = jsondecoder.ReadMapBoolEnumStr(dec, x.FEnumKeyBoolValEnumString, false); err != nil {
				return err
			}
		case "f_enum_key_string_val_numeric":
			if x.FEnumKeyStringValNumeric, err = jsondecoder.ReadMapBoolEnumNum(dec, x.FEnumKeyStringValNumeric, true, false); err != nil {
				return err
			}
		case "f_enum_key_string_val_numeric_string":
			if x.FEnumKeyStringValNumericString, err = jsondecoder.ReadMapBoolEnumNum(dec, x.FEnumKeyStringValNumericString, true, true); err != nil {
				return err
			}
		case "f_enum_key_string_val_enum_string":
			if x.FEnumKeyStringValEnumString, err = jsondecoder.ReadMapBoolEnumStr(dec, x.FEnumKeyStringValEnumString, true); err != nil {
				return err
			}
		case "f_message_key_unset_val_none":
			if x.FMessageKeyUnsetValNone, err = jsondecoder.ReadMapBoolMessage(dec, x.FMessageKeyUnsetValNone, true); err != nil {
				return err
			}
		case "f_message_key_bool_val_none":
			if x.FMessageKeyBoolValNone, err = jsondecoder.ReadMapBoolMessage(dec, x.FMessageKeyBoolValNone, false); err != nil {
				return err
			}
		case "f_message_key_string_val_none":
			if x.FMessageKeyStringValNone, err = jsondecoder.ReadMapBoolMessage(dec, x.FMessageKeyStringValNone, true); err != nil {
				return err
			}
		case "f_duration_key_unset_val_unset":
			if x.FDurationKeyUnsetValUnset, err = jsondecoder.ReadMapBoolWKTDurObject(dec, x.FDurationKeyUnsetValUnset, true); err != nil {
				return err
			}
		case "f_duration_key_bool_val_object":
			if x.FDurationKeyBoolValObject, err = jsondecoder.ReadMapBoolWKTDurObject(dec, x.FDurationKeyBoolValObject, false); err != nil {
				return err
			}
		case "f_duration_key_bool_val_time_string":
			if x.FDurationKeyBoolValTimeString, err = jsondecoder.ReadMapBoolWKTDurTimeStr(dec, x.FDurationKeyBoolValTimeString, false); err != nil {
				return err
			}
		case "f_duration_key_bool_val_nanosecond":
			if x.FDurationKeyBoolValNanosecond, err = jsondecoder.ReadMapBoolWKTDurNano(dec, x.FDurationKeyBoolValNanosecond, false, false); err != nil {
				return err
			}
		case "f_duration_key_bool_val_nanosecond_string":
			if x.FDurationKeyBoolValNanosecondString, err = jsondecoder.ReadMapBoolWKTDurNano(dec, x.FDurationKeyBoolValNanosecondString, false, true); err != nil {
				return err
			}
		case "f_duration_key_bool_val_microsecond":
			if x.FDurationKeyBoolValMicrosecond, err = jsondecoder.ReadMapBoolWKTDurMicro(dec, x.FDurationKeyBoolValMicrosecond, false, false); err != nil {
				return err
			}
		case "f_duration_key_bool_val_microsecond_string":
			if x.FDurationKeyBoolValMicrosecondString, err = jsondecoder.ReadMapBoolWKTDurMicro(dec, x.FDurationKeyBoolValMicrosecondString, false, true); err != nil {
				return err
			}
		case "f_duration_key_bool_val_millisecond":
			if x.FDurationKeyBoolValMillisecond, err = jsondecoder.ReadMapBoolWKTDurMilli(dec, x.FDurationKeyBoolValMillisecond, false, false); err != nil {
				return err
			}
		case "f_duration_key_bool_val_millisecond_string":
			if x.FDurationKeyBoolValMillisecondString, err = jsondecoder.ReadMapBoolWKTDurMilli(dec, x.FDurationKeyBoolValMillisecondString, false, true); err != nil {
				return err
			}
		case "f_duration_key_bool_val_second":
			if x.FDurationKeyBoolValSecond, err = jsondecoder.ReadMapBoolWKTDurSecond(dec, x.FDurationKeyBoolValSecond, false, false); err != nil {
				return err
			}
		case "f_duration_key_bool_val_second_string":
			if x.FDurationKeyBoolValSecondString, err = jsondecoder.ReadMapBoolWKTDurSecond(dec, x.FDurationKeyBoolValSecondString, false, true); err != nil {
				return err
			}
		case "f_duration_key_bool_val_minute":
			if x.FDurationKeyBoolValMinute, err = jsondecoder.ReadMapBoolWKTDurMinute(dec, x.FDurationKeyBoolValMinute, false, false); err != nil {
				return err
			}
		case "f_duration_key_bool_val_minute_string":
			if x.FDurationKeyBoolValMinuteString, err = jsondecoder.ReadMapBoolWKTDurMinute(dec, x.FDurationKeyBoolValMinuteString, false, true); err != nil {
				return err
			}
		case "f_duration_key_bool_val_hour":
			if x.FDurationKeyBoolValHour, err = jsondecoder.ReadMapBoolWKTDurHour(dec, x.FDurationKeyBoolValHour, false, false); err != nil {
				return err
			}
		case "f_duration_key_bool_val_hour_string":
			if x.FDurationKeyBoolValHourString, err = jsondecoder.ReadMapBoolWKTDurHour(dec, x.FDurationKeyBoolValHourString, false, true); err != nil {
				return err
			}
		case "f_duration_key_string_val_unset":
			if x.FDurationKeyStringValUnset, err = jsondecoder.ReadMapBoolWKTDurObject(dec, x.FDurationKeyStringValUnset, true); err != nil {
				return err
			}
		case "f_duration_key_string_val_object":
			if x.FDurationKeyStringValObject, err = jsondecoder.ReadMapBoolWKTDurObject(dec, x.FDurationKeyStringValObject, true); err != nil {
				return err
			}
		case "f_duration_key_string_val_time_string":
			if x.FDurationKeyStringValTimeString, err = jsondecoder.ReadMapBoolWKTDurTimeStr(dec, x.FDurationKeyStringValTimeString, true); err != nil {
				return err
			}
		case "f_duration_key_string_val_nanosecond":
			if x.FDurationKeyStringValNanosecond, err = jsondecoder.ReadMapBoolWKTDurNano(dec, x.FDurationKeyStringValNanosecond, true, false); err != nil {
				return err
			}
		case "f_duration_key_string_val_nanosecond_string":
			if x.FDurationKeyStringValNanosecondString, err = jsondecoder.ReadMapBoolWKTDurNano(dec, x.FDurationKeyStringValNanosecondString, true, true); err != nil {
				return err
			}
		case "f_duration_key_string_val_microsecond":
			if x.FDurationKeyStringValMicrosecond, err = jsondecoder.ReadMapBoolWKTDurMicro(dec, x.FDurationKeyStringValMicrosecond, true, false); err != nil {
				return err
			}
		case "f_duration_key_string_val_microsecond_string":
			if x.FDurationKeyStringValMicrosecondString, err = jsondecoder.ReadMapBoolWKTDurMicro(dec, x.FDurationKeyStringValMicrosecondString, true, true); err != nil {
				return err
			}
		case "f_duration_key_string_val_millisecond":
			if x.FDurationKeyStringValMillisecond, err = jsondecoder.ReadMapBoolWKTDurMilli(dec, x.FDurationKeyStringValMillisecond, true, false); err != nil {
				return err
			}
		case "f_duration_key_string_val_millisecond_string":
			if x.FDurationKeyStringValMillisecondString, err = jsondecoder.ReadMapBoolWKTDurMilli(dec, x.FDurationKeyStringValMillisecondString, true, true); err != nil {
				return err
			}
		case "f_duration_key_string_val_second":
			if x.FDurationKeyStringValSecond, err = jsondecoder.ReadMapBoolWKTDurSecond(dec, x.FDurationKeyStringValSecond, true, false); err != nil {
				return err
			}
		case "f_duration_key_string_val_second_string":
			if x.FDurationKeyStringValSecondString, err = jsondecoder.ReadMapBoolWKTDurSecond(dec, x.FDurationKeyStringValSecondString, true, true); err != nil {
				return err
			}
		case "f_duration_key_string_val_minute":
			if x.FDurationKeyStringValMinute, err = jsondecoder.ReadMapBoolWKTDurMinute(dec, x.FDurationKeyStringValMinute, true, false); err != nil {
				return err
			}
		case "f_duration_key_string_val_minute_string":
			if x.FDurationKeyStringValMinuteString, err = jsondecoder.ReadMapBoolWKTDurMinute(dec, x.FDurationKeyStringValMinuteString, true, true); err != nil {
				return err
			}
		case "f_duration_key_string_val_hour":
			if x.FDurationKeyStringValHour, err = jsondecoder.ReadMapBoolWKTDurHour(dec, x.FDurationKeyStringValHour, true, false); err != nil {
				return err
			}
		case "f_duration_key_string_val_hour_string":
			if x.FDurationKeyStringValHourString, err = jsondecoder.ReadMapBoolWKTDurHour(dec, x.FDurationKeyStringValHourString, true, true); err != nil {
				return err
			}
		case "f_timestamp_key_unset_val_unset":
			if x.FTimestampKeyUnsetValUnset, err = jsondecoder.ReadMapBoolWKTTsObject(dec, x.FTimestampKeyUnsetValUnset, true); err != nil {
				return err
			}
		case "f_timestamp_key_bool_val_object":
			if x.FTimestampKeyBoolValObject, err = jsondecoder.ReadMapBoolWKTTsObject(dec, x.FTimestampKeyBoolValObject, false); err != nil {
				return err
			}
		case "f_timestamp_key_bool_val_time_layout":
			if x.FTimestampKeyBoolValTimeLayout, err = jsondecoder.ReadMapBoolWKTTsLayout(dec, x.FTimestampKeyBoolValTimeLayout, false, "2006-01-02T15:04:05.999999999Z07:00"); err != nil {
				return err
			}
		case "f_timestamp_key_bool_val_unix_nano":
			if x.FTimestampKeyBoolValUnixNano, err = jsondecoder.ReadMapBoolWKTTsUnixNano(dec, x.FTimestampKeyBoolValUnixNano, false, false); err != nil {
				return err
			}
		case "f_timestamp_key_bool_val_unix_nano_string":
			if x.FTimestampKeyBoolValUnixNanoString, err = jsondecoder.ReadMapBoolWKTTsUnixNano(dec, x.FTimestampKeyBoolValUnixNanoString, false, true); err != nil {
				return err
			}
		case "f_timestamp_key_bool_val_unix_micro":
			if x.FTimestampKeyBoolValUnixMicro, err = jsondecoder.ReadMapBoolWKTTsUnixMicro(dec, x.FTimestampKeyBoolValUnixMicro, false, false); err != nil {
				return err
			}
		case "f_timestamp_key_bool_val_unix_micro_string":
			if x.FTimestampKeyBoolValUnixMicroString, err = jsondecoder.ReadMapBoolWKTTsUnixMicro(dec, x.FTimestampKeyBoolValUnixMicroString, false, true); err != nil {
				return err
			}
		case "f_timestamp_key_bool_val_unix_milli":
			if x.FTimestampKeyBoolValUnixMilli, err = jsondecoder.ReadMapBoolWKTTsUnixMilli(dec, x.FTimestampKeyBoolValUnixMilli, false, false); err != nil {
				return err
			}
		case "f_timestamp_key_bool_val_unix_milli_string":
			if x.FTimestampKeyBoolValUnixMilliString, err = jsondecoder.ReadMapBoolWKTTsUnixMilli(dec, x.FTimestampKeyBoolValUnixMilliString, false, true); err != nil {
				return err
			}
		case "f_timestamp_key_bool_val_unix_sec":
			if x.FTimestampKeyBoolValUnixSec, err = jsondecoder.ReadMapBoolWKTTsUnixSec(dec, x.FTimestampKeyBoolValUnixSec, false, false); err != nil {
				return err
			}
		case "f_timestamp_key_bool_val_unix_sec_string":
			if x.FTimestampKeyBoolValUnixSecString, err = jsondecoder.ReadMapBoolWKTTsUnixSec(dec, x.FTimestampKeyBoolValUnixSecString, false, true); err != nil {
				return err
			}
		case "f_timestamp_key_string_val_object":
			if x.FTimestampKeyStringValObject, err = jsondecoder.ReadMapBoolWKTTsObject(dec, x.FTimestampKeyStringValObject, true); err != nil {
				return err
			}
		case "f_timestamp_key_string_val_time_layout":
			if x.FTimestampKeyStringValTimeLayout, err = jsondecoder.ReadMapBoolWKTTsLayout(dec, x.FTimestampKeyStringValTimeLayout, true, "2006-01-02T15:04:05.999999999Z07:00"); err != nil {
				return err
			}
		case "f_timestamp_key_string_val_unix_nano":
			if x.FTimestampKeyStringValUnixNano, err = jsondecoder.ReadMapBoolWKTTsUnixNano(dec, x.FTimestampKeyStringValUnixNano, true, false); err != nil {
				return err
			}
		case "f_timestamp_key_string_val_unix_nano_string":
			if x.FTimestampKeyStringValUnixNanoString, err = jsondecoder.ReadMapBoolWKTTsUnixNano(dec, x.FTimestampKeyStringValUnixNanoString, true, true); err != nil {
				return err
			}
		case "f_timestamp_key_string_val_unix_micro":
			if x.FTimestampKeyStringValUnixMicro, err = jsondecoder.ReadMapBoolWKTTsUnixMicro(dec, x.FTimestampKeyStringValUnixMicro, true, false); err != nil {
				return err
			}
		case "f_timestamp_key_string_val_unix_micro_string":
			if x.FTimestampKeyStringValUnixMicroString, err = jsondecoder.ReadMapBoolWKTTsUnixMicro(dec, x.FTimestampKeyStringValUnixMicroString, true, true); err != nil {
				return err
			}
		case "f_timestamp_key_string_val_unix_milli":
			if x.FTimestampKeyStringValUnixMilli, err = jsondecoder.ReadMapBoolWKTTsUnixMilli(dec, x.FTimestampKeyStringValUnixMilli, true, false); err != nil {
				return err
			}
		case "f_timestamp_key_string_val_unix_milli_string":
			if x.FTimestampKeyStringValUnixMilliString, err = jsondecoder.ReadMapBoolWKTTsUnixMilli(dec, x.FTimestampKeyStringValUnixMilliString, true, true); err != nil {
				return err
			}
		case "f_timestamp_key_string_val_unix_sec":
			if x.FTimestampKeyStringValUnixSec, err = jsondecoder.ReadMapBoolWKTTsUnixSec(dec, x.FTimestampKeyStringValUnixSec, true, false); err != nil {
				return err
			}
		case "f_timestamp_key_string_val_unix_sec_string":
			if x.FTimestampKeyStringValUnixSecString, err = jsondecoder.ReadMapBoolWKTTsUnixSec(dec, x.FTimestampKeyStringValUnixSecString, true, true); err != nil {
				return err
			}
		case "f_any_key_unset_val_unset":
			if x.FAnyKeyUnsetValUnset, err = jsondecoder.ReadMapBoolWKTAnyObject(dec, x.FAnyKeyUnsetValUnset, true); err != nil {
				return err
			}
		case "f_any_key_bool_val_object":
			if x.FAnyKeyBoolValObject, err = jsondecoder.ReadMapBoolWKTAnyObject(dec, x.FAnyKeyBoolValObject, false); err != nil {
				return err
			}
		case "f_any_key_bool_val_proto":
			if x.FAnyKeyBoolValProto, err = jsondecoder.ReadMapBoolWKTAnyProto(dec, x.FAnyKeyBoolValProto, false); err != nil {
				return err
			}
		case "f_any_key_string_val_object":
			if x.FAnyKeyStringValObject, err = jsondecoder.ReadMapBoolWKTAnyObject(dec, x.FAnyKeyStringValObject, true); err != nil {
				return err
			}
		case "f_any_key_string_val_proto":
			if x.FAnyKeyStringValProto, err = jsondecoder.ReadMapBoolWKTAnyProto(dec, x.FAnyKeyStringValProto, true); err != nil {
				return err
			}
		default:
			if err = dec.DiscardValue(); err != nil {
				return err
			}
		} // end switch
	}
	return nil
}
