// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: tests/proto/cases/format/codec_type_oneof1.proto

package pbformat

import (
	_ "github.com/yu31/protoc-plugin-json/xgo/pb/pbjson"
	pbexternal "github.com/yu31/protoc-plugin-json/xgo/tests/pb/pbexternal"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CodecTypeOneOf1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OneInt32:
	//	*CodecTypeOneOf1_FInt32Numeric
	//	*CodecTypeOneOf1_FInt32String
	OneInt32 isCodecTypeOneOf1_OneInt32 `protobuf_oneof:"OneInt32"`
	// Types that are assignable to OneInt64:
	//	*CodecTypeOneOf1_FInt64Numeric
	//	*CodecTypeOneOf1_FInt64String
	OneInt64 isCodecTypeOneOf1_OneInt64 `protobuf_oneof:"OneInt64"`
	// Types that are assignable to OneUint32:
	//	*CodecTypeOneOf1_FUint32Numeric
	//	*CodecTypeOneOf1_FUint32String
	OneUint32 isCodecTypeOneOf1_OneUint32 `protobuf_oneof:"OneUint32"`
	// Types that are assignable to OneUint64:
	//	*CodecTypeOneOf1_FUint64Numeric
	//	*CodecTypeOneOf1_FUint64String
	OneUint64 isCodecTypeOneOf1_OneUint64 `protobuf_oneof:"OneUint64"`
	// Types that are assignable to OneSInt32:
	//	*CodecTypeOneOf1_FSint32Numeric
	//	*CodecTypeOneOf1_FSint32String
	OneSInt32 isCodecTypeOneOf1_OneSInt32 `protobuf_oneof:"OneSInt32"`
	// Types that are assignable to OneSInt64:
	//	*CodecTypeOneOf1_FSint64Numeric
	//	*CodecTypeOneOf1_FSint64String
	OneSInt64 isCodecTypeOneOf1_OneSInt64 `protobuf_oneof:"OneSInt64"`
	// Types that are assignable to OneSFixed32:
	//	*CodecTypeOneOf1_FSfixed32Numeric
	//	*CodecTypeOneOf1_FSfixed32String
	OneSFixed32 isCodecTypeOneOf1_OneSFixed32 `protobuf_oneof:"OneSFixed32"`
	// Types that are assignable to OneSFixed64:
	//	*CodecTypeOneOf1_FSfixed64Numeric
	//	*CodecTypeOneOf1_FSfixed64String
	OneSFixed64 isCodecTypeOneOf1_OneSFixed64 `protobuf_oneof:"OneSFixed64"`
	// Types that are assignable to OneFixed32:
	//	*CodecTypeOneOf1_FFixed32Numeric
	//	*CodecTypeOneOf1_FFixed32String
	OneFixed32 isCodecTypeOneOf1_OneFixed32 `protobuf_oneof:"OneFixed32"`
	// Types that are assignable to OneFixed64:
	//	*CodecTypeOneOf1_FFixed64Numeric
	//	*CodecTypeOneOf1_FFixed64String
	OneFixed64 isCodecTypeOneOf1_OneFixed64 `protobuf_oneof:"OneFixed64"`
	// Types that are assignable to OneFloat:
	//	*CodecTypeOneOf1_FFloatNumeric
	//	*CodecTypeOneOf1_FFloatString
	OneFloat isCodecTypeOneOf1_OneFloat `protobuf_oneof:"OneFloat"`
	// Types that are assignable to OneDouble:
	//	*CodecTypeOneOf1_FDoubleNumeric
	//	*CodecTypeOneOf1_FDoubleString
	OneDouble isCodecTypeOneOf1_OneDouble `protobuf_oneof:"OneDouble"`
	// Types that are assignable to OneBool:
	//	*CodecTypeOneOf1_FBoolBool
	//	*CodecTypeOneOf1_FBoolString
	OneBool isCodecTypeOneOf1_OneBool `protobuf_oneof:"OneBool"`
	// Cases for Enum
	//
	// Types that are assignable to OneEnum1:
	//	*CodecTypeOneOf1_FEnumNumeric
	//	*CodecTypeOneOf1_FEnumString
	OneEnum1 isCodecTypeOneOf1_OneEnum1 `protobuf_oneof:"OneEnum1"`
	// Types that are assignable to OneEnum2:
	//	*CodecTypeOneOf1_FEnumNumericString1
	//	*CodecTypeOneOf1_FEnumNumericString2
	OneEnum2 isCodecTypeOneOf1_OneEnum2 `protobuf_oneof:"OneEnum2"`
	// Cases for google.protobuf.Any
	//
	// Types that are assignable to OneAny1:
	//	*CodecTypeOneOf1_FAnyNative
	//	*CodecTypeOneOf1_FAnyProto
	OneAny1 isCodecTypeOneOf1_OneAny1 `protobuf_oneof:"OneAny1"`
	// Cases for google.protobuf.Duration
	//
	// Types that are assignable to OneDuration1:
	//	*CodecTypeOneOf1_FDurationNative
	//	*CodecTypeOneOf1_FDurationString
	OneDuration1 isCodecTypeOneOf1_OneDuration1 `protobuf_oneof:"OneDuration1"`
	// Types that are assignable to OneDuration2:
	//	*CodecTypeOneOf1_FDurationNanosecond
	//	*CodecTypeOneOf1_FDurationMicrosecond
	OneDuration2 isCodecTypeOneOf1_OneDuration2 `protobuf_oneof:"OneDuration2"`
	// Types that are assignable to OneDuration3:
	//	*CodecTypeOneOf1_FDurationMillisecond
	//	*CodecTypeOneOf1_FDurationSecond
	OneDuration3 isCodecTypeOneOf1_OneDuration3 `protobuf_oneof:"OneDuration3"`
	// Types that are assignable to OneDuration4:
	//	*CodecTypeOneOf1_FDurationMinute
	//	*CodecTypeOneOf1_FDurationHour
	OneDuration4 isCodecTypeOneOf1_OneDuration4 `protobuf_oneof:"OneDuration4"`
	// Types that are assignable to OneDuration5:
	//	*CodecTypeOneOf1_FDurationNanosecondString
	//	*CodecTypeOneOf1_FDurationMicrosecondString
	OneDuration5 isCodecTypeOneOf1_OneDuration5 `protobuf_oneof:"OneDuration5"`
	// Types that are assignable to OneDuration6:
	//	*CodecTypeOneOf1_FDurationMillisecondString
	//	*CodecTypeOneOf1_FDurationSecondString
	OneDuration6 isCodecTypeOneOf1_OneDuration6 `protobuf_oneof:"OneDuration6"`
	// Types that are assignable to OneDuration7:
	//	*CodecTypeOneOf1_FDurationMinuteString
	//	*CodecTypeOneOf1_FDurationHourString
	OneDuration7 isCodecTypeOneOf1_OneDuration7 `protobuf_oneof:"OneDuration7"`
	// Cases for google.protobuf.Timestamp
	//
	// Types that are assignable to OneTimestamp1:
	//	*CodecTypeOneOf1_FTimestampNative
	//	*CodecTypeOneOf1_FTimestampTimeLayout
	OneTimestamp1 isCodecTypeOneOf1_OneTimestamp1 `protobuf_oneof:"OneTimestamp1"`
	// Types that are assignable to OneTimestamp2:
	//	*CodecTypeOneOf1_FTimestampUnixNano
	//	*CodecTypeOneOf1_FTimestampUnixMicro
	OneTimestamp2 isCodecTypeOneOf1_OneTimestamp2 `protobuf_oneof:"OneTimestamp2"`
	// Types that are assignable to OneTimestamp3:
	//	*CodecTypeOneOf1_FTimestampUnixMilli
	//	*CodecTypeOneOf1_FTimestampUnixSec
	OneTimestamp3 isCodecTypeOneOf1_OneTimestamp3 `protobuf_oneof:"OneTimestamp3"`
	// Types that are assignable to OneTimestamp4:
	//	*CodecTypeOneOf1_FTimestampUnixNanoString
	//	*CodecTypeOneOf1_FTimestampUnixMicroString
	OneTimestamp4 isCodecTypeOneOf1_OneTimestamp4 `protobuf_oneof:"OneTimestamp4"`
	// Types that are assignable to OneTimestamp5:
	//	*CodecTypeOneOf1_FTimestampUnixMilliString
	//	*CodecTypeOneOf1_FTimestampUnixSecString
	OneTimestamp5 isCodecTypeOneOf1_OneTimestamp5 `protobuf_oneof:"OneTimestamp5"`
}

func (x *CodecTypeOneOf1) Reset() {
	*x = CodecTypeOneOf1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_cases_format_codec_type_oneof1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodecTypeOneOf1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecTypeOneOf1) ProtoMessage() {}

func (x *CodecTypeOneOf1) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_cases_format_codec_type_oneof1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecTypeOneOf1.ProtoReflect.Descriptor instead.
func (*CodecTypeOneOf1) Descriptor() ([]byte, []int) {
	return file_tests_proto_cases_format_codec_type_oneof1_proto_rawDescGZIP(), []int{0}
}

func (m *CodecTypeOneOf1) GetOneInt32() isCodecTypeOneOf1_OneInt32 {
	if m != nil {
		return m.OneInt32
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFInt32Numeric() int32 {
	if x, ok := x.GetOneInt32().(*CodecTypeOneOf1_FInt32Numeric); ok {
		return x.FInt32Numeric
	}
	return 0
}

func (x *CodecTypeOneOf1) GetFInt32String() int32 {
	if x, ok := x.GetOneInt32().(*CodecTypeOneOf1_FInt32String); ok {
		return x.FInt32String
	}
	return 0
}

func (m *CodecTypeOneOf1) GetOneInt64() isCodecTypeOneOf1_OneInt64 {
	if m != nil {
		return m.OneInt64
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFInt64Numeric() int64 {
	if x, ok := x.GetOneInt64().(*CodecTypeOneOf1_FInt64Numeric); ok {
		return x.FInt64Numeric
	}
	return 0
}

func (x *CodecTypeOneOf1) GetFInt64String() int64 {
	if x, ok := x.GetOneInt64().(*CodecTypeOneOf1_FInt64String); ok {
		return x.FInt64String
	}
	return 0
}

func (m *CodecTypeOneOf1) GetOneUint32() isCodecTypeOneOf1_OneUint32 {
	if m != nil {
		return m.OneUint32
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFUint32Numeric() uint32 {
	if x, ok := x.GetOneUint32().(*CodecTypeOneOf1_FUint32Numeric); ok {
		return x.FUint32Numeric
	}
	return 0
}

func (x *CodecTypeOneOf1) GetFUint32String() uint32 {
	if x, ok := x.GetOneUint32().(*CodecTypeOneOf1_FUint32String); ok {
		return x.FUint32String
	}
	return 0
}

func (m *CodecTypeOneOf1) GetOneUint64() isCodecTypeOneOf1_OneUint64 {
	if m != nil {
		return m.OneUint64
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFUint64Numeric() uint64 {
	if x, ok := x.GetOneUint64().(*CodecTypeOneOf1_FUint64Numeric); ok {
		return x.FUint64Numeric
	}
	return 0
}

func (x *CodecTypeOneOf1) GetFUint64String() uint64 {
	if x, ok := x.GetOneUint64().(*CodecTypeOneOf1_FUint64String); ok {
		return x.FUint64String
	}
	return 0
}

func (m *CodecTypeOneOf1) GetOneSInt32() isCodecTypeOneOf1_OneSInt32 {
	if m != nil {
		return m.OneSInt32
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFSint32Numeric() int32 {
	if x, ok := x.GetOneSInt32().(*CodecTypeOneOf1_FSint32Numeric); ok {
		return x.FSint32Numeric
	}
	return 0
}

func (x *CodecTypeOneOf1) GetFSint32String() int32 {
	if x, ok := x.GetOneSInt32().(*CodecTypeOneOf1_FSint32String); ok {
		return x.FSint32String
	}
	return 0
}

func (m *CodecTypeOneOf1) GetOneSInt64() isCodecTypeOneOf1_OneSInt64 {
	if m != nil {
		return m.OneSInt64
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFSint64Numeric() int64 {
	if x, ok := x.GetOneSInt64().(*CodecTypeOneOf1_FSint64Numeric); ok {
		return x.FSint64Numeric
	}
	return 0
}

func (x *CodecTypeOneOf1) GetFSint64String() int64 {
	if x, ok := x.GetOneSInt64().(*CodecTypeOneOf1_FSint64String); ok {
		return x.FSint64String
	}
	return 0
}

func (m *CodecTypeOneOf1) GetOneSFixed32() isCodecTypeOneOf1_OneSFixed32 {
	if m != nil {
		return m.OneSFixed32
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFSfixed32Numeric() int32 {
	if x, ok := x.GetOneSFixed32().(*CodecTypeOneOf1_FSfixed32Numeric); ok {
		return x.FSfixed32Numeric
	}
	return 0
}

func (x *CodecTypeOneOf1) GetFSfixed32String() int32 {
	if x, ok := x.GetOneSFixed32().(*CodecTypeOneOf1_FSfixed32String); ok {
		return x.FSfixed32String
	}
	return 0
}

func (m *CodecTypeOneOf1) GetOneSFixed64() isCodecTypeOneOf1_OneSFixed64 {
	if m != nil {
		return m.OneSFixed64
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFSfixed64Numeric() int64 {
	if x, ok := x.GetOneSFixed64().(*CodecTypeOneOf1_FSfixed64Numeric); ok {
		return x.FSfixed64Numeric
	}
	return 0
}

func (x *CodecTypeOneOf1) GetFSfixed64String() int64 {
	if x, ok := x.GetOneSFixed64().(*CodecTypeOneOf1_FSfixed64String); ok {
		return x.FSfixed64String
	}
	return 0
}

func (m *CodecTypeOneOf1) GetOneFixed32() isCodecTypeOneOf1_OneFixed32 {
	if m != nil {
		return m.OneFixed32
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFFixed32Numeric() uint32 {
	if x, ok := x.GetOneFixed32().(*CodecTypeOneOf1_FFixed32Numeric); ok {
		return x.FFixed32Numeric
	}
	return 0
}

func (x *CodecTypeOneOf1) GetFFixed32String() uint32 {
	if x, ok := x.GetOneFixed32().(*CodecTypeOneOf1_FFixed32String); ok {
		return x.FFixed32String
	}
	return 0
}

func (m *CodecTypeOneOf1) GetOneFixed64() isCodecTypeOneOf1_OneFixed64 {
	if m != nil {
		return m.OneFixed64
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFFixed64Numeric() uint64 {
	if x, ok := x.GetOneFixed64().(*CodecTypeOneOf1_FFixed64Numeric); ok {
		return x.FFixed64Numeric
	}
	return 0
}

func (x *CodecTypeOneOf1) GetFFixed64String() uint64 {
	if x, ok := x.GetOneFixed64().(*CodecTypeOneOf1_FFixed64String); ok {
		return x.FFixed64String
	}
	return 0
}

func (m *CodecTypeOneOf1) GetOneFloat() isCodecTypeOneOf1_OneFloat {
	if m != nil {
		return m.OneFloat
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFFloatNumeric() float32 {
	if x, ok := x.GetOneFloat().(*CodecTypeOneOf1_FFloatNumeric); ok {
		return x.FFloatNumeric
	}
	return 0
}

func (x *CodecTypeOneOf1) GetFFloatString() float32 {
	if x, ok := x.GetOneFloat().(*CodecTypeOneOf1_FFloatString); ok {
		return x.FFloatString
	}
	return 0
}

func (m *CodecTypeOneOf1) GetOneDouble() isCodecTypeOneOf1_OneDouble {
	if m != nil {
		return m.OneDouble
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFDoubleNumeric() float64 {
	if x, ok := x.GetOneDouble().(*CodecTypeOneOf1_FDoubleNumeric); ok {
		return x.FDoubleNumeric
	}
	return 0
}

func (x *CodecTypeOneOf1) GetFDoubleString() float64 {
	if x, ok := x.GetOneDouble().(*CodecTypeOneOf1_FDoubleString); ok {
		return x.FDoubleString
	}
	return 0
}

func (m *CodecTypeOneOf1) GetOneBool() isCodecTypeOneOf1_OneBool {
	if m != nil {
		return m.OneBool
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFBoolBool() bool {
	if x, ok := x.GetOneBool().(*CodecTypeOneOf1_FBoolBool); ok {
		return x.FBoolBool
	}
	return false
}

func (x *CodecTypeOneOf1) GetFBoolString() bool {
	if x, ok := x.GetOneBool().(*CodecTypeOneOf1_FBoolString); ok {
		return x.FBoolString
	}
	return false
}

func (m *CodecTypeOneOf1) GetOneEnum1() isCodecTypeOneOf1_OneEnum1 {
	if m != nil {
		return m.OneEnum1
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFEnumNumeric() pbexternal.EnumNum1 {
	if x, ok := x.GetOneEnum1().(*CodecTypeOneOf1_FEnumNumeric); ok {
		return x.FEnumNumeric
	}
	return pbexternal.EnumNum1(0)
}

func (x *CodecTypeOneOf1) GetFEnumString() pbexternal.EnumNum1 {
	if x, ok := x.GetOneEnum1().(*CodecTypeOneOf1_FEnumString); ok {
		return x.FEnumString
	}
	return pbexternal.EnumNum1(0)
}

func (m *CodecTypeOneOf1) GetOneEnum2() isCodecTypeOneOf1_OneEnum2 {
	if m != nil {
		return m.OneEnum2
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFEnumNumericString1() pbexternal.EnumNum1 {
	if x, ok := x.GetOneEnum2().(*CodecTypeOneOf1_FEnumNumericString1); ok {
		return x.FEnumNumericString1
	}
	return pbexternal.EnumNum1(0)
}

func (x *CodecTypeOneOf1) GetFEnumNumericString2() pbexternal.EnumNum1 {
	if x, ok := x.GetOneEnum2().(*CodecTypeOneOf1_FEnumNumericString2); ok {
		return x.FEnumNumericString2
	}
	return pbexternal.EnumNum1(0)
}

func (m *CodecTypeOneOf1) GetOneAny1() isCodecTypeOneOf1_OneAny1 {
	if m != nil {
		return m.OneAny1
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFAnyNative() *anypb.Any {
	if x, ok := x.GetOneAny1().(*CodecTypeOneOf1_FAnyNative); ok {
		return x.FAnyNative
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFAnyProto() *anypb.Any {
	if x, ok := x.GetOneAny1().(*CodecTypeOneOf1_FAnyProto); ok {
		return x.FAnyProto
	}
	return nil
}

func (m *CodecTypeOneOf1) GetOneDuration1() isCodecTypeOneOf1_OneDuration1 {
	if m != nil {
		return m.OneDuration1
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFDurationNative() *durationpb.Duration {
	if x, ok := x.GetOneDuration1().(*CodecTypeOneOf1_FDurationNative); ok {
		return x.FDurationNative
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFDurationString() *durationpb.Duration {
	if x, ok := x.GetOneDuration1().(*CodecTypeOneOf1_FDurationString); ok {
		return x.FDurationString
	}
	return nil
}

func (m *CodecTypeOneOf1) GetOneDuration2() isCodecTypeOneOf1_OneDuration2 {
	if m != nil {
		return m.OneDuration2
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFDurationNanosecond() *durationpb.Duration {
	if x, ok := x.GetOneDuration2().(*CodecTypeOneOf1_FDurationNanosecond); ok {
		return x.FDurationNanosecond
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFDurationMicrosecond() *durationpb.Duration {
	if x, ok := x.GetOneDuration2().(*CodecTypeOneOf1_FDurationMicrosecond); ok {
		return x.FDurationMicrosecond
	}
	return nil
}

func (m *CodecTypeOneOf1) GetOneDuration3() isCodecTypeOneOf1_OneDuration3 {
	if m != nil {
		return m.OneDuration3
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFDurationMillisecond() *durationpb.Duration {
	if x, ok := x.GetOneDuration3().(*CodecTypeOneOf1_FDurationMillisecond); ok {
		return x.FDurationMillisecond
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFDurationSecond() *durationpb.Duration {
	if x, ok := x.GetOneDuration3().(*CodecTypeOneOf1_FDurationSecond); ok {
		return x.FDurationSecond
	}
	return nil
}

func (m *CodecTypeOneOf1) GetOneDuration4() isCodecTypeOneOf1_OneDuration4 {
	if m != nil {
		return m.OneDuration4
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFDurationMinute() *durationpb.Duration {
	if x, ok := x.GetOneDuration4().(*CodecTypeOneOf1_FDurationMinute); ok {
		return x.FDurationMinute
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFDurationHour() *durationpb.Duration {
	if x, ok := x.GetOneDuration4().(*CodecTypeOneOf1_FDurationHour); ok {
		return x.FDurationHour
	}
	return nil
}

func (m *CodecTypeOneOf1) GetOneDuration5() isCodecTypeOneOf1_OneDuration5 {
	if m != nil {
		return m.OneDuration5
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFDurationNanosecondString() *durationpb.Duration {
	if x, ok := x.GetOneDuration5().(*CodecTypeOneOf1_FDurationNanosecondString); ok {
		return x.FDurationNanosecondString
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFDurationMicrosecondString() *durationpb.Duration {
	if x, ok := x.GetOneDuration5().(*CodecTypeOneOf1_FDurationMicrosecondString); ok {
		return x.FDurationMicrosecondString
	}
	return nil
}

func (m *CodecTypeOneOf1) GetOneDuration6() isCodecTypeOneOf1_OneDuration6 {
	if m != nil {
		return m.OneDuration6
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFDurationMillisecondString() *durationpb.Duration {
	if x, ok := x.GetOneDuration6().(*CodecTypeOneOf1_FDurationMillisecondString); ok {
		return x.FDurationMillisecondString
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFDurationSecondString() *durationpb.Duration {
	if x, ok := x.GetOneDuration6().(*CodecTypeOneOf1_FDurationSecondString); ok {
		return x.FDurationSecondString
	}
	return nil
}

func (m *CodecTypeOneOf1) GetOneDuration7() isCodecTypeOneOf1_OneDuration7 {
	if m != nil {
		return m.OneDuration7
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFDurationMinuteString() *durationpb.Duration {
	if x, ok := x.GetOneDuration7().(*CodecTypeOneOf1_FDurationMinuteString); ok {
		return x.FDurationMinuteString
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFDurationHourString() *durationpb.Duration {
	if x, ok := x.GetOneDuration7().(*CodecTypeOneOf1_FDurationHourString); ok {
		return x.FDurationHourString
	}
	return nil
}

func (m *CodecTypeOneOf1) GetOneTimestamp1() isCodecTypeOneOf1_OneTimestamp1 {
	if m != nil {
		return m.OneTimestamp1
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFTimestampNative() *timestamppb.Timestamp {
	if x, ok := x.GetOneTimestamp1().(*CodecTypeOneOf1_FTimestampNative); ok {
		return x.FTimestampNative
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFTimestampTimeLayout() *timestamppb.Timestamp {
	if x, ok := x.GetOneTimestamp1().(*CodecTypeOneOf1_FTimestampTimeLayout); ok {
		return x.FTimestampTimeLayout
	}
	return nil
}

func (m *CodecTypeOneOf1) GetOneTimestamp2() isCodecTypeOneOf1_OneTimestamp2 {
	if m != nil {
		return m.OneTimestamp2
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFTimestampUnixNano() *timestamppb.Timestamp {
	if x, ok := x.GetOneTimestamp2().(*CodecTypeOneOf1_FTimestampUnixNano); ok {
		return x.FTimestampUnixNano
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFTimestampUnixMicro() *timestamppb.Timestamp {
	if x, ok := x.GetOneTimestamp2().(*CodecTypeOneOf1_FTimestampUnixMicro); ok {
		return x.FTimestampUnixMicro
	}
	return nil
}

func (m *CodecTypeOneOf1) GetOneTimestamp3() isCodecTypeOneOf1_OneTimestamp3 {
	if m != nil {
		return m.OneTimestamp3
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFTimestampUnixMilli() *timestamppb.Timestamp {
	if x, ok := x.GetOneTimestamp3().(*CodecTypeOneOf1_FTimestampUnixMilli); ok {
		return x.FTimestampUnixMilli
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFTimestampUnixSec() *timestamppb.Timestamp {
	if x, ok := x.GetOneTimestamp3().(*CodecTypeOneOf1_FTimestampUnixSec); ok {
		return x.FTimestampUnixSec
	}
	return nil
}

func (m *CodecTypeOneOf1) GetOneTimestamp4() isCodecTypeOneOf1_OneTimestamp4 {
	if m != nil {
		return m.OneTimestamp4
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFTimestampUnixNanoString() *timestamppb.Timestamp {
	if x, ok := x.GetOneTimestamp4().(*CodecTypeOneOf1_FTimestampUnixNanoString); ok {
		return x.FTimestampUnixNanoString
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFTimestampUnixMicroString() *timestamppb.Timestamp {
	if x, ok := x.GetOneTimestamp4().(*CodecTypeOneOf1_FTimestampUnixMicroString); ok {
		return x.FTimestampUnixMicroString
	}
	return nil
}

func (m *CodecTypeOneOf1) GetOneTimestamp5() isCodecTypeOneOf1_OneTimestamp5 {
	if m != nil {
		return m.OneTimestamp5
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFTimestampUnixMilliString() *timestamppb.Timestamp {
	if x, ok := x.GetOneTimestamp5().(*CodecTypeOneOf1_FTimestampUnixMilliString); ok {
		return x.FTimestampUnixMilliString
	}
	return nil
}

func (x *CodecTypeOneOf1) GetFTimestampUnixSecString() *timestamppb.Timestamp {
	if x, ok := x.GetOneTimestamp5().(*CodecTypeOneOf1_FTimestampUnixSecString); ok {
		return x.FTimestampUnixSecString
	}
	return nil
}

type isCodecTypeOneOf1_OneInt32 interface {
	isCodecTypeOneOf1_OneInt32()
}

type CodecTypeOneOf1_FInt32Numeric struct {
	FInt32Numeric int32 `protobuf:"varint,1,opt,name=f_int32_numeric,json=fInt32Numeric,proto3,oneof"`
}

type CodecTypeOneOf1_FInt32String struct {
	FInt32String int32 `protobuf:"varint,2,opt,name=f_int32_string,json=fInt32String,proto3,oneof"`
}

func (*CodecTypeOneOf1_FInt32Numeric) isCodecTypeOneOf1_OneInt32() {}

func (*CodecTypeOneOf1_FInt32String) isCodecTypeOneOf1_OneInt32() {}

type isCodecTypeOneOf1_OneInt64 interface {
	isCodecTypeOneOf1_OneInt64()
}

type CodecTypeOneOf1_FInt64Numeric struct {
	FInt64Numeric int64 `protobuf:"varint,3,opt,name=f_int64_numeric,json=fInt64Numeric,proto3,oneof"`
}

type CodecTypeOneOf1_FInt64String struct {
	FInt64String int64 `protobuf:"varint,4,opt,name=f_int64_string,json=fInt64String,proto3,oneof"`
}

func (*CodecTypeOneOf1_FInt64Numeric) isCodecTypeOneOf1_OneInt64() {}

func (*CodecTypeOneOf1_FInt64String) isCodecTypeOneOf1_OneInt64() {}

type isCodecTypeOneOf1_OneUint32 interface {
	isCodecTypeOneOf1_OneUint32()
}

type CodecTypeOneOf1_FUint32Numeric struct {
	FUint32Numeric uint32 `protobuf:"varint,5,opt,name=f_uint32_numeric,json=fUint32Numeric,proto3,oneof"`
}

type CodecTypeOneOf1_FUint32String struct {
	FUint32String uint32 `protobuf:"varint,6,opt,name=f_uint32_string,json=fUint32String,proto3,oneof"`
}

func (*CodecTypeOneOf1_FUint32Numeric) isCodecTypeOneOf1_OneUint32() {}

func (*CodecTypeOneOf1_FUint32String) isCodecTypeOneOf1_OneUint32() {}

type isCodecTypeOneOf1_OneUint64 interface {
	isCodecTypeOneOf1_OneUint64()
}

type CodecTypeOneOf1_FUint64Numeric struct {
	FUint64Numeric uint64 `protobuf:"varint,7,opt,name=f_uint64_numeric,json=fUint64Numeric,proto3,oneof"`
}

type CodecTypeOneOf1_FUint64String struct {
	FUint64String uint64 `protobuf:"varint,8,opt,name=f_uint64_string,json=fUint64String,proto3,oneof"`
}

func (*CodecTypeOneOf1_FUint64Numeric) isCodecTypeOneOf1_OneUint64() {}

func (*CodecTypeOneOf1_FUint64String) isCodecTypeOneOf1_OneUint64() {}

type isCodecTypeOneOf1_OneSInt32 interface {
	isCodecTypeOneOf1_OneSInt32()
}

type CodecTypeOneOf1_FSint32Numeric struct {
	FSint32Numeric int32 `protobuf:"zigzag32,9,opt,name=f_sint32_numeric,json=fSint32Numeric,proto3,oneof"`
}

type CodecTypeOneOf1_FSint32String struct {
	FSint32String int32 `protobuf:"zigzag32,10,opt,name=f_sint32_string,json=fSint32String,proto3,oneof"`
}

func (*CodecTypeOneOf1_FSint32Numeric) isCodecTypeOneOf1_OneSInt32() {}

func (*CodecTypeOneOf1_FSint32String) isCodecTypeOneOf1_OneSInt32() {}

type isCodecTypeOneOf1_OneSInt64 interface {
	isCodecTypeOneOf1_OneSInt64()
}

type CodecTypeOneOf1_FSint64Numeric struct {
	FSint64Numeric int64 `protobuf:"zigzag64,11,opt,name=f_sint64_numeric,json=fSint64Numeric,proto3,oneof"`
}

type CodecTypeOneOf1_FSint64String struct {
	FSint64String int64 `protobuf:"zigzag64,12,opt,name=f_sint64_string,json=fSint64String,proto3,oneof"`
}

func (*CodecTypeOneOf1_FSint64Numeric) isCodecTypeOneOf1_OneSInt64() {}

func (*CodecTypeOneOf1_FSint64String) isCodecTypeOneOf1_OneSInt64() {}

type isCodecTypeOneOf1_OneSFixed32 interface {
	isCodecTypeOneOf1_OneSFixed32()
}

type CodecTypeOneOf1_FSfixed32Numeric struct {
	FSfixed32Numeric int32 `protobuf:"fixed32,13,opt,name=f_sfixed32_numeric,json=fSfixed32Numeric,proto3,oneof"`
}

type CodecTypeOneOf1_FSfixed32String struct {
	FSfixed32String int32 `protobuf:"fixed32,14,opt,name=f_sfixed32_string,json=fSfixed32String,proto3,oneof"`
}

func (*CodecTypeOneOf1_FSfixed32Numeric) isCodecTypeOneOf1_OneSFixed32() {}

func (*CodecTypeOneOf1_FSfixed32String) isCodecTypeOneOf1_OneSFixed32() {}

type isCodecTypeOneOf1_OneSFixed64 interface {
	isCodecTypeOneOf1_OneSFixed64()
}

type CodecTypeOneOf1_FSfixed64Numeric struct {
	FSfixed64Numeric int64 `protobuf:"fixed64,15,opt,name=f_sfixed64_numeric,json=fSfixed64Numeric,proto3,oneof"`
}

type CodecTypeOneOf1_FSfixed64String struct {
	FSfixed64String int64 `protobuf:"fixed64,16,opt,name=f_sfixed64_string,json=fSfixed64String,proto3,oneof"`
}

func (*CodecTypeOneOf1_FSfixed64Numeric) isCodecTypeOneOf1_OneSFixed64() {}

func (*CodecTypeOneOf1_FSfixed64String) isCodecTypeOneOf1_OneSFixed64() {}

type isCodecTypeOneOf1_OneFixed32 interface {
	isCodecTypeOneOf1_OneFixed32()
}

type CodecTypeOneOf1_FFixed32Numeric struct {
	FFixed32Numeric uint32 `protobuf:"fixed32,17,opt,name=f_fixed32_numeric,json=fFixed32Numeric,proto3,oneof"`
}

type CodecTypeOneOf1_FFixed32String struct {
	FFixed32String uint32 `protobuf:"fixed32,18,opt,name=f_fixed32_string,json=fFixed32String,proto3,oneof"`
}

func (*CodecTypeOneOf1_FFixed32Numeric) isCodecTypeOneOf1_OneFixed32() {}

func (*CodecTypeOneOf1_FFixed32String) isCodecTypeOneOf1_OneFixed32() {}

type isCodecTypeOneOf1_OneFixed64 interface {
	isCodecTypeOneOf1_OneFixed64()
}

type CodecTypeOneOf1_FFixed64Numeric struct {
	FFixed64Numeric uint64 `protobuf:"fixed64,19,opt,name=f_fixed64_numeric,json=fFixed64Numeric,proto3,oneof"`
}

type CodecTypeOneOf1_FFixed64String struct {
	FFixed64String uint64 `protobuf:"fixed64,20,opt,name=f_fixed64_string,json=fFixed64String,proto3,oneof"`
}

func (*CodecTypeOneOf1_FFixed64Numeric) isCodecTypeOneOf1_OneFixed64() {}

func (*CodecTypeOneOf1_FFixed64String) isCodecTypeOneOf1_OneFixed64() {}

type isCodecTypeOneOf1_OneFloat interface {
	isCodecTypeOneOf1_OneFloat()
}

type CodecTypeOneOf1_FFloatNumeric struct {
	FFloatNumeric float32 `protobuf:"fixed32,21,opt,name=f_float_numeric,json=fFloatNumeric,proto3,oneof"`
}

type CodecTypeOneOf1_FFloatString struct {
	FFloatString float32 `protobuf:"fixed32,22,opt,name=f_float_string,json=fFloatString,proto3,oneof"`
}

func (*CodecTypeOneOf1_FFloatNumeric) isCodecTypeOneOf1_OneFloat() {}

func (*CodecTypeOneOf1_FFloatString) isCodecTypeOneOf1_OneFloat() {}

type isCodecTypeOneOf1_OneDouble interface {
	isCodecTypeOneOf1_OneDouble()
}

type CodecTypeOneOf1_FDoubleNumeric struct {
	FDoubleNumeric float64 `protobuf:"fixed64,23,opt,name=f_double_numeric,json=fDoubleNumeric,proto3,oneof"`
}

type CodecTypeOneOf1_FDoubleString struct {
	FDoubleString float64 `protobuf:"fixed64,24,opt,name=f_double_string,json=fDoubleString,proto3,oneof"`
}

func (*CodecTypeOneOf1_FDoubleNumeric) isCodecTypeOneOf1_OneDouble() {}

func (*CodecTypeOneOf1_FDoubleString) isCodecTypeOneOf1_OneDouble() {}

type isCodecTypeOneOf1_OneBool interface {
	isCodecTypeOneOf1_OneBool()
}

type CodecTypeOneOf1_FBoolBool struct {
	FBoolBool bool `protobuf:"varint,25,opt,name=f_bool_bool,json=fBoolBool,proto3,oneof"`
}

type CodecTypeOneOf1_FBoolString struct {
	FBoolString bool `protobuf:"varint,26,opt,name=f_bool_string,json=fBoolString,proto3,oneof"`
}

func (*CodecTypeOneOf1_FBoolBool) isCodecTypeOneOf1_OneBool() {}

func (*CodecTypeOneOf1_FBoolString) isCodecTypeOneOf1_OneBool() {}

type isCodecTypeOneOf1_OneEnum1 interface {
	isCodecTypeOneOf1_OneEnum1()
}

type CodecTypeOneOf1_FEnumNumeric struct {
	FEnumNumeric pbexternal.EnumNum1 `protobuf:"varint,31,opt,name=f_enum_numeric,json=fEnumNumeric,proto3,enum=external.EnumNum1,oneof"`
}

type CodecTypeOneOf1_FEnumString struct {
	FEnumString pbexternal.EnumNum1 `protobuf:"varint,32,opt,name=f_enum_string,json=fEnumString,proto3,enum=external.EnumNum1,oneof"`
}

func (*CodecTypeOneOf1_FEnumNumeric) isCodecTypeOneOf1_OneEnum1() {}

func (*CodecTypeOneOf1_FEnumString) isCodecTypeOneOf1_OneEnum1() {}

type isCodecTypeOneOf1_OneEnum2 interface {
	isCodecTypeOneOf1_OneEnum2()
}

type CodecTypeOneOf1_FEnumNumericString1 struct {
	FEnumNumericString1 pbexternal.EnumNum1 `protobuf:"varint,33,opt,name=f_enum_numeric_string1,json=fEnumNumericString1,proto3,enum=external.EnumNum1,oneof"`
}

type CodecTypeOneOf1_FEnumNumericString2 struct {
	FEnumNumericString2 pbexternal.EnumNum1 `protobuf:"varint,34,opt,name=f_enum_numeric_string2,json=fEnumNumericString2,proto3,enum=external.EnumNum1,oneof"`
}

func (*CodecTypeOneOf1_FEnumNumericString1) isCodecTypeOneOf1_OneEnum2() {}

func (*CodecTypeOneOf1_FEnumNumericString2) isCodecTypeOneOf1_OneEnum2() {}

type isCodecTypeOneOf1_OneAny1 interface {
	isCodecTypeOneOf1_OneAny1()
}

type CodecTypeOneOf1_FAnyNative struct {
	FAnyNative *anypb.Any `protobuf:"bytes,41,opt,name=f_any_native,json=fAnyNative,proto3,oneof"`
}

type CodecTypeOneOf1_FAnyProto struct {
	FAnyProto *anypb.Any `protobuf:"bytes,42,opt,name=f_any_proto,json=fAnyProto,proto3,oneof"`
}

func (*CodecTypeOneOf1_FAnyNative) isCodecTypeOneOf1_OneAny1() {}

func (*CodecTypeOneOf1_FAnyProto) isCodecTypeOneOf1_OneAny1() {}

type isCodecTypeOneOf1_OneDuration1 interface {
	isCodecTypeOneOf1_OneDuration1()
}

type CodecTypeOneOf1_FDurationNative struct {
	FDurationNative *durationpb.Duration `protobuf:"bytes,51,opt,name=f_duration_native,json=fDurationNative,proto3,oneof"`
}

type CodecTypeOneOf1_FDurationString struct {
	FDurationString *durationpb.Duration `protobuf:"bytes,52,opt,name=f_duration_string,json=fDurationString,proto3,oneof"`
}

func (*CodecTypeOneOf1_FDurationNative) isCodecTypeOneOf1_OneDuration1() {}

func (*CodecTypeOneOf1_FDurationString) isCodecTypeOneOf1_OneDuration1() {}

type isCodecTypeOneOf1_OneDuration2 interface {
	isCodecTypeOneOf1_OneDuration2()
}

type CodecTypeOneOf1_FDurationNanosecond struct {
	FDurationNanosecond *durationpb.Duration `protobuf:"bytes,53,opt,name=f_duration_nanosecond,json=fDurationNanosecond,proto3,oneof"`
}

type CodecTypeOneOf1_FDurationMicrosecond struct {
	FDurationMicrosecond *durationpb.Duration `protobuf:"bytes,54,opt,name=f_duration_microsecond,json=fDurationMicrosecond,proto3,oneof"`
}

func (*CodecTypeOneOf1_FDurationNanosecond) isCodecTypeOneOf1_OneDuration2() {}

func (*CodecTypeOneOf1_FDurationMicrosecond) isCodecTypeOneOf1_OneDuration2() {}

type isCodecTypeOneOf1_OneDuration3 interface {
	isCodecTypeOneOf1_OneDuration3()
}

type CodecTypeOneOf1_FDurationMillisecond struct {
	FDurationMillisecond *durationpb.Duration `protobuf:"bytes,55,opt,name=f_duration_millisecond,json=fDurationMillisecond,proto3,oneof"`
}

type CodecTypeOneOf1_FDurationSecond struct {
	FDurationSecond *durationpb.Duration `protobuf:"bytes,56,opt,name=f_duration_second,json=fDurationSecond,proto3,oneof"`
}

func (*CodecTypeOneOf1_FDurationMillisecond) isCodecTypeOneOf1_OneDuration3() {}

func (*CodecTypeOneOf1_FDurationSecond) isCodecTypeOneOf1_OneDuration3() {}

type isCodecTypeOneOf1_OneDuration4 interface {
	isCodecTypeOneOf1_OneDuration4()
}

type CodecTypeOneOf1_FDurationMinute struct {
	FDurationMinute *durationpb.Duration `protobuf:"bytes,57,opt,name=f_duration_minute,json=fDurationMinute,proto3,oneof"`
}

type CodecTypeOneOf1_FDurationHour struct {
	FDurationHour *durationpb.Duration `protobuf:"bytes,58,opt,name=f_duration_hour,json=fDurationHour,proto3,oneof"`
}

func (*CodecTypeOneOf1_FDurationMinute) isCodecTypeOneOf1_OneDuration4() {}

func (*CodecTypeOneOf1_FDurationHour) isCodecTypeOneOf1_OneDuration4() {}

type isCodecTypeOneOf1_OneDuration5 interface {
	isCodecTypeOneOf1_OneDuration5()
}

type CodecTypeOneOf1_FDurationNanosecondString struct {
	FDurationNanosecondString *durationpb.Duration `protobuf:"bytes,59,opt,name=f_duration_nanosecond_string,json=fDurationNanosecondString,proto3,oneof"`
}

type CodecTypeOneOf1_FDurationMicrosecondString struct {
	FDurationMicrosecondString *durationpb.Duration `protobuf:"bytes,60,opt,name=f_duration_microsecond_string,json=fDurationMicrosecondString,proto3,oneof"`
}

func (*CodecTypeOneOf1_FDurationNanosecondString) isCodecTypeOneOf1_OneDuration5() {}

func (*CodecTypeOneOf1_FDurationMicrosecondString) isCodecTypeOneOf1_OneDuration5() {}

type isCodecTypeOneOf1_OneDuration6 interface {
	isCodecTypeOneOf1_OneDuration6()
}

type CodecTypeOneOf1_FDurationMillisecondString struct {
	FDurationMillisecondString *durationpb.Duration `protobuf:"bytes,61,opt,name=f_duration_millisecond_string,json=fDurationMillisecondString,proto3,oneof"`
}

type CodecTypeOneOf1_FDurationSecondString struct {
	FDurationSecondString *durationpb.Duration `protobuf:"bytes,62,opt,name=f_duration_second_string,json=fDurationSecondString,proto3,oneof"`
}

func (*CodecTypeOneOf1_FDurationMillisecondString) isCodecTypeOneOf1_OneDuration6() {}

func (*CodecTypeOneOf1_FDurationSecondString) isCodecTypeOneOf1_OneDuration6() {}

type isCodecTypeOneOf1_OneDuration7 interface {
	isCodecTypeOneOf1_OneDuration7()
}

type CodecTypeOneOf1_FDurationMinuteString struct {
	FDurationMinuteString *durationpb.Duration `protobuf:"bytes,63,opt,name=f_duration_minute_string,json=fDurationMinuteString,proto3,oneof"`
}

type CodecTypeOneOf1_FDurationHourString struct {
	FDurationHourString *durationpb.Duration `protobuf:"bytes,64,opt,name=f_duration_hour_string,json=fDurationHourString,proto3,oneof"`
}

func (*CodecTypeOneOf1_FDurationMinuteString) isCodecTypeOneOf1_OneDuration7() {}

func (*CodecTypeOneOf1_FDurationHourString) isCodecTypeOneOf1_OneDuration7() {}

type isCodecTypeOneOf1_OneTimestamp1 interface {
	isCodecTypeOneOf1_OneTimestamp1()
}

type CodecTypeOneOf1_FTimestampNative struct {
	FTimestampNative *timestamppb.Timestamp `protobuf:"bytes,71,opt,name=f_timestamp_native,json=fTimestampNative,proto3,oneof"`
}

type CodecTypeOneOf1_FTimestampTimeLayout struct {
	FTimestampTimeLayout *timestamppb.Timestamp `protobuf:"bytes,72,opt,name=f_timestamp_time_layout,json=fTimestampTimeLayout,proto3,oneof"`
}

func (*CodecTypeOneOf1_FTimestampNative) isCodecTypeOneOf1_OneTimestamp1() {}

func (*CodecTypeOneOf1_FTimestampTimeLayout) isCodecTypeOneOf1_OneTimestamp1() {}

type isCodecTypeOneOf1_OneTimestamp2 interface {
	isCodecTypeOneOf1_OneTimestamp2()
}

type CodecTypeOneOf1_FTimestampUnixNano struct {
	FTimestampUnixNano *timestamppb.Timestamp `protobuf:"bytes,73,opt,name=f_timestamp_unix_nano,json=fTimestampUnixNano,proto3,oneof"`
}

type CodecTypeOneOf1_FTimestampUnixMicro struct {
	FTimestampUnixMicro *timestamppb.Timestamp `protobuf:"bytes,74,opt,name=f_timestamp_unix_micro,json=fTimestampUnixMicro,proto3,oneof"`
}

func (*CodecTypeOneOf1_FTimestampUnixNano) isCodecTypeOneOf1_OneTimestamp2() {}

func (*CodecTypeOneOf1_FTimestampUnixMicro) isCodecTypeOneOf1_OneTimestamp2() {}

type isCodecTypeOneOf1_OneTimestamp3 interface {
	isCodecTypeOneOf1_OneTimestamp3()
}

type CodecTypeOneOf1_FTimestampUnixMilli struct {
	FTimestampUnixMilli *timestamppb.Timestamp `protobuf:"bytes,75,opt,name=f_timestamp_unix_milli,json=fTimestampUnixMilli,proto3,oneof"`
}

type CodecTypeOneOf1_FTimestampUnixSec struct {
	FTimestampUnixSec *timestamppb.Timestamp `protobuf:"bytes,76,opt,name=f_timestamp_unix_sec,json=fTimestampUnixSec,proto3,oneof"`
}

func (*CodecTypeOneOf1_FTimestampUnixMilli) isCodecTypeOneOf1_OneTimestamp3() {}

func (*CodecTypeOneOf1_FTimestampUnixSec) isCodecTypeOneOf1_OneTimestamp3() {}

type isCodecTypeOneOf1_OneTimestamp4 interface {
	isCodecTypeOneOf1_OneTimestamp4()
}

type CodecTypeOneOf1_FTimestampUnixNanoString struct {
	FTimestampUnixNanoString *timestamppb.Timestamp `protobuf:"bytes,77,opt,name=f_timestamp_unix_nano_string,json=fTimestampUnixNanoString,proto3,oneof"`
}

type CodecTypeOneOf1_FTimestampUnixMicroString struct {
	FTimestampUnixMicroString *timestamppb.Timestamp `protobuf:"bytes,78,opt,name=f_timestamp_unix_micro_string,json=fTimestampUnixMicroString,proto3,oneof"`
}

func (*CodecTypeOneOf1_FTimestampUnixNanoString) isCodecTypeOneOf1_OneTimestamp4() {}

func (*CodecTypeOneOf1_FTimestampUnixMicroString) isCodecTypeOneOf1_OneTimestamp4() {}

type isCodecTypeOneOf1_OneTimestamp5 interface {
	isCodecTypeOneOf1_OneTimestamp5()
}

type CodecTypeOneOf1_FTimestampUnixMilliString struct {
	FTimestampUnixMilliString *timestamppb.Timestamp `protobuf:"bytes,79,opt,name=f_timestamp_unix_milli_string,json=fTimestampUnixMilliString,proto3,oneof"`
}

type CodecTypeOneOf1_FTimestampUnixSecString struct {
	FTimestampUnixSecString *timestamppb.Timestamp `protobuf:"bytes,80,opt,name=f_timestamp_unix_sec_string,json=fTimestampUnixSecString,proto3,oneof"`
}

func (*CodecTypeOneOf1_FTimestampUnixMilliString) isCodecTypeOneOf1_OneTimestamp5() {}

func (*CodecTypeOneOf1_FTimestampUnixSecString) isCodecTypeOneOf1_OneTimestamp5() {}

var File_tests_proto_cases_format_codec_type_oneof1_proto protoreflect.FileDescriptor

var file_tests_proto_cases_format_codec_type_oneof1_proto_rawDesc = []byte{
	0x0a, 0x30, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x29, 0x0a, 0x0f,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x31, 0x12,
	0x34, 0x0a, 0x0f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04,
	0x0a, 0x02, 0x08, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x32, 0x0a, 0x0e, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x8a,
	0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x0a, 0x02, 0x08, 0x02, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x0f, 0x66, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x12, 0x02, 0x08, 0x01, 0x48, 0x01,
	0x52, 0x0d, 0x66, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12,
	0x32, 0x0a, 0x0e, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x12,
	0x02, 0x08, 0x02, 0x48, 0x01, 0x52, 0x0c, 0x66, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x10, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x8a,
	0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x3a, 0x02, 0x08, 0x01, 0x48, 0x02, 0x52, 0x0e, 0x66, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x34, 0x0a, 0x0f, 0x66,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x3a, 0x02, 0x08, 0x02,
	0x48, 0x02, 0x52, 0x0d, 0x66, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x36, 0x0a, 0x10, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x8a, 0xa2, 0x1f,
	0x06, 0x5a, 0x04, 0x42, 0x02, 0x08, 0x01, 0x48, 0x03, 0x52, 0x0e, 0x66, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x34, 0x0a, 0x0f, 0x66, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x42, 0x02, 0x08, 0x02, 0x48, 0x03,
	0x52, 0x0d, 0x66, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x36, 0x0a, 0x10, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a,
	0x04, 0x1a, 0x02, 0x08, 0x01, 0x48, 0x04, 0x52, 0x0e, 0x66, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x34, 0x0a, 0x0f, 0x66, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11,
	0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x1a, 0x02, 0x08, 0x02, 0x48, 0x04, 0x52, 0x0d,
	0x66, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a,
	0x10, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x22,
	0x02, 0x08, 0x01, 0x48, 0x05, 0x52, 0x0e, 0x66, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x34, 0x0a, 0x0f, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x12, 0x42, 0x0a,
	0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x22, 0x02, 0x08, 0x02, 0x48, 0x05, 0x52, 0x0d, 0x66, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x12, 0x66,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x2a,
	0x02, 0x08, 0x01, 0x48, 0x06, 0x52, 0x10, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x38, 0x0a, 0x11, 0x66, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0f, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x2a, 0x02, 0x08, 0x02, 0x48, 0x06,
	0x52, 0x0f, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x3a, 0x0a, 0x12, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0a, 0x8a,
	0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x32, 0x02, 0x08, 0x01, 0x48, 0x07, 0x52, 0x10, 0x66, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x38, 0x0a,
	0x11, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04,
	0x32, 0x02, 0x08, 0x02, 0x48, 0x07, 0x52, 0x0f, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x11, 0x66, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x07, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x4a, 0x02, 0x08, 0x01, 0x48, 0x08,
	0x52, 0x0f, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x12, 0x36, 0x0a, 0x10, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x07, 0x42, 0x0a, 0x8a, 0xa2, 0x1f,
	0x06, 0x5a, 0x04, 0x4a, 0x02, 0x08, 0x02, 0x48, 0x08, 0x52, 0x0e, 0x66, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x11, 0x66, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x06, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x52, 0x02, 0x08, 0x01,
	0x48, 0x09, 0x52, 0x0f, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x12, 0x36, 0x0a, 0x10, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x06, 0x42, 0x0a, 0x8a,
	0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x52, 0x02, 0x08, 0x02, 0x48, 0x09, 0x52, 0x0e, 0x66, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x0f, 0x66,
	0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x02, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x5a, 0x02, 0x08, 0x01,
	0x48, 0x0a, 0x52, 0x0d, 0x66, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x12, 0x32, 0x0a, 0x0e, 0x66, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a,
	0x04, 0x5a, 0x02, 0x08, 0x02, 0x48, 0x0a, 0x52, 0x0c, 0x66, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x10, 0x66, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x62, 0x02, 0x08, 0x01, 0x48, 0x0b, 0x52, 0x0e, 0x66,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x34, 0x0a,
	0x0f, 0x66, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x62, 0x02,
	0x08, 0x02, 0x48, 0x0b, 0x52, 0x0d, 0x66, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x0b, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x62, 0x6f,
	0x6f, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04,
	0x6a, 0x02, 0x08, 0x01, 0x48, 0x0c, 0x52, 0x09, 0x66, 0x42, 0x6f, 0x6f, 0x6c, 0x42, 0x6f, 0x6f,
	0x6c, 0x12, 0x30, 0x0a, 0x0d, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04,
	0x6a, 0x02, 0x08, 0x02, 0x48, 0x0c, 0x52, 0x0b, 0x66, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x0e, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4e, 0x75, 0x6d, 0x31, 0x42,
	0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x72, 0x02, 0x08, 0x01, 0x48, 0x0d, 0x52, 0x0c, 0x66,
	0x45, 0x6e, 0x75, 0x6d, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x44, 0x0a, 0x0d, 0x66,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x4e, 0x75, 0x6d, 0x31, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x72, 0x02,
	0x08, 0x03, 0x48, 0x0d, 0x52, 0x0b, 0x66, 0x45, 0x6e, 0x75, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x55, 0x0a, 0x16, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x4e, 0x75, 0x6d, 0x31, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x72, 0x02, 0x08,
	0x02, 0x48, 0x0e, 0x52, 0x13, 0x66, 0x45, 0x6e, 0x75, 0x6d, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x55, 0x0a, 0x16, 0x66, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x32, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4e, 0x75, 0x6d, 0x31, 0x42, 0x0a, 0x8a, 0xa2,
	0x1f, 0x06, 0x5a, 0x04, 0x72, 0x02, 0x08, 0x02, 0x48, 0x0e, 0x52, 0x13, 0x66, 0x45, 0x6e, 0x75,
	0x6d, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x12,
	0x45, 0x0a, 0x0c, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x0b, 0x8a, 0xa2, 0x1f,
	0x07, 0x5a, 0x05, 0xaa, 0x01, 0x02, 0x08, 0x01, 0x48, 0x0f, 0x52, 0x0a, 0x66, 0x41, 0x6e, 0x79,
	0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xaa, 0x01, 0x02, 0x08, 0x02, 0x48, 0x0f,
	0x52, 0x09, 0x66, 0x41, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a, 0x11, 0x66,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x48, 0x10,
	0x52, 0x0f, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x54, 0x0a, 0x11, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xb2,
	0x01, 0x02, 0x08, 0x02, 0x48, 0x10, 0x52, 0x0f, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x5c, 0x0a, 0x15, 0x66, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x03, 0x48, 0x11,
	0x52, 0x13, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6e, 0x6f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x5e, 0x0a, 0x16, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x05, 0x48, 0x11, 0x52,
	0x14, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x5e, 0x0a, 0x16, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x07, 0x48, 0x12, 0x52,
	0x14, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x54, 0x0a, 0x11, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x8a, 0xa2, 0x1f,
	0x07, 0x5a, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x09, 0x48, 0x12, 0x52, 0x0f, 0x66, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x54, 0x0a, 0x11, 0x66,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x0b, 0x48, 0x13,
	0x52, 0x0f, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x12, 0x50, 0x0a, 0x0f, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x68, 0x6f, 0x75, 0x72, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xb2, 0x01, 0x02,
	0x08, 0x0d, 0x48, 0x13, 0x52, 0x0d, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x6f, 0x75, 0x72, 0x12, 0x69, 0x0a, 0x1c, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xb2, 0x01, 0x02, 0x08,
	0x04, 0x48, 0x14, 0x52, 0x19, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x6b,
	0x0a, 0x1d, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x06, 0x48, 0x14, 0x52,
	0x1a, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x6b, 0x0a, 0x1d, 0x66,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x8a,
	0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x08, 0x48, 0x15, 0x52, 0x1a, 0x66, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x61, 0x0a, 0x18, 0x66, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xb2, 0x01, 0x02,
	0x08, 0x0a, 0x48, 0x15, 0x52, 0x15, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x61, 0x0a, 0x18, 0x66,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05,
	0xb2, 0x01, 0x02, 0x08, 0x0c, 0x48, 0x16, 0x52, 0x15, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x5d,
	0x0a, 0x16, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x75,
	0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a,
	0x05, 0xb2, 0x01, 0x02, 0x08, 0x0e, 0x48, 0x16, 0x52, 0x13, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x57, 0x0a,
	0x12, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xba, 0x01, 0x02,
	0x08, 0x01, 0x48, 0x17, 0x52, 0x10, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x7d, 0x0a, 0x17, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x28, 0x8a, 0xa2, 0x1f, 0x24, 0x5a, 0x22, 0xba, 0x01, 0x1f, 0x08, 0x02,
	0x12, 0x1b, 0x0a, 0x19, 0x32, 0x30, 0x30, 0x36, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x32, 0x54, 0x31,
	0x35, 0x3a, 0x30, 0x34, 0x3a, 0x30, 0x35, 0x5a, 0x30, 0x37, 0x3a, 0x30, 0x30, 0x48, 0x17, 0x52,
	0x14, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x4c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x5c, 0x0a, 0x15, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x49,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xba, 0x01, 0x02, 0x08, 0x03, 0x48, 0x18, 0x52,
	0x12, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x4e,
	0x61, 0x6e, 0x6f, 0x12, 0x5e, 0x0a, 0x16, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x18, 0x4a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xba, 0x01, 0x02, 0x08, 0x05, 0x48, 0x18, 0x52, 0x13,
	0x66, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x12, 0x5e, 0x0a, 0x16, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x18, 0x4b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xba, 0x01, 0x02, 0x08, 0x07, 0x48, 0x19, 0x52, 0x13,
	0x66, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x4d, 0x69,
	0x6c, 0x6c, 0x69, 0x12, 0x5a, 0x0a, 0x14, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x4c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0x8a,
	0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xba, 0x01, 0x02, 0x08, 0x09, 0x48, 0x19, 0x52, 0x11, 0x66, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x53, 0x65, 0x63, 0x12,
	0x69, 0x0a, 0x1c, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75,
	0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xba, 0x01, 0x02, 0x08, 0x04, 0x48, 0x1a,
	0x52, 0x18, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78,
	0x4e, 0x61, 0x6e, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x6b, 0x0a, 0x1d, 0x66, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x4e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0x8a,
	0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xba, 0x01, 0x02, 0x08, 0x06, 0x48, 0x1a, 0x52, 0x19, 0x66, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x6b, 0x0a, 0x1d, 0x66, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6d, 0x69, 0x6c, 0x6c,
	0x69, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07,
	0x5a, 0x05, 0xba, 0x01, 0x02, 0x08, 0x08, 0x48, 0x1b, 0x52, 0x19, 0x66, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x67, 0x0a, 0x1b, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xba, 0x01, 0x02,
	0x08, 0x0a, 0x48, 0x1b, 0x52, 0x17, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x55, 0x6e, 0x69, 0x78, 0x53, 0x65, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x1d, 0x0a,
	0x08, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x11, 0x92, 0xa2, 0x1f, 0x0d, 0x0a,
	0x09, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x20, 0x01, 0x42, 0x1d, 0x0a, 0x08,
	0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x11, 0x92, 0xa2, 0x1f, 0x0d, 0x0a, 0x09,
	0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x20, 0x00, 0x42, 0x1f, 0x0a, 0x09, 0x4f,
	0x6e, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x12, 0x92, 0xa2, 0x1f, 0x0e, 0x0a, 0x0a,
	0x6f, 0x6e, 0x65, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x20, 0x01, 0x42, 0x1f, 0x0a, 0x09,
	0x4f, 0x6e, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x12, 0x92, 0xa2, 0x1f, 0x0e, 0x0a,
	0x0a, 0x6f, 0x6e, 0x65, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x20, 0x00, 0x42, 0x1f, 0x0a,
	0x09, 0x4f, 0x6e, 0x65, 0x53, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x12, 0x92, 0xa2, 0x1f, 0x0e,
	0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x20, 0x01, 0x42, 0x1f,
	0x0a, 0x09, 0x4f, 0x6e, 0x65, 0x53, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x12, 0x92, 0xa2, 0x1f,
	0x0e, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x20, 0x00, 0x42,
	0x23, 0x0a, 0x0b, 0x4f, 0x6e, 0x65, 0x53, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x14,
	0x92, 0xa2, 0x1f, 0x10, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x20, 0x01, 0x42, 0x23, 0x0a, 0x0b, 0x4f, 0x6e, 0x65, 0x53, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x12, 0x14, 0x92, 0xa2, 0x1f, 0x10, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x5f, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x20, 0x00, 0x42, 0x21, 0x0a, 0x0a, 0x4f, 0x6e, 0x65,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x13, 0x92, 0xa2, 0x1f, 0x0f, 0x0a, 0x0b, 0x6f,
	0x6e, 0x65, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x20, 0x01, 0x42, 0x21, 0x0a, 0x0a,
	0x4f, 0x6e, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x13, 0x92, 0xa2, 0x1f, 0x0f,
	0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x20, 0x00, 0x42,
	0x1d, 0x0a, 0x08, 0x4f, 0x6e, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x11, 0x92, 0xa2, 0x1f,
	0x0d, 0x0a, 0x09, 0x6f, 0x6e, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x01, 0x42, 0x1f,
	0x0a, 0x09, 0x4f, 0x6e, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x92, 0xa2, 0x1f,
	0x0e, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x20, 0x00, 0x42,
	0x1b, 0x0a, 0x07, 0x4f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x10, 0x92, 0xa2, 0x1f, 0x0c,
	0x0a, 0x08, 0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x01, 0x42, 0x1d, 0x0a, 0x08,
	0x4f, 0x6e, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x12, 0x11, 0x92, 0xa2, 0x1f, 0x0d, 0x0a, 0x09,
	0x6f, 0x6e, 0x65, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x20, 0x00, 0x42, 0x1d, 0x0a, 0x08, 0x4f,
	0x6e, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x12, 0x11, 0x92, 0xa2, 0x1f, 0x0d, 0x0a, 0x09, 0x6f,
	0x6e, 0x65, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x32, 0x20, 0x01, 0x42, 0x1b, 0x0a, 0x07, 0x4f, 0x6e,
	0x65, 0x41, 0x6e, 0x79, 0x31, 0x12, 0x10, 0x92, 0xa2, 0x1f, 0x0c, 0x0a, 0x08, 0x6f, 0x6e, 0x65,
	0x5f, 0x61, 0x6e, 0x79, 0x31, 0x20, 0x01, 0x42, 0x25, 0x0a, 0x0c, 0x4f, 0x6e, 0x65, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x12, 0x15, 0x92, 0xa2, 0x1f, 0x11, 0x0a, 0x0d, 0x6f,
	0x6e, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x20, 0x00, 0x42, 0x25,
	0x0a, 0x0c, 0x4f, 0x6e, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0x15,
	0x92, 0xa2, 0x1f, 0x11, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x32, 0x20, 0x01, 0x42, 0x25, 0x0a, 0x0c, 0x4f, 0x6e, 0x65, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x33, 0x12, 0x15, 0x92, 0xa2, 0x1f, 0x11, 0x0a, 0x0d, 0x6f, 0x6e, 0x65,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x33, 0x20, 0x00, 0x42, 0x25, 0x0a, 0x0c,
	0x4f, 0x6e, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x12, 0x15, 0x92, 0xa2,
	0x1f, 0x11, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x34, 0x20, 0x01, 0x42, 0x25, 0x0a, 0x0c, 0x4f, 0x6e, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x35, 0x12, 0x15, 0x92, 0xa2, 0x1f, 0x11, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x35, 0x20, 0x00, 0x42, 0x25, 0x0a, 0x0c, 0x4f, 0x6e,
	0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x12, 0x15, 0x92, 0xa2, 0x1f, 0x11,
	0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x20,
	0x01, 0x42, 0x25, 0x0a, 0x0c, 0x4f, 0x6e, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x37, 0x12, 0x15, 0x92, 0xa2, 0x1f, 0x11, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x37, 0x20, 0x00, 0x42, 0x27, 0x0a, 0x0d, 0x4f, 0x6e, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x31, 0x12, 0x16, 0x92, 0xa2, 0x1f, 0x12, 0x0a,
	0x0e, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x31, 0x20,
	0x00, 0x42, 0x27, 0x0a, 0x0d, 0x4f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x32, 0x12, 0x16, 0x92, 0xa2, 0x1f, 0x12, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x32, 0x20, 0x01, 0x42, 0x27, 0x0a, 0x0d, 0x4f, 0x6e,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x33, 0x12, 0x16, 0x92, 0xa2, 0x1f,
	0x12, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x33, 0x20, 0x00, 0x42, 0x27, 0x0a, 0x0d, 0x4f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x34, 0x12, 0x16, 0x92, 0xa2, 0x1f, 0x12, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x34, 0x20, 0x01, 0x42, 0x27, 0x0a, 0x0d,
	0x4f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x35, 0x12, 0x16, 0x92,
	0xa2, 0x1f, 0x12, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x35, 0x20, 0x00, 0x42, 0x17, 0x5a, 0x15, 0x78, 0x67, 0x6f, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x62, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tests_proto_cases_format_codec_type_oneof1_proto_rawDescOnce sync.Once
	file_tests_proto_cases_format_codec_type_oneof1_proto_rawDescData = file_tests_proto_cases_format_codec_type_oneof1_proto_rawDesc
)

func file_tests_proto_cases_format_codec_type_oneof1_proto_rawDescGZIP() []byte {
	file_tests_proto_cases_format_codec_type_oneof1_proto_rawDescOnce.Do(func() {
		file_tests_proto_cases_format_codec_type_oneof1_proto_rawDescData = protoimpl.X.CompressGZIP(file_tests_proto_cases_format_codec_type_oneof1_proto_rawDescData)
	})
	return file_tests_proto_cases_format_codec_type_oneof1_proto_rawDescData
}

var file_tests_proto_cases_format_codec_type_oneof1_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_tests_proto_cases_format_codec_type_oneof1_proto_goTypes = []interface{}{
	(*CodecTypeOneOf1)(nil),       // 0: format.CodecTypeOneOf1
	(pbexternal.EnumNum1)(0),      // 1: external.EnumNum1
	(*anypb.Any)(nil),             // 2: google.protobuf.Any
	(*durationpb.Duration)(nil),   // 3: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_tests_proto_cases_format_codec_type_oneof1_proto_depIdxs = []int32{
	1,  // 0: format.CodecTypeOneOf1.f_enum_numeric:type_name -> external.EnumNum1
	1,  // 1: format.CodecTypeOneOf1.f_enum_string:type_name -> external.EnumNum1
	1,  // 2: format.CodecTypeOneOf1.f_enum_numeric_string1:type_name -> external.EnumNum1
	1,  // 3: format.CodecTypeOneOf1.f_enum_numeric_string2:type_name -> external.EnumNum1
	2,  // 4: format.CodecTypeOneOf1.f_any_native:type_name -> google.protobuf.Any
	2,  // 5: format.CodecTypeOneOf1.f_any_proto:type_name -> google.protobuf.Any
	3,  // 6: format.CodecTypeOneOf1.f_duration_native:type_name -> google.protobuf.Duration
	3,  // 7: format.CodecTypeOneOf1.f_duration_string:type_name -> google.protobuf.Duration
	3,  // 8: format.CodecTypeOneOf1.f_duration_nanosecond:type_name -> google.protobuf.Duration
	3,  // 9: format.CodecTypeOneOf1.f_duration_microsecond:type_name -> google.protobuf.Duration
	3,  // 10: format.CodecTypeOneOf1.f_duration_millisecond:type_name -> google.protobuf.Duration
	3,  // 11: format.CodecTypeOneOf1.f_duration_second:type_name -> google.protobuf.Duration
	3,  // 12: format.CodecTypeOneOf1.f_duration_minute:type_name -> google.protobuf.Duration
	3,  // 13: format.CodecTypeOneOf1.f_duration_hour:type_name -> google.protobuf.Duration
	3,  // 14: format.CodecTypeOneOf1.f_duration_nanosecond_string:type_name -> google.protobuf.Duration
	3,  // 15: format.CodecTypeOneOf1.f_duration_microsecond_string:type_name -> google.protobuf.Duration
	3,  // 16: format.CodecTypeOneOf1.f_duration_millisecond_string:type_name -> google.protobuf.Duration
	3,  // 17: format.CodecTypeOneOf1.f_duration_second_string:type_name -> google.protobuf.Duration
	3,  // 18: format.CodecTypeOneOf1.f_duration_minute_string:type_name -> google.protobuf.Duration
	3,  // 19: format.CodecTypeOneOf1.f_duration_hour_string:type_name -> google.protobuf.Duration
	4,  // 20: format.CodecTypeOneOf1.f_timestamp_native:type_name -> google.protobuf.Timestamp
	4,  // 21: format.CodecTypeOneOf1.f_timestamp_time_layout:type_name -> google.protobuf.Timestamp
	4,  // 22: format.CodecTypeOneOf1.f_timestamp_unix_nano:type_name -> google.protobuf.Timestamp
	4,  // 23: format.CodecTypeOneOf1.f_timestamp_unix_micro:type_name -> google.protobuf.Timestamp
	4,  // 24: format.CodecTypeOneOf1.f_timestamp_unix_milli:type_name -> google.protobuf.Timestamp
	4,  // 25: format.CodecTypeOneOf1.f_timestamp_unix_sec:type_name -> google.protobuf.Timestamp
	4,  // 26: format.CodecTypeOneOf1.f_timestamp_unix_nano_string:type_name -> google.protobuf.Timestamp
	4,  // 27: format.CodecTypeOneOf1.f_timestamp_unix_micro_string:type_name -> google.protobuf.Timestamp
	4,  // 28: format.CodecTypeOneOf1.f_timestamp_unix_milli_string:type_name -> google.protobuf.Timestamp
	4,  // 29: format.CodecTypeOneOf1.f_timestamp_unix_sec_string:type_name -> google.protobuf.Timestamp
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_tests_proto_cases_format_codec_type_oneof1_proto_init() }
func file_tests_proto_cases_format_codec_type_oneof1_proto_init() {
	if File_tests_proto_cases_format_codec_type_oneof1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tests_proto_cases_format_codec_type_oneof1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodecTypeOneOf1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tests_proto_cases_format_codec_type_oneof1_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CodecTypeOneOf1_FInt32Numeric)(nil),
		(*CodecTypeOneOf1_FInt32String)(nil),
		(*CodecTypeOneOf1_FInt64Numeric)(nil),
		(*CodecTypeOneOf1_FInt64String)(nil),
		(*CodecTypeOneOf1_FUint32Numeric)(nil),
		(*CodecTypeOneOf1_FUint32String)(nil),
		(*CodecTypeOneOf1_FUint64Numeric)(nil),
		(*CodecTypeOneOf1_FUint64String)(nil),
		(*CodecTypeOneOf1_FSint32Numeric)(nil),
		(*CodecTypeOneOf1_FSint32String)(nil),
		(*CodecTypeOneOf1_FSint64Numeric)(nil),
		(*CodecTypeOneOf1_FSint64String)(nil),
		(*CodecTypeOneOf1_FSfixed32Numeric)(nil),
		(*CodecTypeOneOf1_FSfixed32String)(nil),
		(*CodecTypeOneOf1_FSfixed64Numeric)(nil),
		(*CodecTypeOneOf1_FSfixed64String)(nil),
		(*CodecTypeOneOf1_FFixed32Numeric)(nil),
		(*CodecTypeOneOf1_FFixed32String)(nil),
		(*CodecTypeOneOf1_FFixed64Numeric)(nil),
		(*CodecTypeOneOf1_FFixed64String)(nil),
		(*CodecTypeOneOf1_FFloatNumeric)(nil),
		(*CodecTypeOneOf1_FFloatString)(nil),
		(*CodecTypeOneOf1_FDoubleNumeric)(nil),
		(*CodecTypeOneOf1_FDoubleString)(nil),
		(*CodecTypeOneOf1_FBoolBool)(nil),
		(*CodecTypeOneOf1_FBoolString)(nil),
		(*CodecTypeOneOf1_FEnumNumeric)(nil),
		(*CodecTypeOneOf1_FEnumString)(nil),
		(*CodecTypeOneOf1_FEnumNumericString1)(nil),
		(*CodecTypeOneOf1_FEnumNumericString2)(nil),
		(*CodecTypeOneOf1_FAnyNative)(nil),
		(*CodecTypeOneOf1_FAnyProto)(nil),
		(*CodecTypeOneOf1_FDurationNative)(nil),
		(*CodecTypeOneOf1_FDurationString)(nil),
		(*CodecTypeOneOf1_FDurationNanosecond)(nil),
		(*CodecTypeOneOf1_FDurationMicrosecond)(nil),
		(*CodecTypeOneOf1_FDurationMillisecond)(nil),
		(*CodecTypeOneOf1_FDurationSecond)(nil),
		(*CodecTypeOneOf1_FDurationMinute)(nil),
		(*CodecTypeOneOf1_FDurationHour)(nil),
		(*CodecTypeOneOf1_FDurationNanosecondString)(nil),
		(*CodecTypeOneOf1_FDurationMicrosecondString)(nil),
		(*CodecTypeOneOf1_FDurationMillisecondString)(nil),
		(*CodecTypeOneOf1_FDurationSecondString)(nil),
		(*CodecTypeOneOf1_FDurationMinuteString)(nil),
		(*CodecTypeOneOf1_FDurationHourString)(nil),
		(*CodecTypeOneOf1_FTimestampNative)(nil),
		(*CodecTypeOneOf1_FTimestampTimeLayout)(nil),
		(*CodecTypeOneOf1_FTimestampUnixNano)(nil),
		(*CodecTypeOneOf1_FTimestampUnixMicro)(nil),
		(*CodecTypeOneOf1_FTimestampUnixMilli)(nil),
		(*CodecTypeOneOf1_FTimestampUnixSec)(nil),
		(*CodecTypeOneOf1_FTimestampUnixNanoString)(nil),
		(*CodecTypeOneOf1_FTimestampUnixMicroString)(nil),
		(*CodecTypeOneOf1_FTimestampUnixMilliString)(nil),
		(*CodecTypeOneOf1_FTimestampUnixSecString)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tests_proto_cases_format_codec_type_oneof1_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tests_proto_cases_format_codec_type_oneof1_proto_goTypes,
		DependencyIndexes: file_tests_proto_cases_format_codec_type_oneof1_proto_depIdxs,
		MessageInfos:      file_tests_proto_cases_format_codec_type_oneof1_proto_msgTypes,
	}.Build()
	File_tests_proto_cases_format_codec_type_oneof1_proto = out.File
	file_tests_proto_cases_format_codec_type_oneof1_proto_rawDesc = nil
	file_tests_proto_cases_format_codec_type_oneof1_proto_goTypes = nil
	file_tests_proto_cases_format_codec_type_oneof1_proto_depIdxs = nil
}
