// Code generated by protoc-gen-gojson. DO NOT EDIT.
// versions:
// 		protoc-gen-gojson 0.0.1
// source: tests/proto/cases/format/codec_map_key_sfixed64.proto

package pbformat

import (
	errors "errors"
	_ "github.com/yu31/protoc-plugin-json/xgo/pb/pbjson"
	jsondecoder "github.com/yu31/protoc-plugin-json/xgo/pkg/jsondecoder"
	jsonencoder "github.com/yu31/protoc-plugin-json/xgo/pkg/jsonencoder"
	_ "github.com/yu31/protoc-plugin-json/xgo/tests/pb/pbexternal"
	_ "google.golang.org/protobuf/types/known/anypb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
)

// MarshalJSON implements interface json.Marshaler for proto message CodecMapKeySFixed64 in file tests/proto/cases/format/codec_map_key_sfixed64.proto
func (x *CodecMapKeySFixed64) MarshalJSON() ([]byte, error) {
	if x == nil {
		return []byte("null"), nil
	}
	enc := jsonencoder.New(49344)
	enc.AppendObjectBegin() // Add begin JSON identifier

	jsonencoder.AppendMapI64I32(enc, "f_int32_key_unset_val_unset", x.FInt32KeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapI64I32(enc, "f_int32_key_numeric_val_numeric", x.FInt32KeyNumericValNumeric, false, false, false)
	jsonencoder.AppendMapI64I32(enc, "f_int32_key_numeric_val_string", x.FInt32KeyNumericValString, false, false, true)
	jsonencoder.AppendMapI64I32(enc, "f_int32_key_string_val_numeric", x.FInt32KeyStringValNumeric, false, true, false)
	jsonencoder.AppendMapI64I32(enc, "f_int32_key_string_val_string", x.FInt32KeyStringValString, false, true, true)
	jsonencoder.AppendMapI64I64(enc, "f_int64_key_unset_val_unset", x.FInt64KeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapI64I64(enc, "f_int64_key_numeric_val_numeric", x.FInt64KeyNumericValNumeric, false, false, false)
	jsonencoder.AppendMapI64I64(enc, "f_int64_key_numeric_val_string", x.FInt64KeyNumericValString, false, false, true)
	jsonencoder.AppendMapI64I64(enc, "f_int64_key_string_val_numeric", x.FInt64KeyStringValNumeric, false, true, false)
	jsonencoder.AppendMapI64I64(enc, "f_int64_key_string_val_string", x.FInt64KeyStringValString, false, true, true)
	jsonencoder.AppendMapI64U32(enc, "f_uint32_key_unset_val_unset", x.FUint32KeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapI64U32(enc, "f_uint32_key_numeric_val_numeric", x.FUint32KeyNumericValNumeric, false, false, false)
	jsonencoder.AppendMapI64U32(enc, "f_uint32_key_numeric_val_string", x.FUint32KeyNumericValString, false, false, true)
	jsonencoder.AppendMapI64U32(enc, "f_uint32_key_string_val_numeric", x.FUint32KeyStringValNumeric, false, true, false)
	jsonencoder.AppendMapI64U32(enc, "f_uint32_key_string_val_string", x.FUint32KeyStringValString, false, true, true)
	jsonencoder.AppendMapI64U64(enc, "f_uint64_key_unset_val_unset", x.FUint64KeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapI64U64(enc, "f_uint64_key_numeric_val_numeric", x.FUint64KeyNumericValNumeric, false, false, false)
	jsonencoder.AppendMapI64U64(enc, "f_uint64_key_numeric_val_string", x.FUint64KeyNumericValString, false, false, true)
	jsonencoder.AppendMapI64U64(enc, "f_uint64_key_string_val_numeric", x.FUint64KeyStringValNumeric, false, true, false)
	jsonencoder.AppendMapI64U64(enc, "f_uint64_key_string_val_string", x.FUint64KeyStringValString, false, true, true)
	jsonencoder.AppendMapI64I32(enc, "f_sint32_key_unset_val_unset", x.FSint32KeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapI64I32(enc, "f_sint32_key_numeric_val_numeric", x.FSint32KeyNumericValNumeric, false, false, false)
	jsonencoder.AppendMapI64I32(enc, "f_sint32_key_numeric_val_string", x.FSint32KeyNumericValString, false, false, true)
	jsonencoder.AppendMapI64I32(enc, "f_sint32_key_string_val_numeric", x.FSint32KeyStringValNumeric, false, true, false)
	jsonencoder.AppendMapI64I32(enc, "f_sint32_key_string_val_string", x.FSint32KeyStringValString, false, true, true)
	jsonencoder.AppendMapI64I64(enc, "f_sint64_key_unset_val_unset", x.FSint64KeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapI64I64(enc, "f_sint64_key_numeric_val_numeric", x.FSint64KeyNumericValNumeric, false, false, false)
	jsonencoder.AppendMapI64I64(enc, "f_sint64_key_numeric_val_string", x.FSint64KeyNumericValString, false, false, true)
	jsonencoder.AppendMapI64I64(enc, "f_sint64_key_string_val_numeric", x.FSint64KeyStringValNumeric, false, true, false)
	jsonencoder.AppendMapI64I64(enc, "f_sint64_key_string_val_string", x.FSint64KeyStringValString, false, true, true)
	jsonencoder.AppendMapI64I32(enc, "f_sfixed32_key_unset_val_unset", x.FSfixed32KeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapI64I32(enc, "f_sfixed32_key_numeric_val_numeric", x.FSfixed32KeyNumericValNumeric, false, false, false)
	jsonencoder.AppendMapI64I32(enc, "f_sfixed32_key_numeric_val_string", x.FSfixed32KeyNumericValString, false, false, true)
	jsonencoder.AppendMapI64I32(enc, "f_sfixed32_key_string_val_numeric", x.FSfixed32KeyStringValNumeric, false, true, false)
	jsonencoder.AppendMapI64I32(enc, "f_sfixed32_key_string_val_string", x.FSfixed32KeyStringValString, false, true, true)
	jsonencoder.AppendMapI64I64(enc, "f_sfixed64_key_unset_val_unset", x.FSfixed64KeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapI64I64(enc, "f_sfixed64_key_numeric_val_numeric", x.FSfixed64KeyNumericValNumeric, false, false, false)
	jsonencoder.AppendMapI64I64(enc, "f_sfixed64_key_numeric_val_string", x.FSfixed64KeyNumericValString, false, false, true)
	jsonencoder.AppendMapI64I64(enc, "f_sfixed64_key_string_val_numeric", x.FSfixed64KeyStringValNumeric, false, true, false)
	jsonencoder.AppendMapI64I64(enc, "f_sfixed64_key_string_val_string", x.FSfixed64KeyStringValString, false, true, true)
	jsonencoder.AppendMapI64U32(enc, "f_fixed32_key_unset_val_unset", x.FFixed32KeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapI64U32(enc, "f_fixed32_key_numeric_val_numeric", x.FFixed32KeyNumericValNumeric, false, false, false)
	jsonencoder.AppendMapI64U32(enc, "f_fixed32_key_numeric_val_string", x.FFixed32KeyNumericValString, false, false, true)
	jsonencoder.AppendMapI64U32(enc, "f_fixed32_key_string_val_numeric", x.FFixed32KeyStringValNumeric, false, true, false)
	jsonencoder.AppendMapI64U32(enc, "f_fixed32_key_string_val_string", x.FFixed32KeyStringValString, false, true, true)
	jsonencoder.AppendMapI64U64(enc, "f_fixed64_key_unset_val_unset", x.FFixed64KeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapI64U64(enc, "f_fixed64_key_numeric_val_numeric", x.FFixed64KeyNumericValNumeric, false, false, false)
	jsonencoder.AppendMapI64U64(enc, "f_fixed64_key_numeric_val_string", x.FFixed64KeyNumericValString, false, false, true)
	jsonencoder.AppendMapI64U64(enc, "f_fixed64_key_string_val_numeric", x.FFixed64KeyStringValNumeric, false, true, false)
	jsonencoder.AppendMapI64U64(enc, "f_fixed64_key_string_val_string", x.FFixed64KeyStringValString, false, true, true)
	jsonencoder.AppendMapI64F32(enc, "f_float_key_unset_val_unset", x.FFloatKeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapI64F32(enc, "f_float_key_numeric_val_numeric", x.FFloatKeyNumericValNumeric, false, false, false)
	jsonencoder.AppendMapI64F32(enc, "f_float_key_numeric_val_string", x.FFloatKeyNumericValString, false, false, true)
	jsonencoder.AppendMapI64F32(enc, "f_float_key_string_val_numeric", x.FFloatKeyStringValNumeric, false, true, false)
	jsonencoder.AppendMapI64F32(enc, "f_float_key_string_val_string", x.FFloatKeyStringValString, false, true, true)
	jsonencoder.AppendMapI64F64(enc, "f_double_key_unset_val_unset", x.FDoubleKeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapI64F64(enc, "f_double_key_numeric_val_numeric", x.FDoubleKeyNumericValNumeric, false, false, false)
	jsonencoder.AppendMapI64F64(enc, "f_double_key_numeric_val_string", x.FDoubleKeyNumericValString, false, false, true)
	jsonencoder.AppendMapI64F64(enc, "f_double_key_string_val_numeric", x.FDoubleKeyStringValNumeric, false, true, false)
	jsonencoder.AppendMapI64F64(enc, "f_double_key_string_val_string", x.FDoubleKeyStringValString, false, true, true)
	jsonencoder.AppendMapI64Bool(enc, "f_bool_key_unset_val_unset", x.FBoolKeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapI64Bool(enc, "f_bool_key_numeric_val_bool", x.FBoolKeyNumericValBool, false, false, false)
	jsonencoder.AppendMapI64Bool(enc, "f_bool_key_numeric_val_string", x.FBoolKeyNumericValString, false, false, true)
	jsonencoder.AppendMapI64Bool(enc, "f_bool_key_string_val_bool", x.FBoolKeyStringValBool, false, true, false)
	jsonencoder.AppendMapI64Bool(enc, "f_bool_key_string_val_string", x.FBoolKeyStringValString, false, true, true)
	jsonencoder.AppendMapI64Str(enc, "f_string_key_unset_val_none", x.FStringKeyUnsetValNone, false, true)
	jsonencoder.AppendMapI64Str(enc, "f_string_key_numeric_val_none", x.FStringKeyNumericValNone, false, false)
	jsonencoder.AppendMapI64Str(enc, "f_string_key_string_val_none", x.FStringKeyStringValNone, false, true)
	if err := jsonencoder.AppendMapI64Bytes(enc, "f_bytes_key_unset_val_none", x.FBytesKeyUnsetValNone, false, true); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapI64Bytes(enc, "f_bytes_key_numeric_val_none", x.FBytesKeyNumericValNone, false, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapI64Bytes(enc, "f_bytes_key_string_val_none", x.FBytesKeyStringValNone, false, true); err != nil {
		return nil, err
	}
	jsonencoder.AppendMapI64EnumNum(enc, "f_enum_key_unset_val_unset", x.FEnumKeyUnsetValUnset, false, true, false)
	jsonencoder.AppendMapI64EnumNum(enc, "f_enum_key_numeric_val_numeric", x.FEnumKeyNumericValNumeric, false, false, false)
	jsonencoder.AppendMapI64EnumNum(enc, "f_enum_key_numeric_val_numeric_string", x.FEnumKeyNumericValNumericString, false, false, true)
	jsonencoder.AppendMapI64EnumStr(enc, "f_enum_key_numeric_val_enum_string", x.FEnumKeyNumericValEnumString, false, false)
	jsonencoder.AppendMapI64EnumNum(enc, "f_enum_key_string_val_numeric", x.FEnumKeyStringValNumeric, false, true, false)
	jsonencoder.AppendMapI64EnumNum(enc, "f_enum_key_string_val_numeric_string", x.FEnumKeyStringValNumericString, false, true, true)
	jsonencoder.AppendMapI64EnumStr(enc, "f_enum_key_string_val_enum_string", x.FEnumKeyStringValEnumString, false, true)
	if err := jsonencoder.AppendMapI64Message(enc, "f_message_key_unset_val_none", x.FMessageKeyUnsetValNone, false, true); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapI64Message(enc, "f_message_key_numeric_val_none", x.FMessageKeyNumericValNone, false, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapI64Message(enc, "f_message_key_string_val_none", x.FMessageKeyStringValNone, false, true); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapI64WKTDurObject(enc, "f_duration_key_unset_val_unset", x.FDurationKeyUnsetValUnset, false, true); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapI64WKTDurObject(enc, "f_duration_key_numeric_val_object", x.FDurationKeyNumericValObject, false, false); err != nil {
		return nil, err
	}
	jsonencoder.AppendMapI64WKTDurTimeStr(enc, "f_duration_key_numeric_val_time_string", x.FDurationKeyNumericValTimeString, false, false)
	jsonencoder.AppendMapI64WKTDurNano(enc, "f_duration_key_numeric_val_nanosecond", x.FDurationKeyNumericValNanosecond, false, false, false)
	jsonencoder.AppendMapI64WKTDurNano(enc, "f_duration_key_numeric_val_nanosecond_string", x.FDurationKeyNumericValNanosecondString, false, false, true)
	jsonencoder.AppendMapI64WKTDurMicro(enc, "f_duration_key_numeric_val_microsecond", x.FDurationKeyNumericValMicrosecond, false, false, false)
	jsonencoder.AppendMapI64WKTDurMicro(enc, "f_duration_key_numeric_val_microsecond_string", x.FDurationKeyNumericValMicrosecondString, false, false, true)
	jsonencoder.AppendMapI64WKTDurMilli(enc, "f_duration_key_numeric_val_millisecond", x.FDurationKeyNumericValMillisecond, false, false, false)
	jsonencoder.AppendMapI64WKTDurMilli(enc, "f_duration_key_numeric_val_millisecond_string", x.FDurationKeyNumericValMillisecondString, false, false, true)
	jsonencoder.AppendMapI64WKTDurSecond(enc, "f_duration_key_numeric_val_second", x.FDurationKeyNumericValSecond, false, false, false)
	jsonencoder.AppendMapI64WKTDurSecond(enc, "f_duration_key_numeric_val_second_string", x.FDurationKeyNumericValSecondString, false, false, true)
	jsonencoder.AppendMapI64WKTDurMinute(enc, "f_duration_key_numeric_val_minute", x.FDurationKeyNumericValMinute, false, false, false)
	jsonencoder.AppendMapI64WKTDurMinute(enc, "f_duration_key_numeric_val_minute_string", x.FDurationKeyNumericValMinuteString, false, false, true)
	jsonencoder.AppendMapI64WKTDurHour(enc, "f_duration_key_numeric_val_hour", x.FDurationKeyNumericValHour, false, false, false)
	jsonencoder.AppendMapI64WKTDurHour(enc, "f_duration_key_numeric_val_hour_string", x.FDurationKeyNumericValHourString, false, false, true)
	if err := jsonencoder.AppendMapI64WKTDurObject(enc, "f_duration_key_string_val_unset", x.FDurationKeyStringValUnset, false, true); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapI64WKTDurObject(enc, "f_duration_key_string_val_object", x.FDurationKeyStringValObject, false, true); err != nil {
		return nil, err
	}
	jsonencoder.AppendMapI64WKTDurTimeStr(enc, "f_duration_key_string_val_time_string", x.FDurationKeyStringValTimeString, false, true)
	jsonencoder.AppendMapI64WKTDurNano(enc, "f_duration_key_string_val_nanosecond", x.FDurationKeyStringValNanosecond, false, true, false)
	jsonencoder.AppendMapI64WKTDurNano(enc, "f_duration_key_string_val_nanosecond_string", x.FDurationKeyStringValNanosecondString, false, true, true)
	jsonencoder.AppendMapI64WKTDurMicro(enc, "f_duration_key_string_val_microsecond", x.FDurationKeyStringValMicrosecond, false, true, false)
	jsonencoder.AppendMapI64WKTDurMicro(enc, "f_duration_key_string_val_microsecond_string", x.FDurationKeyStringValMicrosecondString, false, true, true)
	jsonencoder.AppendMapI64WKTDurMilli(enc, "f_duration_key_string_val_millisecond", x.FDurationKeyStringValMillisecond, false, true, false)
	jsonencoder.AppendMapI64WKTDurMilli(enc, "f_duration_key_string_val_millisecond_string", x.FDurationKeyStringValMillisecondString, false, true, true)
	jsonencoder.AppendMapI64WKTDurSecond(enc, "f_duration_key_string_val_second", x.FDurationKeyStringValSecond, false, true, false)
	jsonencoder.AppendMapI64WKTDurSecond(enc, "f_duration_key_string_val_second_string", x.FDurationKeyStringValSecondString, false, true, true)
	jsonencoder.AppendMapI64WKTDurMinute(enc, "f_duration_key_string_val_minute", x.FDurationKeyStringValMinute, false, true, false)
	jsonencoder.AppendMapI64WKTDurMinute(enc, "f_duration_key_string_val_minute_string", x.FDurationKeyStringValMinuteString, false, true, true)
	jsonencoder.AppendMapI64WKTDurHour(enc, "f_duration_key_string_val_hour", x.FDurationKeyStringValHour, false, true, false)
	jsonencoder.AppendMapI64WKTDurHour(enc, "f_duration_key_string_val_hour_string", x.FDurationKeyStringValHourString, false, true, true)
	if err := jsonencoder.AppendMapI64WKTTsObject(enc, "f_timestamp_key_unset_val_unset", x.FTimestampKeyUnsetValUnset, false, true); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapI64WKTTsObject(enc, "f_timestamp_key_numeric_val_object", x.FTimestampKeyNumericValObject, false, false); err != nil {
		return nil, err
	}
	jsonencoder.AppendMapI64WKTTsLayout(enc, "f_timestamp_key_numeric_val_time_layout", x.FTimestampKeyNumericValTimeLayout, false, false, "2006-01-02T15:04:05.999999999Z07:00")
	jsonencoder.AppendMapI64WKTTsUnixNano(enc, "f_timestamp_key_numeric_val_unix_nano", x.FTimestampKeyNumericValUnixNano, false, false, false)
	jsonencoder.AppendMapI64WKTTsUnixNano(enc, "f_timestamp_key_numeric_val_unix_nano_string", x.FTimestampKeyNumericValUnixNanoString, false, false, true)
	jsonencoder.AppendMapI64WKTTsUnixMicro(enc, "f_timestamp_key_numeric_val_unix_micro", x.FTimestampKeyNumericValUnixMicro, false, false, false)
	jsonencoder.AppendMapI64WKTTsUnixMicro(enc, "f_timestamp_key_numeric_val_unix_micro_string", x.FTimestampKeyNumericValUnixMicroString, false, false, true)
	jsonencoder.AppendMapI64WKTTsUnixMilli(enc, "f_timestamp_key_numeric_val_unix_milli", x.FTimestampKeyNumericValUnixMilli, false, false, false)
	jsonencoder.AppendMapI64WKTTsUnixMilli(enc, "f_timestamp_key_numeric_val_unix_milli_string", x.FTimestampKeyNumericValUnixMilliString, false, false, true)
	jsonencoder.AppendMapI64WKTTsUnixSec(enc, "f_timestamp_key_numeric_val_unix_sec", x.FTimestampKeyNumericValUnixSec, false, false, false)
	jsonencoder.AppendMapI64WKTTsUnixSec(enc, "f_timestamp_key_numeric_val_unix_sec_string", x.FTimestampKeyNumericValUnixSecString, false, false, true)
	if err := jsonencoder.AppendMapI64WKTTsObject(enc, "f_timestamp_key_string_val_object", x.FTimestampKeyStringValObject, false, true); err != nil {
		return nil, err
	}
	jsonencoder.AppendMapI64WKTTsLayout(enc, "f_timestamp_key_string_val_time_layout", x.FTimestampKeyStringValTimeLayout, false, true, "2006-01-02T15:04:05.999999999Z07:00")
	jsonencoder.AppendMapI64WKTTsUnixNano(enc, "f_timestamp_key_string_val_unix_nano", x.FTimestampKeyStringValUnixNano, false, true, false)
	jsonencoder.AppendMapI64WKTTsUnixNano(enc, "f_timestamp_key_string_val_unix_nano_string", x.FTimestampKeyStringValUnixNanoString, false, true, true)
	jsonencoder.AppendMapI64WKTTsUnixMicro(enc, "f_timestamp_key_string_val_unix_micro", x.FTimestampKeyStringValUnixMicro, false, true, false)
	jsonencoder.AppendMapI64WKTTsUnixMicro(enc, "f_timestamp_key_string_val_unix_micro_string", x.FTimestampKeyStringValUnixMicroString, false, true, true)
	jsonencoder.AppendMapI64WKTTsUnixMilli(enc, "f_timestamp_key_string_val_unix_milli", x.FTimestampKeyStringValUnixMilli, false, true, false)
	jsonencoder.AppendMapI64WKTTsUnixMilli(enc, "f_timestamp_key_string_val_unix_milli_string", x.FTimestampKeyStringValUnixMilliString, false, true, true)
	jsonencoder.AppendMapI64WKTTsUnixSec(enc, "f_timestamp_key_string_val_unix_sec", x.FTimestampKeyStringValUnixSec, false, true, false)
	jsonencoder.AppendMapI64WKTTsUnixSec(enc, "f_timestamp_key_string_val_unix_sec_string", x.FTimestampKeyStringValUnixSecString, false, true, true)
	if err := jsonencoder.AppendMapI64WKTAnyObject(enc, "f_any_key_unset_val_unset", x.FAnyKeyUnsetValUnset, false, true); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapI64WKTAnyObject(enc, "f_any_key_numeric_val_object", x.FAnyKeyNumericValObject, false, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapI64WKTAnyProto(enc, "f_any_key_numeric_val_proto", x.FAnyKeyNumericValProto, false, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapI64WKTAnyObject(enc, "f_any_key_string_val_object", x.FAnyKeyStringValObject, false, true); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapI64WKTAnyProto(enc, "f_any_key_string_val_proto", x.FAnyKeyStringValProto, false, true); err != nil {
		return nil, err
	}
	enc.AppendObjectEnd() // Add end JSON identifier
	return enc.Bytes(), nil
}

// UnmarshalJSON implements json.Unmarshaler for proto message CodecMapKeySFixed64 in file tests/proto/cases/format/codec_map_key_sfixed64.proto
func (x *CodecMapKeySFixed64) UnmarshalJSON(b []byte) error {
	if x == nil {
		return errors.New("json: Unmarshal: xgo/tests/pb/pbformat.(*CodecMapKeySFixed64) is nil")
	}
	var (
		err    error
		isNULL bool
		dec    *jsondecoder.Decoder
	)
	if dec, err = jsondecoder.New(b); err != nil {
		return err
	}
	if isNULL, err = dec.BeforeScanJSON(); err != nil || isNULL {
		return err
	}
LOOP_SCAN:
	for { // Loop to read the JSON objects
		var (
			jsonKey string
			isEnd   bool
		)

		if isEnd, err = dec.BeforeScanNext(); err != nil {
			return err
		}
		if isEnd {
			break LOOP_SCAN
		}

		if jsonKey, err = dec.ReadJSONKey(); err != nil {
			return err
		}
		switch jsonKey { // match the jsonKey
		case "f_int32_key_unset_val_unset":
			if x.FInt32KeyUnsetValUnset, err = jsondecoder.ReadMapI64I32(dec, x.FInt32KeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_int32_key_numeric_val_numeric":
			if x.FInt32KeyNumericValNumeric, err = jsondecoder.ReadMapI64I32(dec, x.FInt32KeyNumericValNumeric, false, false); err != nil {
				return err
			}
		case "f_int32_key_numeric_val_string":
			if x.FInt32KeyNumericValString, err = jsondecoder.ReadMapI64I32(dec, x.FInt32KeyNumericValString, false, true); err != nil {
				return err
			}
		case "f_int32_key_string_val_numeric":
			if x.FInt32KeyStringValNumeric, err = jsondecoder.ReadMapI64I32(dec, x.FInt32KeyStringValNumeric, true, false); err != nil {
				return err
			}
		case "f_int32_key_string_val_string":
			if x.FInt32KeyStringValString, err = jsondecoder.ReadMapI64I32(dec, x.FInt32KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_int64_key_unset_val_unset":
			if x.FInt64KeyUnsetValUnset, err = jsondecoder.ReadMapI64I64(dec, x.FInt64KeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_int64_key_numeric_val_numeric":
			if x.FInt64KeyNumericValNumeric, err = jsondecoder.ReadMapI64I64(dec, x.FInt64KeyNumericValNumeric, false, false); err != nil {
				return err
			}
		case "f_int64_key_numeric_val_string":
			if x.FInt64KeyNumericValString, err = jsondecoder.ReadMapI64I64(dec, x.FInt64KeyNumericValString, false, true); err != nil {
				return err
			}
		case "f_int64_key_string_val_numeric":
			if x.FInt64KeyStringValNumeric, err = jsondecoder.ReadMapI64I64(dec, x.FInt64KeyStringValNumeric, true, false); err != nil {
				return err
			}
		case "f_int64_key_string_val_string":
			if x.FInt64KeyStringValString, err = jsondecoder.ReadMapI64I64(dec, x.FInt64KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_uint32_key_unset_val_unset":
			if x.FUint32KeyUnsetValUnset, err = jsondecoder.ReadMapI64U32(dec, x.FUint32KeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_uint32_key_numeric_val_numeric":
			if x.FUint32KeyNumericValNumeric, err = jsondecoder.ReadMapI64U32(dec, x.FUint32KeyNumericValNumeric, false, false); err != nil {
				return err
			}
		case "f_uint32_key_numeric_val_string":
			if x.FUint32KeyNumericValString, err = jsondecoder.ReadMapI64U32(dec, x.FUint32KeyNumericValString, false, true); err != nil {
				return err
			}
		case "f_uint32_key_string_val_numeric":
			if x.FUint32KeyStringValNumeric, err = jsondecoder.ReadMapI64U32(dec, x.FUint32KeyStringValNumeric, true, false); err != nil {
				return err
			}
		case "f_uint32_key_string_val_string":
			if x.FUint32KeyStringValString, err = jsondecoder.ReadMapI64U32(dec, x.FUint32KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_uint64_key_unset_val_unset":
			if x.FUint64KeyUnsetValUnset, err = jsondecoder.ReadMapI64U64(dec, x.FUint64KeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_uint64_key_numeric_val_numeric":
			if x.FUint64KeyNumericValNumeric, err = jsondecoder.ReadMapI64U64(dec, x.FUint64KeyNumericValNumeric, false, false); err != nil {
				return err
			}
		case "f_uint64_key_numeric_val_string":
			if x.FUint64KeyNumericValString, err = jsondecoder.ReadMapI64U64(dec, x.FUint64KeyNumericValString, false, true); err != nil {
				return err
			}
		case "f_uint64_key_string_val_numeric":
			if x.FUint64KeyStringValNumeric, err = jsondecoder.ReadMapI64U64(dec, x.FUint64KeyStringValNumeric, true, false); err != nil {
				return err
			}
		case "f_uint64_key_string_val_string":
			if x.FUint64KeyStringValString, err = jsondecoder.ReadMapI64U64(dec, x.FUint64KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_sint32_key_unset_val_unset":
			if x.FSint32KeyUnsetValUnset, err = jsondecoder.ReadMapI64I32(dec, x.FSint32KeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_sint32_key_numeric_val_numeric":
			if x.FSint32KeyNumericValNumeric, err = jsondecoder.ReadMapI64I32(dec, x.FSint32KeyNumericValNumeric, false, false); err != nil {
				return err
			}
		case "f_sint32_key_numeric_val_string":
			if x.FSint32KeyNumericValString, err = jsondecoder.ReadMapI64I32(dec, x.FSint32KeyNumericValString, false, true); err != nil {
				return err
			}
		case "f_sint32_key_string_val_numeric":
			if x.FSint32KeyStringValNumeric, err = jsondecoder.ReadMapI64I32(dec, x.FSint32KeyStringValNumeric, true, false); err != nil {
				return err
			}
		case "f_sint32_key_string_val_string":
			if x.FSint32KeyStringValString, err = jsondecoder.ReadMapI64I32(dec, x.FSint32KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_sint64_key_unset_val_unset":
			if x.FSint64KeyUnsetValUnset, err = jsondecoder.ReadMapI64I64(dec, x.FSint64KeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_sint64_key_numeric_val_numeric":
			if x.FSint64KeyNumericValNumeric, err = jsondecoder.ReadMapI64I64(dec, x.FSint64KeyNumericValNumeric, false, false); err != nil {
				return err
			}
		case "f_sint64_key_numeric_val_string":
			if x.FSint64KeyNumericValString, err = jsondecoder.ReadMapI64I64(dec, x.FSint64KeyNumericValString, false, true); err != nil {
				return err
			}
		case "f_sint64_key_string_val_numeric":
			if x.FSint64KeyStringValNumeric, err = jsondecoder.ReadMapI64I64(dec, x.FSint64KeyStringValNumeric, true, false); err != nil {
				return err
			}
		case "f_sint64_key_string_val_string":
			if x.FSint64KeyStringValString, err = jsondecoder.ReadMapI64I64(dec, x.FSint64KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_sfixed32_key_unset_val_unset":
			if x.FSfixed32KeyUnsetValUnset, err = jsondecoder.ReadMapI64I32(dec, x.FSfixed32KeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_sfixed32_key_numeric_val_numeric":
			if x.FSfixed32KeyNumericValNumeric, err = jsondecoder.ReadMapI64I32(dec, x.FSfixed32KeyNumericValNumeric, false, false); err != nil {
				return err
			}
		case "f_sfixed32_key_numeric_val_string":
			if x.FSfixed32KeyNumericValString, err = jsondecoder.ReadMapI64I32(dec, x.FSfixed32KeyNumericValString, false, true); err != nil {
				return err
			}
		case "f_sfixed32_key_string_val_numeric":
			if x.FSfixed32KeyStringValNumeric, err = jsondecoder.ReadMapI64I32(dec, x.FSfixed32KeyStringValNumeric, true, false); err != nil {
				return err
			}
		case "f_sfixed32_key_string_val_string":
			if x.FSfixed32KeyStringValString, err = jsondecoder.ReadMapI64I32(dec, x.FSfixed32KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_sfixed64_key_unset_val_unset":
			if x.FSfixed64KeyUnsetValUnset, err = jsondecoder.ReadMapI64I64(dec, x.FSfixed64KeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_sfixed64_key_numeric_val_numeric":
			if x.FSfixed64KeyNumericValNumeric, err = jsondecoder.ReadMapI64I64(dec, x.FSfixed64KeyNumericValNumeric, false, false); err != nil {
				return err
			}
		case "f_sfixed64_key_numeric_val_string":
			if x.FSfixed64KeyNumericValString, err = jsondecoder.ReadMapI64I64(dec, x.FSfixed64KeyNumericValString, false, true); err != nil {
				return err
			}
		case "f_sfixed64_key_string_val_numeric":
			if x.FSfixed64KeyStringValNumeric, err = jsondecoder.ReadMapI64I64(dec, x.FSfixed64KeyStringValNumeric, true, false); err != nil {
				return err
			}
		case "f_sfixed64_key_string_val_string":
			if x.FSfixed64KeyStringValString, err = jsondecoder.ReadMapI64I64(dec, x.FSfixed64KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_fixed32_key_unset_val_unset":
			if x.FFixed32KeyUnsetValUnset, err = jsondecoder.ReadMapI64U32(dec, x.FFixed32KeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_fixed32_key_numeric_val_numeric":
			if x.FFixed32KeyNumericValNumeric, err = jsondecoder.ReadMapI64U32(dec, x.FFixed32KeyNumericValNumeric, false, false); err != nil {
				return err
			}
		case "f_fixed32_key_numeric_val_string":
			if x.FFixed32KeyNumericValString, err = jsondecoder.ReadMapI64U32(dec, x.FFixed32KeyNumericValString, false, true); err != nil {
				return err
			}
		case "f_fixed32_key_string_val_numeric":
			if x.FFixed32KeyStringValNumeric, err = jsondecoder.ReadMapI64U32(dec, x.FFixed32KeyStringValNumeric, true, false); err != nil {
				return err
			}
		case "f_fixed32_key_string_val_string":
			if x.FFixed32KeyStringValString, err = jsondecoder.ReadMapI64U32(dec, x.FFixed32KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_fixed64_key_unset_val_unset":
			if x.FFixed64KeyUnsetValUnset, err = jsondecoder.ReadMapI64U64(dec, x.FFixed64KeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_fixed64_key_numeric_val_numeric":
			if x.FFixed64KeyNumericValNumeric, err = jsondecoder.ReadMapI64U64(dec, x.FFixed64KeyNumericValNumeric, false, false); err != nil {
				return err
			}
		case "f_fixed64_key_numeric_val_string":
			if x.FFixed64KeyNumericValString, err = jsondecoder.ReadMapI64U64(dec, x.FFixed64KeyNumericValString, false, true); err != nil {
				return err
			}
		case "f_fixed64_key_string_val_numeric":
			if x.FFixed64KeyStringValNumeric, err = jsondecoder.ReadMapI64U64(dec, x.FFixed64KeyStringValNumeric, true, false); err != nil {
				return err
			}
		case "f_fixed64_key_string_val_string":
			if x.FFixed64KeyStringValString, err = jsondecoder.ReadMapI64U64(dec, x.FFixed64KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_float_key_unset_val_unset":
			if x.FFloatKeyUnsetValUnset, err = jsondecoder.ReadMapI64F32(dec, x.FFloatKeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_float_key_numeric_val_numeric":
			if x.FFloatKeyNumericValNumeric, err = jsondecoder.ReadMapI64F32(dec, x.FFloatKeyNumericValNumeric, false, false); err != nil {
				return err
			}
		case "f_float_key_numeric_val_string":
			if x.FFloatKeyNumericValString, err = jsondecoder.ReadMapI64F32(dec, x.FFloatKeyNumericValString, false, true); err != nil {
				return err
			}
		case "f_float_key_string_val_numeric":
			if x.FFloatKeyStringValNumeric, err = jsondecoder.ReadMapI64F32(dec, x.FFloatKeyStringValNumeric, true, false); err != nil {
				return err
			}
		case "f_float_key_string_val_string":
			if x.FFloatKeyStringValString, err = jsondecoder.ReadMapI64F32(dec, x.FFloatKeyStringValString, true, true); err != nil {
				return err
			}
		case "f_double_key_unset_val_unset":
			if x.FDoubleKeyUnsetValUnset, err = jsondecoder.ReadMapI64F64(dec, x.FDoubleKeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_double_key_numeric_val_numeric":
			if x.FDoubleKeyNumericValNumeric, err = jsondecoder.ReadMapI64F64(dec, x.FDoubleKeyNumericValNumeric, false, false); err != nil {
				return err
			}
		case "f_double_key_numeric_val_string":
			if x.FDoubleKeyNumericValString, err = jsondecoder.ReadMapI64F64(dec, x.FDoubleKeyNumericValString, false, true); err != nil {
				return err
			}
		case "f_double_key_string_val_numeric":
			if x.FDoubleKeyStringValNumeric, err = jsondecoder.ReadMapI64F64(dec, x.FDoubleKeyStringValNumeric, true, false); err != nil {
				return err
			}
		case "f_double_key_string_val_string":
			if x.FDoubleKeyStringValString, err = jsondecoder.ReadMapI64F64(dec, x.FDoubleKeyStringValString, true, true); err != nil {
				return err
			}
		case "f_bool_key_unset_val_unset":
			if x.FBoolKeyUnsetValUnset, err = jsondecoder.ReadMapI64Bool(dec, x.FBoolKeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_bool_key_numeric_val_bool":
			if x.FBoolKeyNumericValBool, err = jsondecoder.ReadMapI64Bool(dec, x.FBoolKeyNumericValBool, false, false); err != nil {
				return err
			}
		case "f_bool_key_numeric_val_string":
			if x.FBoolKeyNumericValString, err = jsondecoder.ReadMapI64Bool(dec, x.FBoolKeyNumericValString, false, true); err != nil {
				return err
			}
		case "f_bool_key_string_val_bool":
			if x.FBoolKeyStringValBool, err = jsondecoder.ReadMapI64Bool(dec, x.FBoolKeyStringValBool, true, false); err != nil {
				return err
			}
		case "f_bool_key_string_val_string":
			if x.FBoolKeyStringValString, err = jsondecoder.ReadMapI64Bool(dec, x.FBoolKeyStringValString, true, true); err != nil {
				return err
			}
		case "f_string_key_unset_val_none":
			if x.FStringKeyUnsetValNone, err = jsondecoder.ReadMapI64Str(dec, x.FStringKeyUnsetValNone, true); err != nil {
				return err
			}
		case "f_string_key_numeric_val_none":
			if x.FStringKeyNumericValNone, err = jsondecoder.ReadMapI64Str(dec, x.FStringKeyNumericValNone, false); err != nil {
				return err
			}
		case "f_string_key_string_val_none":
			if x.FStringKeyStringValNone, err = jsondecoder.ReadMapI64Str(dec, x.FStringKeyStringValNone, true); err != nil {
				return err
			}
		case "f_bytes_key_unset_val_none":
			if x.FBytesKeyUnsetValNone, err = jsondecoder.ReadMapI64Bytes(dec, x.FBytesKeyUnsetValNone, true); err != nil {
				return err
			}
		case "f_bytes_key_numeric_val_none":
			if x.FBytesKeyNumericValNone, err = jsondecoder.ReadMapI64Bytes(dec, x.FBytesKeyNumericValNone, false); err != nil {
				return err
			}
		case "f_bytes_key_string_val_none":
			if x.FBytesKeyStringValNone, err = jsondecoder.ReadMapI64Bytes(dec, x.FBytesKeyStringValNone, true); err != nil {
				return err
			}
		case "f_enum_key_unset_val_unset":
			if x.FEnumKeyUnsetValUnset, err = jsondecoder.ReadMapI64EnumNum(dec, x.FEnumKeyUnsetValUnset, true, false); err != nil {
				return err
			}
		case "f_enum_key_numeric_val_numeric":
			if x.FEnumKeyNumericValNumeric, err = jsondecoder.ReadMapI64EnumNum(dec, x.FEnumKeyNumericValNumeric, false, false); err != nil {
				return err
			}
		case "f_enum_key_numeric_val_numeric_string":
			if x.FEnumKeyNumericValNumericString, err = jsondecoder.ReadMapI64EnumNum(dec, x.FEnumKeyNumericValNumericString, false, true); err != nil {
				return err
			}
		case "f_enum_key_numeric_val_enum_string":
			if x.FEnumKeyNumericValEnumString, err = jsondecoder.ReadMapI64EnumStr(dec, x.FEnumKeyNumericValEnumString, false); err != nil {
				return err
			}
		case "f_enum_key_string_val_numeric":
			if x.FEnumKeyStringValNumeric, err = jsondecoder.ReadMapI64EnumNum(dec, x.FEnumKeyStringValNumeric, true, false); err != nil {
				return err
			}
		case "f_enum_key_string_val_numeric_string":
			if x.FEnumKeyStringValNumericString, err = jsondecoder.ReadMapI64EnumNum(dec, x.FEnumKeyStringValNumericString, true, true); err != nil {
				return err
			}
		case "f_enum_key_string_val_enum_string":
			if x.FEnumKeyStringValEnumString, err = jsondecoder.ReadMapI64EnumStr(dec, x.FEnumKeyStringValEnumString, true); err != nil {
				return err
			}
		case "f_message_key_unset_val_none":
			if x.FMessageKeyUnsetValNone, err = jsondecoder.ReadMapI64Message(dec, x.FMessageKeyUnsetValNone, true); err != nil {
				return err
			}
		case "f_message_key_numeric_val_none":
			if x.FMessageKeyNumericValNone, err = jsondecoder.ReadMapI64Message(dec, x.FMessageKeyNumericValNone, false); err != nil {
				return err
			}
		case "f_message_key_string_val_none":
			if x.FMessageKeyStringValNone, err = jsondecoder.ReadMapI64Message(dec, x.FMessageKeyStringValNone, true); err != nil {
				return err
			}
		case "f_duration_key_unset_val_unset":
			if x.FDurationKeyUnsetValUnset, err = jsondecoder.ReadMapI64WKTDurObject(dec, x.FDurationKeyUnsetValUnset, true); err != nil {
				return err
			}
		case "f_duration_key_numeric_val_object":
			if x.FDurationKeyNumericValObject, err = jsondecoder.ReadMapI64WKTDurObject(dec, x.FDurationKeyNumericValObject, false); err != nil {
				return err
			}
		case "f_duration_key_numeric_val_time_string":
			if x.FDurationKeyNumericValTimeString, err = jsondecoder.ReadMapI64WKTDurTimeStr(dec, x.FDurationKeyNumericValTimeString, false); err != nil {
				return err
			}
		case "f_duration_key_numeric_val_nanosecond":
			if x.FDurationKeyNumericValNanosecond, err = jsondecoder.ReadMapI64WKTDurNano(dec, x.FDurationKeyNumericValNanosecond, false, false); err != nil {
				return err
			}
		case "f_duration_key_numeric_val_nanosecond_string":
			if x.FDurationKeyNumericValNanosecondString, err = jsondecoder.ReadMapI64WKTDurNano(dec, x.FDurationKeyNumericValNanosecondString, false, true); err != nil {
				return err
			}
		case "f_duration_key_numeric_val_microsecond":
			if x.FDurationKeyNumericValMicrosecond, err = jsondecoder.ReadMapI64WKTDurMicro(dec, x.FDurationKeyNumericValMicrosecond, false, false); err != nil {
				return err
			}
		case "f_duration_key_numeric_val_microsecond_string":
			if x.FDurationKeyNumericValMicrosecondString, err = jsondecoder.ReadMapI64WKTDurMicro(dec, x.FDurationKeyNumericValMicrosecondString, false, true); err != nil {
				return err
			}
		case "f_duration_key_numeric_val_millisecond":
			if x.FDurationKeyNumericValMillisecond, err = jsondecoder.ReadMapI64WKTDurMilli(dec, x.FDurationKeyNumericValMillisecond, false, false); err != nil {
				return err
			}
		case "f_duration_key_numeric_val_millisecond_string":
			if x.FDurationKeyNumericValMillisecondString, err = jsondecoder.ReadMapI64WKTDurMilli(dec, x.FDurationKeyNumericValMillisecondString, false, true); err != nil {
				return err
			}
		case "f_duration_key_numeric_val_second":
			if x.FDurationKeyNumericValSecond, err = jsondecoder.ReadMapI64WKTDurSecond(dec, x.FDurationKeyNumericValSecond, false, false); err != nil {
				return err
			}
		case "f_duration_key_numeric_val_second_string":
			if x.FDurationKeyNumericValSecondString, err = jsondecoder.ReadMapI64WKTDurSecond(dec, x.FDurationKeyNumericValSecondString, false, true); err != nil {
				return err
			}
		case "f_duration_key_numeric_val_minute":
			if x.FDurationKeyNumericValMinute, err = jsondecoder.ReadMapI64WKTDurMinute(dec, x.FDurationKeyNumericValMinute, false, false); err != nil {
				return err
			}
		case "f_duration_key_numeric_val_minute_string":
			if x.FDurationKeyNumericValMinuteString, err = jsondecoder.ReadMapI64WKTDurMinute(dec, x.FDurationKeyNumericValMinuteString, false, true); err != nil {
				return err
			}
		case "f_duration_key_numeric_val_hour":
			if x.FDurationKeyNumericValHour, err = jsondecoder.ReadMapI64WKTDurHour(dec, x.FDurationKeyNumericValHour, false, false); err != nil {
				return err
			}
		case "f_duration_key_numeric_val_hour_string":
			if x.FDurationKeyNumericValHourString, err = jsondecoder.ReadMapI64WKTDurHour(dec, x.FDurationKeyNumericValHourString, false, true); err != nil {
				return err
			}
		case "f_duration_key_string_val_unset":
			if x.FDurationKeyStringValUnset, err = jsondecoder.ReadMapI64WKTDurObject(dec, x.FDurationKeyStringValUnset, true); err != nil {
				return err
			}
		case "f_duration_key_string_val_object":
			if x.FDurationKeyStringValObject, err = jsondecoder.ReadMapI64WKTDurObject(dec, x.FDurationKeyStringValObject, true); err != nil {
				return err
			}
		case "f_duration_key_string_val_time_string":
			if x.FDurationKeyStringValTimeString, err = jsondecoder.ReadMapI64WKTDurTimeStr(dec, x.FDurationKeyStringValTimeString, true); err != nil {
				return err
			}
		case "f_duration_key_string_val_nanosecond":
			if x.FDurationKeyStringValNanosecond, err = jsondecoder.ReadMapI64WKTDurNano(dec, x.FDurationKeyStringValNanosecond, true, false); err != nil {
				return err
			}
		case "f_duration_key_string_val_nanosecond_string":
			if x.FDurationKeyStringValNanosecondString, err = jsondecoder.ReadMapI64WKTDurNano(dec, x.FDurationKeyStringValNanosecondString, true, true); err != nil {
				return err
			}
		case "f_duration_key_string_val_microsecond":
			if x.FDurationKeyStringValMicrosecond, err = jsondecoder.ReadMapI64WKTDurMicro(dec, x.FDurationKeyStringValMicrosecond, true, false); err != nil {
				return err
			}
		case "f_duration_key_string_val_microsecond_string":
			if x.FDurationKeyStringValMicrosecondString, err = jsondecoder.ReadMapI64WKTDurMicro(dec, x.FDurationKeyStringValMicrosecondString, true, true); err != nil {
				return err
			}
		case "f_duration_key_string_val_millisecond":
			if x.FDurationKeyStringValMillisecond, err = jsondecoder.ReadMapI64WKTDurMilli(dec, x.FDurationKeyStringValMillisecond, true, false); err != nil {
				return err
			}
		case "f_duration_key_string_val_millisecond_string":
			if x.FDurationKeyStringValMillisecondString, err = jsondecoder.ReadMapI64WKTDurMilli(dec, x.FDurationKeyStringValMillisecondString, true, true); err != nil {
				return err
			}
		case "f_duration_key_string_val_second":
			if x.FDurationKeyStringValSecond, err = jsondecoder.ReadMapI64WKTDurSecond(dec, x.FDurationKeyStringValSecond, true, false); err != nil {
				return err
			}
		case "f_duration_key_string_val_second_string":
			if x.FDurationKeyStringValSecondString, err = jsondecoder.ReadMapI64WKTDurSecond(dec, x.FDurationKeyStringValSecondString, true, true); err != nil {
				return err
			}
		case "f_duration_key_string_val_minute":
			if x.FDurationKeyStringValMinute, err = jsondecoder.ReadMapI64WKTDurMinute(dec, x.FDurationKeyStringValMinute, true, false); err != nil {
				return err
			}
		case "f_duration_key_string_val_minute_string":
			if x.FDurationKeyStringValMinuteString, err = jsondecoder.ReadMapI64WKTDurMinute(dec, x.FDurationKeyStringValMinuteString, true, true); err != nil {
				return err
			}
		case "f_duration_key_string_val_hour":
			if x.FDurationKeyStringValHour, err = jsondecoder.ReadMapI64WKTDurHour(dec, x.FDurationKeyStringValHour, true, false); err != nil {
				return err
			}
		case "f_duration_key_string_val_hour_string":
			if x.FDurationKeyStringValHourString, err = jsondecoder.ReadMapI64WKTDurHour(dec, x.FDurationKeyStringValHourString, true, true); err != nil {
				return err
			}
		case "f_timestamp_key_unset_val_unset":
			if x.FTimestampKeyUnsetValUnset, err = jsondecoder.ReadMapI64WKTTsObject(dec, x.FTimestampKeyUnsetValUnset, true); err != nil {
				return err
			}
		case "f_timestamp_key_numeric_val_object":
			if x.FTimestampKeyNumericValObject, err = jsondecoder.ReadMapI64WKTTsObject(dec, x.FTimestampKeyNumericValObject, false); err != nil {
				return err
			}
		case "f_timestamp_key_numeric_val_time_layout":
			if x.FTimestampKeyNumericValTimeLayout, err = jsondecoder.ReadMapI64WKTTsLayout(dec, x.FTimestampKeyNumericValTimeLayout, false, "2006-01-02T15:04:05.999999999Z07:00"); err != nil {
				return err
			}
		case "f_timestamp_key_numeric_val_unix_nano":
			if x.FTimestampKeyNumericValUnixNano, err = jsondecoder.ReadMapI64WKTTsUnixNano(dec, x.FTimestampKeyNumericValUnixNano, false, false); err != nil {
				return err
			}
		case "f_timestamp_key_numeric_val_unix_nano_string":
			if x.FTimestampKeyNumericValUnixNanoString, err = jsondecoder.ReadMapI64WKTTsUnixNano(dec, x.FTimestampKeyNumericValUnixNanoString, false, true); err != nil {
				return err
			}
		case "f_timestamp_key_numeric_val_unix_micro":
			if x.FTimestampKeyNumericValUnixMicro, err = jsondecoder.ReadMapI64WKTTsUnixMicro(dec, x.FTimestampKeyNumericValUnixMicro, false, false); err != nil {
				return err
			}
		case "f_timestamp_key_numeric_val_unix_micro_string":
			if x.FTimestampKeyNumericValUnixMicroString, err = jsondecoder.ReadMapI64WKTTsUnixMicro(dec, x.FTimestampKeyNumericValUnixMicroString, false, true); err != nil {
				return err
			}
		case "f_timestamp_key_numeric_val_unix_milli":
			if x.FTimestampKeyNumericValUnixMilli, err = jsondecoder.ReadMapI64WKTTsUnixMilli(dec, x.FTimestampKeyNumericValUnixMilli, false, false); err != nil {
				return err
			}
		case "f_timestamp_key_numeric_val_unix_milli_string":
			if x.FTimestampKeyNumericValUnixMilliString, err = jsondecoder.ReadMapI64WKTTsUnixMilli(dec, x.FTimestampKeyNumericValUnixMilliString, false, true); err != nil {
				return err
			}
		case "f_timestamp_key_numeric_val_unix_sec":
			if x.FTimestampKeyNumericValUnixSec, err = jsondecoder.ReadMapI64WKTTsUnixSec(dec, x.FTimestampKeyNumericValUnixSec, false, false); err != nil {
				return err
			}
		case "f_timestamp_key_numeric_val_unix_sec_string":
			if x.FTimestampKeyNumericValUnixSecString, err = jsondecoder.ReadMapI64WKTTsUnixSec(dec, x.FTimestampKeyNumericValUnixSecString, false, true); err != nil {
				return err
			}
		case "f_timestamp_key_string_val_object":
			if x.FTimestampKeyStringValObject, err = jsondecoder.ReadMapI64WKTTsObject(dec, x.FTimestampKeyStringValObject, true); err != nil {
				return err
			}
		case "f_timestamp_key_string_val_time_layout":
			if x.FTimestampKeyStringValTimeLayout, err = jsondecoder.ReadMapI64WKTTsLayout(dec, x.FTimestampKeyStringValTimeLayout, true, "2006-01-02T15:04:05.999999999Z07:00"); err != nil {
				return err
			}
		case "f_timestamp_key_string_val_unix_nano":
			if x.FTimestampKeyStringValUnixNano, err = jsondecoder.ReadMapI64WKTTsUnixNano(dec, x.FTimestampKeyStringValUnixNano, true, false); err != nil {
				return err
			}
		case "f_timestamp_key_string_val_unix_nano_string":
			if x.FTimestampKeyStringValUnixNanoString, err = jsondecoder.ReadMapI64WKTTsUnixNano(dec, x.FTimestampKeyStringValUnixNanoString, true, true); err != nil {
				return err
			}
		case "f_timestamp_key_string_val_unix_micro":
			if x.FTimestampKeyStringValUnixMicro, err = jsondecoder.ReadMapI64WKTTsUnixMicro(dec, x.FTimestampKeyStringValUnixMicro, true, false); err != nil {
				return err
			}
		case "f_timestamp_key_string_val_unix_micro_string":
			if x.FTimestampKeyStringValUnixMicroString, err = jsondecoder.ReadMapI64WKTTsUnixMicro(dec, x.FTimestampKeyStringValUnixMicroString, true, true); err != nil {
				return err
			}
		case "f_timestamp_key_string_val_unix_milli":
			if x.FTimestampKeyStringValUnixMilli, err = jsondecoder.ReadMapI64WKTTsUnixMilli(dec, x.FTimestampKeyStringValUnixMilli, true, false); err != nil {
				return err
			}
		case "f_timestamp_key_string_val_unix_milli_string":
			if x.FTimestampKeyStringValUnixMilliString, err = jsondecoder.ReadMapI64WKTTsUnixMilli(dec, x.FTimestampKeyStringValUnixMilliString, true, true); err != nil {
				return err
			}
		case "f_timestamp_key_string_val_unix_sec":
			if x.FTimestampKeyStringValUnixSec, err = jsondecoder.ReadMapI64WKTTsUnixSec(dec, x.FTimestampKeyStringValUnixSec, true, false); err != nil {
				return err
			}
		case "f_timestamp_key_string_val_unix_sec_string":
			if x.FTimestampKeyStringValUnixSecString, err = jsondecoder.ReadMapI64WKTTsUnixSec(dec, x.FTimestampKeyStringValUnixSecString, true, true); err != nil {
				return err
			}
		case "f_any_key_unset_val_unset":
			if x.FAnyKeyUnsetValUnset, err = jsondecoder.ReadMapI64WKTAnyObject(dec, x.FAnyKeyUnsetValUnset, true); err != nil {
				return err
			}
		case "f_any_key_numeric_val_object":
			if x.FAnyKeyNumericValObject, err = jsondecoder.ReadMapI64WKTAnyObject(dec, x.FAnyKeyNumericValObject, false); err != nil {
				return err
			}
		case "f_any_key_numeric_val_proto":
			if x.FAnyKeyNumericValProto, err = jsondecoder.ReadMapI64WKTAnyProto(dec, x.FAnyKeyNumericValProto, false); err != nil {
				return err
			}
		case "f_any_key_string_val_object":
			if x.FAnyKeyStringValObject, err = jsondecoder.ReadMapI64WKTAnyObject(dec, x.FAnyKeyStringValObject, true); err != nil {
				return err
			}
		case "f_any_key_string_val_proto":
			if x.FAnyKeyStringValProto, err = jsondecoder.ReadMapI64WKTAnyProto(dec, x.FAnyKeyStringValProto, true); err != nil {
				return err
			}
		default:
			if err = dec.DiscardValue(); err != nil {
				return err
			}
		} // end switch
	}
	return nil
}
