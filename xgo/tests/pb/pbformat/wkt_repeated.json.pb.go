// Code generated by protoc-gen-gojson. DO NOT EDIT.
// versions:
// 		protoc-gen-gojson 0.0.1
// source: tests/proto/cases/format/wkt_repeated.proto

package pbformat

import (
	errors "errors"
	_ "github.com/yu31/protoc-plugin-json/xgo/pb/pbjson"
	jsondecoder "github.com/yu31/protoc-plugin-json/xgo/pkg/jsondecoder"
	jsonencoder "github.com/yu31/protoc-plugin-json/xgo/pkg/jsonencoder"
	_ "google.golang.org/protobuf/types/known/anypb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
)

// MarshalJSON implements interface json.Marshaler for proto message WKTRepeated1 in file tests/proto/cases/format/wkt_repeated.proto
func (x *WKTRepeated1) MarshalJSON() ([]byte, error) {
	if x == nil {
		return []byte("null"), nil
	}
	enc := jsonencoder.New(1408)
	enc.AppendObjectBegin() // Add begin JSON identifier

	jsonencoder.AppendListEnumNum(enc, "f_enum_number1", x.FEnumNumber1, false, false)
	jsonencoder.AppendListEnumNum(enc, "f_enum_number_string1", x.FEnumNumberString1, false, true)
	jsonencoder.AppendListEnumStr(enc, "f_enum_string1", x.FEnumString1, false)
	if err := jsonencoder.AppendListWKTAnyObject(enc, "f_any_native1", x.FAnyNative1, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendListWKTAnyProto(enc, "f_any_proto1", x.FAnyProto1, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendListWKTDurObject(enc, "f_duration_native1", x.FDurationNative1, false); err != nil {
		return nil, err
	}
	jsonencoder.AppendListWKTDurTimeStr(enc, "f_duration_string1", x.FDurationString1, false)
	jsonencoder.AppendListWKTDurNano(enc, "f_duration_nanosecond1", x.FDurationNanosecond1, false, false)
	jsonencoder.AppendListWKTDurNano(enc, "f_duration_nanosecond_string1", x.FDurationNanosecondString1, false, true)
	jsonencoder.AppendListWKTDurMicro(enc, "f_duration_microsecond1", x.FDurationMicrosecond1, false, false)
	jsonencoder.AppendListWKTDurMicro(enc, "f_duration_microsecond_string1", x.FDurationMicrosecondString1, false, true)
	jsonencoder.AppendListWKTDurMilli(enc, "f_duration_millisecond1", x.FDurationMillisecond1, false, false)
	jsonencoder.AppendListWKTDurMilli(enc, "f_duration_millisecond_string1", x.FDurationMillisecondString1, false, true)
	jsonencoder.AppendListWKTDurSecond(enc, "f_duration_second1", x.FDurationSecond1, false, false)
	jsonencoder.AppendListWKTDurSecond(enc, "f_duration_second_string1", x.FDurationSecondString1, false, true)
	jsonencoder.AppendListWKTDurMinute(enc, "f_duration_minute1", x.FDurationMinute1, false, false)
	jsonencoder.AppendListWKTDurMinute(enc, "f_duration_minute_string1", x.FDurationMinuteString1, false, true)
	jsonencoder.AppendListWKTDurHour(enc, "f_duration_hour1", x.FDurationHour1, false, false)
	jsonencoder.AppendListWKTDurHour(enc, "f_duration_hour_string1", x.FDurationHourString1, false, true)
	if err := jsonencoder.AppendListWKTTsObject(enc, "f_timestamp_native1", x.FTimestampNative1, false); err != nil {
		return nil, err
	}
	jsonencoder.AppendListWKTTsLayout(enc, "f_timestamp_time_layout1", x.FTimestampTimeLayout1, false, "2006-01-02T15:04:05Z07:00")
	jsonencoder.AppendListWKTTsUnixNano(enc, "f_timestamp_unix_nano1", x.FTimestampUnixNano1, false, false)
	jsonencoder.AppendListWKTTsUnixNano(enc, "f_timestamp_unix_nano_string1", x.FTimestampUnixNanoString1, false, true)
	jsonencoder.AppendListWKTTsUnixMicro(enc, "f_timestamp_unix_micro1", x.FTimestampUnixMicro1, false, false)
	jsonencoder.AppendListWKTTsUnixMicro(enc, "f_timestamp_unix_micro_string1", x.FTimestampUnixMicroString1, false, true)
	jsonencoder.AppendListWKTTsUnixMilli(enc, "f_timestamp_unix_milli1", x.FTimestampUnixMilli1, false, false)
	jsonencoder.AppendListWKTTsUnixMilli(enc, "f_timestamp_unix_milli_string1", x.FTimestampUnixMilliString1, false, true)
	jsonencoder.AppendListWKTTsUnixSec(enc, "f_timestamp_unix_sec1", x.FTimestampUnixSec1, false, false)
	jsonencoder.AppendListWKTTsUnixSec(enc, "f_timestamp_unix_sec_string1", x.FTimestampUnixSecString1, false, true)
	enc.AppendObjectEnd() // Add end JSON identifier
	return enc.Bytes(), nil
}

// UnmarshalJSON implements json.Unmarshaler for proto message WKTRepeated1 in file tests/proto/cases/format/wkt_repeated.proto
func (x *WKTRepeated1) UnmarshalJSON(b []byte) error {
	if x == nil {
		return errors.New("json: Unmarshal: xgo/tests/pb/pbformat.(*WKTRepeated1) is nil")
	}
	var (
		err    error
		isNULL bool
		dec    *jsondecoder.Decoder
	)
	if dec, err = jsondecoder.New(b); err != nil {
		return err
	}
	if isNULL, err = dec.BeforeScanJSON(); err != nil || isNULL {
		return err
	}
LOOP_SCAN:
	for { // Loop to read the JSON objects
		var (
			jsonKey string
			isEnd   bool
		)

		if isEnd, err = dec.BeforeScanNext(); err != nil {
			return err
		}
		if isEnd {
			break LOOP_SCAN
		}

		if jsonKey, err = dec.ReadJSONKey(); err != nil {
			return err
		}
		switch jsonKey { // match the jsonKey
		case "f_enum_number1":
			if x.FEnumNumber1, err = jsondecoder.ReadListEnumNum(dec, x.FEnumNumber1, false); err != nil {
				return err
			}
		case "f_enum_number_string1":
			if x.FEnumNumberString1, err = jsondecoder.ReadListEnumNum(dec, x.FEnumNumberString1, true); err != nil {
				return err
			}
		case "f_enum_string1":
			if x.FEnumString1, err = jsondecoder.ReadListEnumStr(dec, x.FEnumString1, Enum1_value); err != nil {
				return err
			}
		case "f_any_native1":
			if x.FAnyNative1, err = jsondecoder.ReadListWKTAnyObject(dec, x.FAnyNative1); err != nil {
				return err
			}
		case "f_any_proto1":
			if x.FAnyProto1, err = jsondecoder.ReadListWKTAnyProto(dec, x.FAnyProto1); err != nil {
				return err
			}
		case "f_duration_native1":
			if x.FDurationNative1, err = jsondecoder.ReadListWKTDurObject(dec, x.FDurationNative1); err != nil {
				return err
			}
		case "f_duration_string1":
			if x.FDurationString1, err = jsondecoder.ReadListWKTDurTimeStr(dec, x.FDurationString1); err != nil {
				return err
			}
		case "f_duration_nanosecond1":
			if x.FDurationNanosecond1, err = jsondecoder.ReadListWKTDurNano(dec, x.FDurationNanosecond1, false); err != nil {
				return err
			}
		case "f_duration_nanosecond_string1":
			if x.FDurationNanosecondString1, err = jsondecoder.ReadListWKTDurNano(dec, x.FDurationNanosecondString1, true); err != nil {
				return err
			}
		case "f_duration_microsecond1":
			if x.FDurationMicrosecond1, err = jsondecoder.ReadListWKTDurMicro(dec, x.FDurationMicrosecond1, false); err != nil {
				return err
			}
		case "f_duration_microsecond_string1":
			if x.FDurationMicrosecondString1, err = jsondecoder.ReadListWKTDurMicro(dec, x.FDurationMicrosecondString1, true); err != nil {
				return err
			}
		case "f_duration_millisecond1":
			if x.FDurationMillisecond1, err = jsondecoder.ReadListWKTDurMilli(dec, x.FDurationMillisecond1, false); err != nil {
				return err
			}
		case "f_duration_millisecond_string1":
			if x.FDurationMillisecondString1, err = jsondecoder.ReadListWKTDurMilli(dec, x.FDurationMillisecondString1, true); err != nil {
				return err
			}
		case "f_duration_second1":
			if x.FDurationSecond1, err = jsondecoder.ReadListWKTDurSecond(dec, x.FDurationSecond1, false); err != nil {
				return err
			}
		case "f_duration_second_string1":
			if x.FDurationSecondString1, err = jsondecoder.ReadListWKTDurSecond(dec, x.FDurationSecondString1, true); err != nil {
				return err
			}
		case "f_duration_minute1":
			if x.FDurationMinute1, err = jsondecoder.ReadListWKTDurMinute(dec, x.FDurationMinute1, false); err != nil {
				return err
			}
		case "f_duration_minute_string1":
			if x.FDurationMinuteString1, err = jsondecoder.ReadListWKTDurMinute(dec, x.FDurationMinuteString1, true); err != nil {
				return err
			}
		case "f_duration_hour1":
			if x.FDurationHour1, err = jsondecoder.ReadListWKTDurHour(dec, x.FDurationHour1, false); err != nil {
				return err
			}
		case "f_duration_hour_string1":
			if x.FDurationHourString1, err = jsondecoder.ReadListWKTDurHour(dec, x.FDurationHourString1, true); err != nil {
				return err
			}
		case "f_timestamp_native1":
			if x.FTimestampNative1, err = jsondecoder.ReadListWKTTsObject(dec, x.FTimestampNative1); err != nil {
				return err
			}
		case "f_timestamp_time_layout1":
			if x.FTimestampTimeLayout1, err = jsondecoder.ReadListWKTTsLayout(dec, x.FTimestampTimeLayout1, "2006-01-02T15:04:05Z07:00"); err != nil {
				return err
			}
		case "f_timestamp_unix_nano1":
			if x.FTimestampUnixNano1, err = jsondecoder.ReadListWKTTsUnixNano(dec, x.FTimestampUnixNano1, false); err != nil {
				return err
			}
		case "f_timestamp_unix_nano_string1":
			if x.FTimestampUnixNanoString1, err = jsondecoder.ReadListWKTTsUnixNano(dec, x.FTimestampUnixNanoString1, true); err != nil {
				return err
			}
		case "f_timestamp_unix_micro1":
			if x.FTimestampUnixMicro1, err = jsondecoder.ReadListWKTTsUnixMicro(dec, x.FTimestampUnixMicro1, false); err != nil {
				return err
			}
		case "f_timestamp_unix_micro_string1":
			if x.FTimestampUnixMicroString1, err = jsondecoder.ReadListWKTTsUnixMicro(dec, x.FTimestampUnixMicroString1, true); err != nil {
				return err
			}
		case "f_timestamp_unix_milli1":
			if x.FTimestampUnixMilli1, err = jsondecoder.ReadListWKTTsUnixMilli(dec, x.FTimestampUnixMilli1, false); err != nil {
				return err
			}
		case "f_timestamp_unix_milli_string1":
			if x.FTimestampUnixMilliString1, err = jsondecoder.ReadListWKTTsUnixMilli(dec, x.FTimestampUnixMilliString1, true); err != nil {
				return err
			}
		case "f_timestamp_unix_sec1":
			if x.FTimestampUnixSec1, err = jsondecoder.ReadListWKTTsUnixSec(dec, x.FTimestampUnixSec1, false); err != nil {
				return err
			}
		case "f_timestamp_unix_sec_string1":
			if x.FTimestampUnixSecString1, err = jsondecoder.ReadListWKTTsUnixSec(dec, x.FTimestampUnixSecString1, true); err != nil {
				return err
			}
		default:
			if err = dec.DiscardValue(); err != nil {
				return err
			}
		} // end switch
	}
	return nil
}
