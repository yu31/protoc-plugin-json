// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: tests/proto/cases/references/type_map.proto

package pbref

import (
	_ "github.com/yu31/protoc-plugin-json/xgo/pb/pbjson"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TypeMap1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FInt32A    map[int32]int32    `protobuf:"bytes,1,rep,name=f_int32a,json=fInt32a,proto3" json:"f_int32a,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FInt32B    map[int32]int32    `protobuf:"bytes,2,rep,name=f_int32b,json=fInt32b,proto3" json:"f_int32b,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FInt64A    map[int64]int64    `protobuf:"bytes,3,rep,name=f_int64a,json=fInt64a,proto3" json:"f_int64a,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FInt64B    map[int64]int64    `protobuf:"bytes,4,rep,name=f_int64b,json=fInt64b,proto3" json:"f_int64b,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FUint32A   map[uint32]uint32  `protobuf:"bytes,5,rep,name=f_uint32a,json=fUint32a,proto3" json:"f_uint32a,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FUint32B   map[uint32]uint32  `protobuf:"bytes,6,rep,name=f_uint32b,json=fUint32b,proto3" json:"f_uint32b,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FUint64A   map[uint64]uint64  `protobuf:"bytes,7,rep,name=f_uint64a,json=fUint64a,proto3" json:"f_uint64a,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FUint64B   map[uint64]uint64  `protobuf:"bytes,8,rep,name=f_uint64b,json=fUint64b,proto3" json:"f_uint64b,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FSint32A   map[int32]int32    `protobuf:"bytes,9,rep,name=f_sint32a,json=fSint32a,proto3" json:"f_sint32a,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	FSint32B   map[int32]int32    `protobuf:"bytes,10,rep,name=f_sint32b,json=fSint32b,proto3" json:"f_sint32b,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	FSint64A   map[int64]int64    `protobuf:"bytes,11,rep,name=f_sint64a,json=fSint64a,proto3" json:"f_sint64a,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	FSint64B   map[int64]int64    `protobuf:"bytes,12,rep,name=f_sint64b,json=fSint64b,proto3" json:"f_sint64b,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	FSfixed32A map[int32]int32    `protobuf:"bytes,13,rep,name=f_sfixed32a,json=fSfixed32a,proto3" json:"f_sfixed32a,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	FSfixed32B map[int32]int32    `protobuf:"bytes,14,rep,name=f_sfixed32b,json=fSfixed32b,proto3" json:"f_sfixed32b,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	FSfixed64A map[int64]int64    `protobuf:"bytes,15,rep,name=f_sfixed64a,json=fSfixed64a,proto3" json:"f_sfixed64a,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	FSfixed64B map[int64]int64    `protobuf:"bytes,16,rep,name=f_sfixed64b,json=fSfixed64b,proto3" json:"f_sfixed64b,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	FFixed32A  map[uint32]uint32  `protobuf:"bytes,17,rep,name=f_fixed32a,json=fFixed32a,proto3" json:"f_fixed32a,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	FFixed32B  map[uint32]uint32  `protobuf:"bytes,18,rep,name=f_fixed32b,json=fFixed32b,proto3" json:"f_fixed32b,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	FFixed64A  map[uint64]uint64  `protobuf:"bytes,19,rep,name=f_fixed64a,json=fFixed64a,proto3" json:"f_fixed64a,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	FFixed64B  map[uint64]uint64  `protobuf:"bytes,20,rep,name=f_fixed64b,json=fFixed64b,proto3" json:"f_fixed64b,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	FFloat1    map[string]float32 `protobuf:"bytes,21,rep,name=f_float1,json=fFloat1,proto3" json:"f_float1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	FFloat2    map[string]float32 `protobuf:"bytes,22,rep,name=f_float2,json=fFloat2,proto3" json:"f_float2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	FDouble1   map[string]float64 `protobuf:"bytes,23,rep,name=f_double1,json=fDouble1,proto3" json:"f_double1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	FDouble2   map[string]float64 `protobuf:"bytes,24,rep,name=f_double2,json=fDouble2,proto3" json:"f_double2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *TypeMap1) Reset() {
	*x = TypeMap1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_cases_references_type_map_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeMap1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeMap1) ProtoMessage() {}

func (x *TypeMap1) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_cases_references_type_map_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeMap1.ProtoReflect.Descriptor instead.
func (*TypeMap1) Descriptor() ([]byte, []int) {
	return file_tests_proto_cases_references_type_map_proto_rawDescGZIP(), []int{0}
}

func (x *TypeMap1) GetFInt32A() map[int32]int32 {
	if x != nil {
		return x.FInt32A
	}
	return nil
}

func (x *TypeMap1) GetFInt32B() map[int32]int32 {
	if x != nil {
		return x.FInt32B
	}
	return nil
}

func (x *TypeMap1) GetFInt64A() map[int64]int64 {
	if x != nil {
		return x.FInt64A
	}
	return nil
}

func (x *TypeMap1) GetFInt64B() map[int64]int64 {
	if x != nil {
		return x.FInt64B
	}
	return nil
}

func (x *TypeMap1) GetFUint32A() map[uint32]uint32 {
	if x != nil {
		return x.FUint32A
	}
	return nil
}

func (x *TypeMap1) GetFUint32B() map[uint32]uint32 {
	if x != nil {
		return x.FUint32B
	}
	return nil
}

func (x *TypeMap1) GetFUint64A() map[uint64]uint64 {
	if x != nil {
		return x.FUint64A
	}
	return nil
}

func (x *TypeMap1) GetFUint64B() map[uint64]uint64 {
	if x != nil {
		return x.FUint64B
	}
	return nil
}

func (x *TypeMap1) GetFSint32A() map[int32]int32 {
	if x != nil {
		return x.FSint32A
	}
	return nil
}

func (x *TypeMap1) GetFSint32B() map[int32]int32 {
	if x != nil {
		return x.FSint32B
	}
	return nil
}

func (x *TypeMap1) GetFSint64A() map[int64]int64 {
	if x != nil {
		return x.FSint64A
	}
	return nil
}

func (x *TypeMap1) GetFSint64B() map[int64]int64 {
	if x != nil {
		return x.FSint64B
	}
	return nil
}

func (x *TypeMap1) GetFSfixed32A() map[int32]int32 {
	if x != nil {
		return x.FSfixed32A
	}
	return nil
}

func (x *TypeMap1) GetFSfixed32B() map[int32]int32 {
	if x != nil {
		return x.FSfixed32B
	}
	return nil
}

func (x *TypeMap1) GetFSfixed64A() map[int64]int64 {
	if x != nil {
		return x.FSfixed64A
	}
	return nil
}

func (x *TypeMap1) GetFSfixed64B() map[int64]int64 {
	if x != nil {
		return x.FSfixed64B
	}
	return nil
}

func (x *TypeMap1) GetFFixed32A() map[uint32]uint32 {
	if x != nil {
		return x.FFixed32A
	}
	return nil
}

func (x *TypeMap1) GetFFixed32B() map[uint32]uint32 {
	if x != nil {
		return x.FFixed32B
	}
	return nil
}

func (x *TypeMap1) GetFFixed64A() map[uint64]uint64 {
	if x != nil {
		return x.FFixed64A
	}
	return nil
}

func (x *TypeMap1) GetFFixed64B() map[uint64]uint64 {
	if x != nil {
		return x.FFixed64B
	}
	return nil
}

func (x *TypeMap1) GetFFloat1() map[string]float32 {
	if x != nil {
		return x.FFloat1
	}
	return nil
}

func (x *TypeMap1) GetFFloat2() map[string]float32 {
	if x != nil {
		return x.FFloat2
	}
	return nil
}

func (x *TypeMap1) GetFDouble1() map[string]float64 {
	if x != nil {
		return x.FDouble1
	}
	return nil
}

func (x *TypeMap1) GetFDouble2() map[string]float64 {
	if x != nil {
		return x.FDouble2
	}
	return nil
}

// Only test marshal/unmarshal
type TypeMap2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FInt32A    map[int32]int32    `protobuf:"bytes,1,rep,name=f_int32a,json=fInt32a,proto3" json:"f_int32a,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FInt32B    map[int32]int32    `protobuf:"bytes,2,rep,name=f_int32b,json=fInt32b,proto3" json:"f_int32b,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FInt64A    map[int64]int64    `protobuf:"bytes,3,rep,name=f_int64a,json=fInt64a,proto3" json:"f_int64a,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FInt64B    map[int64]int64    `protobuf:"bytes,4,rep,name=f_int64b,json=fInt64b,proto3" json:"f_int64b,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FUint32A   map[uint32]uint32  `protobuf:"bytes,5,rep,name=f_uint32a,json=fUint32a,proto3" json:"f_uint32a,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FUint32B   map[uint32]uint32  `protobuf:"bytes,6,rep,name=f_uint32b,json=fUint32b,proto3" json:"f_uint32b,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FUint64A   map[uint64]uint64  `protobuf:"bytes,7,rep,name=f_uint64a,json=fUint64a,proto3" json:"f_uint64a,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FUint64B   map[uint64]uint64  `protobuf:"bytes,8,rep,name=f_uint64b,json=fUint64b,proto3" json:"f_uint64b,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FSint32A   map[int32]int32    `protobuf:"bytes,9,rep,name=f_sint32a,json=fSint32a,proto3" json:"f_sint32a,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	FSint32B   map[int32]int32    `protobuf:"bytes,10,rep,name=f_sint32b,json=fSint32b,proto3" json:"f_sint32b,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	FSint64A   map[int64]int64    `protobuf:"bytes,11,rep,name=f_sint64a,json=fSint64a,proto3" json:"f_sint64a,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	FSint64B   map[int64]int64    `protobuf:"bytes,12,rep,name=f_sint64b,json=fSint64b,proto3" json:"f_sint64b,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	FSfixed32A map[int32]int32    `protobuf:"bytes,13,rep,name=f_sfixed32a,json=fSfixed32a,proto3" json:"f_sfixed32a,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	FSfixed32B map[int32]int32    `protobuf:"bytes,14,rep,name=f_sfixed32b,json=fSfixed32b,proto3" json:"f_sfixed32b,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	FSfixed64A map[int64]int64    `protobuf:"bytes,15,rep,name=f_sfixed64a,json=fSfixed64a,proto3" json:"f_sfixed64a,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	FSfixed64B map[int64]int64    `protobuf:"bytes,16,rep,name=f_sfixed64b,json=fSfixed64b,proto3" json:"f_sfixed64b,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	FFixed32A  map[uint32]uint32  `protobuf:"bytes,17,rep,name=f_fixed32a,json=fFixed32a,proto3" json:"f_fixed32a,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	FFixed32B  map[uint32]uint32  `protobuf:"bytes,18,rep,name=f_fixed32b,json=fFixed32b,proto3" json:"f_fixed32b,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	FFixed64A  map[uint64]uint64  `protobuf:"bytes,19,rep,name=f_fixed64a,json=fFixed64a,proto3" json:"f_fixed64a,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	FFixed64B  map[uint64]uint64  `protobuf:"bytes,20,rep,name=f_fixed64b,json=fFixed64b,proto3" json:"f_fixed64b,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	FFloat1    map[string]float32 `protobuf:"bytes,21,rep,name=f_float1,json=fFloat1,proto3" json:"f_float1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	FFloat2    map[string]float32 `protobuf:"bytes,22,rep,name=f_float2,json=fFloat2,proto3" json:"f_float2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	FDouble1   map[string]float64 `protobuf:"bytes,23,rep,name=f_double1,json=fDouble1,proto3" json:"f_double1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	FDouble2   map[string]float64 `protobuf:"bytes,24,rep,name=f_double2,json=fDouble2,proto3" json:"f_double2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	FBool1     map[bool]bool      `protobuf:"bytes,25,rep,name=f_bool1,json=fBool1,proto3" json:"f_bool1,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FBool2     map[bool]bool      `protobuf:"bytes,27,rep,name=f_bool2,json=fBool2,proto3" json:"f_bool2,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *TypeMap2) Reset() {
	*x = TypeMap2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_cases_references_type_map_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeMap2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeMap2) ProtoMessage() {}

func (x *TypeMap2) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_cases_references_type_map_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeMap2.ProtoReflect.Descriptor instead.
func (*TypeMap2) Descriptor() ([]byte, []int) {
	return file_tests_proto_cases_references_type_map_proto_rawDescGZIP(), []int{1}
}

func (x *TypeMap2) GetFInt32A() map[int32]int32 {
	if x != nil {
		return x.FInt32A
	}
	return nil
}

func (x *TypeMap2) GetFInt32B() map[int32]int32 {
	if x != nil {
		return x.FInt32B
	}
	return nil
}

func (x *TypeMap2) GetFInt64A() map[int64]int64 {
	if x != nil {
		return x.FInt64A
	}
	return nil
}

func (x *TypeMap2) GetFInt64B() map[int64]int64 {
	if x != nil {
		return x.FInt64B
	}
	return nil
}

func (x *TypeMap2) GetFUint32A() map[uint32]uint32 {
	if x != nil {
		return x.FUint32A
	}
	return nil
}

func (x *TypeMap2) GetFUint32B() map[uint32]uint32 {
	if x != nil {
		return x.FUint32B
	}
	return nil
}

func (x *TypeMap2) GetFUint64A() map[uint64]uint64 {
	if x != nil {
		return x.FUint64A
	}
	return nil
}

func (x *TypeMap2) GetFUint64B() map[uint64]uint64 {
	if x != nil {
		return x.FUint64B
	}
	return nil
}

func (x *TypeMap2) GetFSint32A() map[int32]int32 {
	if x != nil {
		return x.FSint32A
	}
	return nil
}

func (x *TypeMap2) GetFSint32B() map[int32]int32 {
	if x != nil {
		return x.FSint32B
	}
	return nil
}

func (x *TypeMap2) GetFSint64A() map[int64]int64 {
	if x != nil {
		return x.FSint64A
	}
	return nil
}

func (x *TypeMap2) GetFSint64B() map[int64]int64 {
	if x != nil {
		return x.FSint64B
	}
	return nil
}

func (x *TypeMap2) GetFSfixed32A() map[int32]int32 {
	if x != nil {
		return x.FSfixed32A
	}
	return nil
}

func (x *TypeMap2) GetFSfixed32B() map[int32]int32 {
	if x != nil {
		return x.FSfixed32B
	}
	return nil
}

func (x *TypeMap2) GetFSfixed64A() map[int64]int64 {
	if x != nil {
		return x.FSfixed64A
	}
	return nil
}

func (x *TypeMap2) GetFSfixed64B() map[int64]int64 {
	if x != nil {
		return x.FSfixed64B
	}
	return nil
}

func (x *TypeMap2) GetFFixed32A() map[uint32]uint32 {
	if x != nil {
		return x.FFixed32A
	}
	return nil
}

func (x *TypeMap2) GetFFixed32B() map[uint32]uint32 {
	if x != nil {
		return x.FFixed32B
	}
	return nil
}

func (x *TypeMap2) GetFFixed64A() map[uint64]uint64 {
	if x != nil {
		return x.FFixed64A
	}
	return nil
}

func (x *TypeMap2) GetFFixed64B() map[uint64]uint64 {
	if x != nil {
		return x.FFixed64B
	}
	return nil
}

func (x *TypeMap2) GetFFloat1() map[string]float32 {
	if x != nil {
		return x.FFloat1
	}
	return nil
}

func (x *TypeMap2) GetFFloat2() map[string]float32 {
	if x != nil {
		return x.FFloat2
	}
	return nil
}

func (x *TypeMap2) GetFDouble1() map[string]float64 {
	if x != nil {
		return x.FDouble1
	}
	return nil
}

func (x *TypeMap2) GetFDouble2() map[string]float64 {
	if x != nil {
		return x.FDouble2
	}
	return nil
}

func (x *TypeMap2) GetFBool1() map[bool]bool {
	if x != nil {
		return x.FBool1
	}
	return nil
}

func (x *TypeMap2) GetFBool2() map[bool]bool {
	if x != nil {
		return x.FBool2
	}
	return nil
}

var File_tests_proto_cases_references_type_map_proto protoreflect.FileDescriptor

var file_tests_proto_cases_references_type_map_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x1a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x1b, 0x0a, 0x08, 0x54, 0x79,
	0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x12, 0x50, 0x0a, 0x08, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22,
	0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x0a, 0x02, 0x08, 0x02, 0x12, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x52,
	0x07, 0x66, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x61, 0x12, 0x50, 0x0a, 0x08, 0x66, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x62, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f,
	0x10, 0x22, 0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x0a, 0x02, 0x08, 0x02, 0x12, 0x04, 0x0a, 0x02, 0x08,
	0x02, 0x52, 0x07, 0x66, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x62, 0x12, 0x50, 0x0a, 0x08, 0x66, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31,
	0x2e, 0x46, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a,
	0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x12, 0x02, 0x08, 0x02, 0x12, 0x04, 0x12,
	0x02, 0x08, 0x01, 0x52, 0x07, 0x66, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x61, 0x12, 0x50, 0x0a, 0x08,
	0x66, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x62, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61,
	0x70, 0x31, 0x2e, 0x46, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x12, 0x02, 0x08, 0x02, 0x12,
	0x04, 0x12, 0x02, 0x08, 0x02, 0x52, 0x07, 0x66, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x62, 0x12, 0x53,
	0x0a, 0x09, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x3a,
	0x02, 0x08, 0x02, 0x12, 0x04, 0x3a, 0x02, 0x08, 0x01, 0x52, 0x08, 0x66, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x61, 0x12, 0x53, 0x0a, 0x09, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x62,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e,
	0x1a, 0x0c, 0x0a, 0x04, 0x3a, 0x02, 0x08, 0x02, 0x12, 0x04, 0x3a, 0x02, 0x08, 0x02, 0x52, 0x08,
	0x66, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x62, 0x12, 0x53, 0x0a, 0x09, 0x66, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e,
	0x46, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a,
	0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x42, 0x02, 0x08, 0x02, 0x12, 0x04, 0x42,
	0x02, 0x08, 0x01, 0x52, 0x08, 0x66, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x61, 0x12, 0x53, 0x0a,
	0x09, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x62, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x62, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x42, 0x02,
	0x08, 0x02, 0x12, 0x04, 0x42, 0x02, 0x08, 0x02, 0x52, 0x08, 0x66, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x62, 0x12, 0x53, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x61, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a,
	0x0c, 0x0a, 0x04, 0x1a, 0x02, 0x08, 0x02, 0x12, 0x04, 0x1a, 0x02, 0x08, 0x01, 0x52, 0x08, 0x66,
	0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x61, 0x12, 0x53, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x62, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46,
	0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2,
	0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x1a, 0x02, 0x08, 0x02, 0x12, 0x04, 0x1a, 0x02,
	0x08, 0x02, 0x52, 0x08, 0x66, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x62, 0x12, 0x53, 0x0a, 0x09,
	0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x61, 0x70, 0x31, 0x2e, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x22, 0x02, 0x08,
	0x02, 0x12, 0x04, 0x22, 0x02, 0x08, 0x01, 0x52, 0x08, 0x66, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x61, 0x12, 0x53, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x62, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c,
	0x0a, 0x04, 0x22, 0x02, 0x08, 0x02, 0x12, 0x04, 0x22, 0x02, 0x08, 0x02, 0x52, 0x08, 0x66, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x62, 0x12, 0x59, 0x0a, 0x0b, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x61, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e,
	0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x2a, 0x02, 0x08, 0x02, 0x12,
	0x04, 0x2a, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x61, 0x12, 0x59, 0x0a, 0x0b, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x62,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10,
	0x22, 0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x2a, 0x02, 0x08, 0x02, 0x12, 0x04, 0x2a, 0x02, 0x08, 0x02,
	0x52, 0x0a, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x62, 0x12, 0x59, 0x0a, 0x0b,
	0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x61, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c, 0x0a,
	0x04, 0x32, 0x02, 0x08, 0x02, 0x12, 0x04, 0x32, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x66, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x61, 0x12, 0x59, 0x0a, 0x0b, 0x66, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x62, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31,
	0x2e, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x32, 0x02, 0x08, 0x02,
	0x12, 0x04, 0x32, 0x02, 0x08, 0x02, 0x52, 0x0a, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x62, 0x12, 0x56, 0x0a, 0x0a, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x61,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22,
	0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x4a, 0x02, 0x08, 0x02, 0x12, 0x04, 0x4a, 0x02, 0x08, 0x01, 0x52,
	0x09, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x61, 0x12, 0x56, 0x0a, 0x0a, 0x66, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x62, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61,
	0x70, 0x31, 0x2e, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x62, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x4a, 0x02, 0x08,
	0x02, 0x12, 0x04, 0x4a, 0x02, 0x08, 0x02, 0x52, 0x09, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x62, 0x12, 0x56, 0x0a, 0x0a, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x61,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22,
	0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x52, 0x02, 0x08, 0x02, 0x12, 0x04, 0x52, 0x02, 0x08, 0x01, 0x52,
	0x09, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x61, 0x12, 0x56, 0x0a, 0x0a, 0x66, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x62, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61,
	0x70, 0x31, 0x2e, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x62, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x52, 0x02, 0x08,
	0x02, 0x12, 0x04, 0x52, 0x02, 0x08, 0x02, 0x52, 0x09, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x62, 0x12, 0x4a, 0x0a, 0x08, 0x66, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x31, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x31,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0x8a, 0xa2, 0x1f, 0x0a, 0x22, 0x08, 0x1a, 0x06, 0x12,
	0x04, 0x5a, 0x02, 0x08, 0x01, 0x52, 0x07, 0x66, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x31, 0x12, 0x4a,
	0x0a, 0x08, 0x66, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x0e, 0x8a, 0xa2, 0x1f, 0x0a, 0x22, 0x08, 0x1a, 0x06, 0x12, 0x04, 0x5a, 0x02, 0x08,
	0x02, 0x52, 0x07, 0x66, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x12, 0x4d, 0x0a, 0x09, 0x66, 0x5f,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x31, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70,
	0x31, 0x2e, 0x46, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x0e, 0x8a, 0xa2, 0x1f, 0x0a, 0x22, 0x08, 0x1a, 0x06, 0x12, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52,
	0x08, 0x66, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x31, 0x12, 0x4d, 0x0a, 0x09, 0x66, 0x5f, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x32, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31,
	0x2e, 0x46, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e,
	0x8a, 0xa2, 0x1f, 0x0a, 0x22, 0x08, 0x1a, 0x06, 0x12, 0x04, 0x62, 0x02, 0x08, 0x02, 0x52, 0x08,
	0x66, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x32, 0x1a, 0x3a, 0x0a, 0x0c, 0x46, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x46, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x62, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3a, 0x0a, 0x0c, 0x46, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c,
	0x46, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3b, 0x0a, 0x0d, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d,
	0x46, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x53, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x62, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3d, 0x0a, 0x0f, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0f,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3d, 0x0a, 0x0f, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x62, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0f, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d,
	0x0a, 0x0f, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x10, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a,
	0x0f, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x10, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e,
	0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x46, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x46, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x46, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x31, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3a, 0x0a, 0x0c, 0x46, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d,
	0x46, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xce, 0x1d, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x61, 0x70, 0x32, 0x12, 0x50, 0x0a, 0x08, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c,
	0x0a, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x52, 0x07, 0x66, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x61, 0x12, 0x50, 0x0a, 0x08, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x62, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e,
	0x1a, 0x0c, 0x0a, 0x04, 0x0a, 0x02, 0x08, 0x02, 0x12, 0x04, 0x0a, 0x02, 0x08, 0x02, 0x52, 0x07,
	0x66, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x62, 0x12, 0x50, 0x0a, 0x08, 0x66, 0x5f, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10,
	0x22, 0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x12, 0x02, 0x08, 0x01, 0x12, 0x04, 0x12, 0x02, 0x08, 0x01,
	0x52, 0x07, 0x66, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x61, 0x12, 0x50, 0x0a, 0x08, 0x66, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x62, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e,
	0x46, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2,
	0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x12, 0x02, 0x08, 0x02, 0x12, 0x04, 0x12, 0x02,
	0x08, 0x02, 0x52, 0x07, 0x66, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x62, 0x12, 0x53, 0x0a, 0x09, 0x66,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61,
	0x70, 0x32, 0x2e, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x3a, 0x02, 0x08, 0x01,
	0x12, 0x04, 0x3a, 0x02, 0x08, 0x01, 0x52, 0x08, 0x66, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x61,
	0x12, 0x53, 0x0a, 0x09, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x62, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x62,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c, 0x0a,
	0x04, 0x3a, 0x02, 0x08, 0x02, 0x12, 0x04, 0x3a, 0x02, 0x08, 0x02, 0x52, 0x08, 0x66, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x62, 0x12, 0x53, 0x0a, 0x09, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10,
	0x22, 0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x42, 0x02, 0x08, 0x01, 0x12, 0x04, 0x42, 0x02, 0x08, 0x01,
	0x52, 0x08, 0x66, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x61, 0x12, 0x53, 0x0a, 0x09, 0x66, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x62, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70,
	0x32, 0x2e, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x42, 0x02, 0x08, 0x02, 0x12,
	0x04, 0x42, 0x02, 0x08, 0x02, 0x52, 0x08, 0x66, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x62, 0x12,
	0x53, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x61, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c, 0x0a, 0x04,
	0x1a, 0x02, 0x08, 0x01, 0x12, 0x04, 0x1a, 0x02, 0x08, 0x01, 0x52, 0x08, 0x66, 0x53, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x61, 0x12, 0x53, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x62, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46, 0x53, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22,
	0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x1a, 0x02, 0x08, 0x02, 0x12, 0x04, 0x1a, 0x02, 0x08, 0x02, 0x52,
	0x08, 0x66, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x62, 0x12, 0x53, 0x0a, 0x09, 0x66, 0x5f, 0x73,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32,
	0x2e, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14,
	0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x22, 0x02, 0x08, 0x01, 0x12, 0x04,
	0x22, 0x02, 0x08, 0x01, 0x52, 0x08, 0x66, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x61, 0x12, 0x53,
	0x0a, 0x09, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x62, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x62, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x22,
	0x02, 0x08, 0x02, 0x12, 0x04, 0x22, 0x02, 0x08, 0x02, 0x52, 0x08, 0x66, 0x53, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x62, 0x12, 0x59, 0x0a, 0x0b, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x61, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2,
	0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x2a, 0x02, 0x08, 0x01, 0x12, 0x04, 0x2a, 0x02,
	0x08, 0x01, 0x52, 0x0a, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x61, 0x12, 0x59,
	0x0a, 0x0b, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x62, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a,
	0x0c, 0x0a, 0x04, 0x2a, 0x02, 0x08, 0x02, 0x12, 0x04, 0x2a, 0x02, 0x08, 0x02, 0x52, 0x0a, 0x66,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x62, 0x12, 0x59, 0x0a, 0x0b, 0x66, 0x5f, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x61, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61,
	0x70, 0x32, 0x2e, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x32, 0x02,
	0x08, 0x01, 0x12, 0x04, 0x32, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x61, 0x12, 0x59, 0x0a, 0x0b, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x62, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a,
	0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x32, 0x02, 0x08, 0x02, 0x12, 0x04, 0x32,
	0x02, 0x08, 0x02, 0x52, 0x0a, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x62, 0x12,
	0x56, 0x0a, 0x0a, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x61, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c,
	0x0a, 0x04, 0x4a, 0x02, 0x08, 0x01, 0x12, 0x04, 0x4a, 0x02, 0x08, 0x01, 0x52, 0x09, 0x66, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x61, 0x12, 0x56, 0x0a, 0x0a, 0x66, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x62, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e,
	0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14,
	0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x4a, 0x02, 0x08, 0x02, 0x12, 0x04,
	0x4a, 0x02, 0x08, 0x02, 0x52, 0x09, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x62, 0x12,
	0x56, 0x0a, 0x0a, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x61, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c,
	0x0a, 0x04, 0x52, 0x02, 0x08, 0x01, 0x12, 0x04, 0x52, 0x02, 0x08, 0x01, 0x52, 0x09, 0x66, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x61, 0x12, 0x56, 0x0a, 0x0a, 0x66, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x62, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e,
	0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14,
	0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c, 0x0a, 0x04, 0x52, 0x02, 0x08, 0x02, 0x12, 0x04,
	0x52, 0x02, 0x08, 0x02, 0x52, 0x09, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x62, 0x12,
	0x4a, 0x0a, 0x08, 0x66, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x31, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x31, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x0e, 0x8a, 0xa2, 0x1f, 0x0a, 0x22, 0x08, 0x1a, 0x06, 0x12, 0x04, 0x5a, 0x02,
	0x08, 0x01, 0x52, 0x07, 0x66, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x31, 0x12, 0x4a, 0x0a, 0x08, 0x66,
	0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70,
	0x32, 0x2e, 0x46, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e,
	0x8a, 0xa2, 0x1f, 0x0a, 0x22, 0x08, 0x1a, 0x06, 0x12, 0x04, 0x5a, 0x02, 0x08, 0x02, 0x52, 0x07,
	0x66, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x12, 0x4d, 0x0a, 0x09, 0x66, 0x5f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x31, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0x8a, 0xa2,
	0x1f, 0x0a, 0x22, 0x08, 0x1a, 0x06, 0x12, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x08, 0x66, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x31, 0x12, 0x4d, 0x0a, 0x09, 0x66, 0x5f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x32, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0x8a, 0xa2, 0x1f,
	0x0a, 0x22, 0x08, 0x1a, 0x06, 0x12, 0x04, 0x62, 0x02, 0x08, 0x02, 0x52, 0x08, 0x66, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x32, 0x12, 0x4d, 0x0a, 0x07, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x31,
	0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46, 0x42, 0x6f, 0x6f, 0x6c,
	0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c,
	0x0a, 0x04, 0x6a, 0x02, 0x08, 0x01, 0x12, 0x04, 0x6a, 0x02, 0x08, 0x01, 0x52, 0x06, 0x66, 0x42,
	0x6f, 0x6f, 0x6c, 0x31, 0x12, 0x4d, 0x0a, 0x07, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x18,
	0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46, 0x42, 0x6f, 0x6f, 0x6c, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x8a, 0xa2, 0x1f, 0x10, 0x22, 0x0e, 0x1a, 0x0c, 0x0a,
	0x04, 0x6a, 0x02, 0x08, 0x02, 0x12, 0x04, 0x6a, 0x02, 0x08, 0x02, 0x52, 0x06, 0x66, 0x42, 0x6f,
	0x6f, 0x6c, 0x32, 0x1a, 0x3a, 0x0a, 0x0c, 0x46, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3a, 0x0a, 0x0c, 0x46, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x46,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x46, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x62, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a,
	0x0d, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x53, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x62,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b,
	0x0a, 0x0d, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x46,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x46, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x46, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x10, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x46, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x10, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x46, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x62, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3a, 0x0a, 0x0c, 0x46, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x46,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x42, 0x6f, 0x6f, 0x6c, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b,
	0x46, 0x42, 0x6f, 0x6f, 0x6c, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x14, 0x5a, 0x12, 0x78, 0x67, 0x6f, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x62, 0x72, 0x65, 0x66, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tests_proto_cases_references_type_map_proto_rawDescOnce sync.Once
	file_tests_proto_cases_references_type_map_proto_rawDescData = file_tests_proto_cases_references_type_map_proto_rawDesc
)

func file_tests_proto_cases_references_type_map_proto_rawDescGZIP() []byte {
	file_tests_proto_cases_references_type_map_proto_rawDescOnce.Do(func() {
		file_tests_proto_cases_references_type_map_proto_rawDescData = protoimpl.X.CompressGZIP(file_tests_proto_cases_references_type_map_proto_rawDescData)
	})
	return file_tests_proto_cases_references_type_map_proto_rawDescData
}

var file_tests_proto_cases_references_type_map_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_tests_proto_cases_references_type_map_proto_goTypes = []interface{}{
	(*TypeMap1)(nil), // 0: type_map.TypeMap1
	(*TypeMap2)(nil), // 1: type_map.TypeMap2
	nil,              // 2: type_map.TypeMap1.FInt32aEntry
	nil,              // 3: type_map.TypeMap1.FInt32bEntry
	nil,              // 4: type_map.TypeMap1.FInt64aEntry
	nil,              // 5: type_map.TypeMap1.FInt64bEntry
	nil,              // 6: type_map.TypeMap1.FUint32aEntry
	nil,              // 7: type_map.TypeMap1.FUint32bEntry
	nil,              // 8: type_map.TypeMap1.FUint64aEntry
	nil,              // 9: type_map.TypeMap1.FUint64bEntry
	nil,              // 10: type_map.TypeMap1.FSint32aEntry
	nil,              // 11: type_map.TypeMap1.FSint32bEntry
	nil,              // 12: type_map.TypeMap1.FSint64aEntry
	nil,              // 13: type_map.TypeMap1.FSint64bEntry
	nil,              // 14: type_map.TypeMap1.FSfixed32aEntry
	nil,              // 15: type_map.TypeMap1.FSfixed32bEntry
	nil,              // 16: type_map.TypeMap1.FSfixed64aEntry
	nil,              // 17: type_map.TypeMap1.FSfixed64bEntry
	nil,              // 18: type_map.TypeMap1.FFixed32aEntry
	nil,              // 19: type_map.TypeMap1.FFixed32bEntry
	nil,              // 20: type_map.TypeMap1.FFixed64aEntry
	nil,              // 21: type_map.TypeMap1.FFixed64bEntry
	nil,              // 22: type_map.TypeMap1.FFloat1Entry
	nil,              // 23: type_map.TypeMap1.FFloat2Entry
	nil,              // 24: type_map.TypeMap1.FDouble1Entry
	nil,              // 25: type_map.TypeMap1.FDouble2Entry
	nil,              // 26: type_map.TypeMap2.FInt32aEntry
	nil,              // 27: type_map.TypeMap2.FInt32bEntry
	nil,              // 28: type_map.TypeMap2.FInt64aEntry
	nil,              // 29: type_map.TypeMap2.FInt64bEntry
	nil,              // 30: type_map.TypeMap2.FUint32aEntry
	nil,              // 31: type_map.TypeMap2.FUint32bEntry
	nil,              // 32: type_map.TypeMap2.FUint64aEntry
	nil,              // 33: type_map.TypeMap2.FUint64bEntry
	nil,              // 34: type_map.TypeMap2.FSint32aEntry
	nil,              // 35: type_map.TypeMap2.FSint32bEntry
	nil,              // 36: type_map.TypeMap2.FSint64aEntry
	nil,              // 37: type_map.TypeMap2.FSint64bEntry
	nil,              // 38: type_map.TypeMap2.FSfixed32aEntry
	nil,              // 39: type_map.TypeMap2.FSfixed32bEntry
	nil,              // 40: type_map.TypeMap2.FSfixed64aEntry
	nil,              // 41: type_map.TypeMap2.FSfixed64bEntry
	nil,              // 42: type_map.TypeMap2.FFixed32aEntry
	nil,              // 43: type_map.TypeMap2.FFixed32bEntry
	nil,              // 44: type_map.TypeMap2.FFixed64aEntry
	nil,              // 45: type_map.TypeMap2.FFixed64bEntry
	nil,              // 46: type_map.TypeMap2.FFloat1Entry
	nil,              // 47: type_map.TypeMap2.FFloat2Entry
	nil,              // 48: type_map.TypeMap2.FDouble1Entry
	nil,              // 49: type_map.TypeMap2.FDouble2Entry
	nil,              // 50: type_map.TypeMap2.FBool1Entry
	nil,              // 51: type_map.TypeMap2.FBool2Entry
}
var file_tests_proto_cases_references_type_map_proto_depIdxs = []int32{
	2,  // 0: type_map.TypeMap1.f_int32a:type_name -> type_map.TypeMap1.FInt32aEntry
	3,  // 1: type_map.TypeMap1.f_int32b:type_name -> type_map.TypeMap1.FInt32bEntry
	4,  // 2: type_map.TypeMap1.f_int64a:type_name -> type_map.TypeMap1.FInt64aEntry
	5,  // 3: type_map.TypeMap1.f_int64b:type_name -> type_map.TypeMap1.FInt64bEntry
	6,  // 4: type_map.TypeMap1.f_uint32a:type_name -> type_map.TypeMap1.FUint32aEntry
	7,  // 5: type_map.TypeMap1.f_uint32b:type_name -> type_map.TypeMap1.FUint32bEntry
	8,  // 6: type_map.TypeMap1.f_uint64a:type_name -> type_map.TypeMap1.FUint64aEntry
	9,  // 7: type_map.TypeMap1.f_uint64b:type_name -> type_map.TypeMap1.FUint64bEntry
	10, // 8: type_map.TypeMap1.f_sint32a:type_name -> type_map.TypeMap1.FSint32aEntry
	11, // 9: type_map.TypeMap1.f_sint32b:type_name -> type_map.TypeMap1.FSint32bEntry
	12, // 10: type_map.TypeMap1.f_sint64a:type_name -> type_map.TypeMap1.FSint64aEntry
	13, // 11: type_map.TypeMap1.f_sint64b:type_name -> type_map.TypeMap1.FSint64bEntry
	14, // 12: type_map.TypeMap1.f_sfixed32a:type_name -> type_map.TypeMap1.FSfixed32aEntry
	15, // 13: type_map.TypeMap1.f_sfixed32b:type_name -> type_map.TypeMap1.FSfixed32bEntry
	16, // 14: type_map.TypeMap1.f_sfixed64a:type_name -> type_map.TypeMap1.FSfixed64aEntry
	17, // 15: type_map.TypeMap1.f_sfixed64b:type_name -> type_map.TypeMap1.FSfixed64bEntry
	18, // 16: type_map.TypeMap1.f_fixed32a:type_name -> type_map.TypeMap1.FFixed32aEntry
	19, // 17: type_map.TypeMap1.f_fixed32b:type_name -> type_map.TypeMap1.FFixed32bEntry
	20, // 18: type_map.TypeMap1.f_fixed64a:type_name -> type_map.TypeMap1.FFixed64aEntry
	21, // 19: type_map.TypeMap1.f_fixed64b:type_name -> type_map.TypeMap1.FFixed64bEntry
	22, // 20: type_map.TypeMap1.f_float1:type_name -> type_map.TypeMap1.FFloat1Entry
	23, // 21: type_map.TypeMap1.f_float2:type_name -> type_map.TypeMap1.FFloat2Entry
	24, // 22: type_map.TypeMap1.f_double1:type_name -> type_map.TypeMap1.FDouble1Entry
	25, // 23: type_map.TypeMap1.f_double2:type_name -> type_map.TypeMap1.FDouble2Entry
	26, // 24: type_map.TypeMap2.f_int32a:type_name -> type_map.TypeMap2.FInt32aEntry
	27, // 25: type_map.TypeMap2.f_int32b:type_name -> type_map.TypeMap2.FInt32bEntry
	28, // 26: type_map.TypeMap2.f_int64a:type_name -> type_map.TypeMap2.FInt64aEntry
	29, // 27: type_map.TypeMap2.f_int64b:type_name -> type_map.TypeMap2.FInt64bEntry
	30, // 28: type_map.TypeMap2.f_uint32a:type_name -> type_map.TypeMap2.FUint32aEntry
	31, // 29: type_map.TypeMap2.f_uint32b:type_name -> type_map.TypeMap2.FUint32bEntry
	32, // 30: type_map.TypeMap2.f_uint64a:type_name -> type_map.TypeMap2.FUint64aEntry
	33, // 31: type_map.TypeMap2.f_uint64b:type_name -> type_map.TypeMap2.FUint64bEntry
	34, // 32: type_map.TypeMap2.f_sint32a:type_name -> type_map.TypeMap2.FSint32aEntry
	35, // 33: type_map.TypeMap2.f_sint32b:type_name -> type_map.TypeMap2.FSint32bEntry
	36, // 34: type_map.TypeMap2.f_sint64a:type_name -> type_map.TypeMap2.FSint64aEntry
	37, // 35: type_map.TypeMap2.f_sint64b:type_name -> type_map.TypeMap2.FSint64bEntry
	38, // 36: type_map.TypeMap2.f_sfixed32a:type_name -> type_map.TypeMap2.FSfixed32aEntry
	39, // 37: type_map.TypeMap2.f_sfixed32b:type_name -> type_map.TypeMap2.FSfixed32bEntry
	40, // 38: type_map.TypeMap2.f_sfixed64a:type_name -> type_map.TypeMap2.FSfixed64aEntry
	41, // 39: type_map.TypeMap2.f_sfixed64b:type_name -> type_map.TypeMap2.FSfixed64bEntry
	42, // 40: type_map.TypeMap2.f_fixed32a:type_name -> type_map.TypeMap2.FFixed32aEntry
	43, // 41: type_map.TypeMap2.f_fixed32b:type_name -> type_map.TypeMap2.FFixed32bEntry
	44, // 42: type_map.TypeMap2.f_fixed64a:type_name -> type_map.TypeMap2.FFixed64aEntry
	45, // 43: type_map.TypeMap2.f_fixed64b:type_name -> type_map.TypeMap2.FFixed64bEntry
	46, // 44: type_map.TypeMap2.f_float1:type_name -> type_map.TypeMap2.FFloat1Entry
	47, // 45: type_map.TypeMap2.f_float2:type_name -> type_map.TypeMap2.FFloat2Entry
	48, // 46: type_map.TypeMap2.f_double1:type_name -> type_map.TypeMap2.FDouble1Entry
	49, // 47: type_map.TypeMap2.f_double2:type_name -> type_map.TypeMap2.FDouble2Entry
	50, // 48: type_map.TypeMap2.f_bool1:type_name -> type_map.TypeMap2.FBool1Entry
	51, // 49: type_map.TypeMap2.f_bool2:type_name -> type_map.TypeMap2.FBool2Entry
	50, // [50:50] is the sub-list for method output_type
	50, // [50:50] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_tests_proto_cases_references_type_map_proto_init() }
func file_tests_proto_cases_references_type_map_proto_init() {
	if File_tests_proto_cases_references_type_map_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tests_proto_cases_references_type_map_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeMap1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_proto_cases_references_type_map_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeMap2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tests_proto_cases_references_type_map_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tests_proto_cases_references_type_map_proto_goTypes,
		DependencyIndexes: file_tests_proto_cases_references_type_map_proto_depIdxs,
		MessageInfos:      file_tests_proto_cases_references_type_map_proto_msgTypes,
	}.Build()
	File_tests_proto_cases_references_type_map_proto = out.File
	file_tests_proto_cases_references_type_map_proto_rawDesc = nil
	file_tests_proto_cases_references_type_map_proto_goTypes = nil
	file_tests_proto_cases_references_type_map_proto_depIdxs = nil
}
