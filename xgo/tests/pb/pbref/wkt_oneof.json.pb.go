// Code generated by protoc-gen-gojson. DO NOT EDIT.
// versions:
// 		protoc-gen-gojson 0.0.1
// source: tests/proto/cases/references/wkt_oneof.proto

package pbref

import (
	errors "errors"
	_ "github.com/yu31/protoc-plugin-json/xgo/pb/pbjson"
	jsondecoder "github.com/yu31/protoc-plugin-json/xgo/pkg/jsondecoder"
	jsonencoder "github.com/yu31/protoc-plugin-json/xgo/pkg/jsonencoder"
	_ "google.golang.org/protobuf/types/known/anypb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
)

// MarshalJSON implements interface json.Marshaler for proto message WKTOneOf1 in file tests/proto/cases/references/wkt_oneof.proto
func (x *WKTOneOf1) MarshalJSON() ([]byte, error) {
	if x == nil {
		return []byte("null"), nil
	}
	enc := jsonencoder.New(1888)
	enc.AppendObjectBegin() // Add begin JSON identifier

	enc.AppendObjectKey("one_enum1")
	if x.OneEnum1 != nil {
		enc.AppendObjectBegin()
		switch o1_1 := x.OneEnum1.(type) {
		case *WKTOneOf1_FEnumNumber1:
			jsonencoder.AppendValEnumNum(enc, "f_enum_number1", o1_1.FEnumNumber1, false, false)
		case *WKTOneOf1_FEnumString1:
			jsonencoder.AppendValEnumStr(enc, "f_enum_string1", o1_1.FEnumString1, false)
		}
		enc.AppendObjectEnd()
	} else {
		enc.AppendValNULL()
	}
	switch o1_4 := x.OneEnum2.(type) {
	case *WKTOneOf1_FEnumNumberString1:
		jsonencoder.AppendValEnumNum(enc, "f_enum_number_string1", o1_4.FEnumNumberString1, false, true)
	case *WKTOneOf1_FEnumNumberString2:
		jsonencoder.AppendValEnumNum(enc, "f_enum_number_string2", o1_4.FEnumNumberString2, false, true)
	}
	switch o1_7 := x.OneAny1.(type) {
	case *WKTOneOf1_FAnyNative1:
		if err := jsonencoder.AppendValWKTAnyObject(enc, "f_any_native1", o1_7.FAnyNative1, false); err != nil {
			return nil, err
		}
	case *WKTOneOf1_FAnyProto1:
		if err := jsonencoder.AppendValWKTAnyProto(enc, "f_any_proto1", o1_7.FAnyProto1, false); err != nil {
			return nil, err
		}
	}
	enc.AppendObjectKey("one_duration1")
	if x.OneDuration1 != nil {
		enc.AppendObjectBegin()
		switch o1_10 := x.OneDuration1.(type) {
		case *WKTOneOf1_FDurationNative1:
			if err := jsonencoder.AppendValWKTDurObject(enc, "f_duration_native1", o1_10.FDurationNative1, false); err != nil {
				return nil, err
			}
		case *WKTOneOf1_FDurationString1:
			jsonencoder.AppendValWKTDurTimeStr(enc, "f_duration_string1", o1_10.FDurationString1, false)
		}
		enc.AppendObjectEnd()
	} else {
		enc.AppendValNULL()
	}
	switch o1_13 := x.OneDuration2.(type) {
	case *WKTOneOf1_FDurationNanosecond1:
		jsonencoder.AppendValWKTDurNano(enc, "f_duration_nanosecond1", o1_13.FDurationNanosecond1, false, false)
	case *WKTOneOf1_FDurationMicrosecond1:
		jsonencoder.AppendValWKTDurMicro(enc, "f_duration_microsecond1", o1_13.FDurationMicrosecond1, false, false)
	}
	enc.AppendObjectKey("one_duration3")
	if x.OneDuration3 != nil {
		enc.AppendObjectBegin()
		switch o1_16 := x.OneDuration3.(type) {
		case *WKTOneOf1_FDurationMillisecond1:
			jsonencoder.AppendValWKTDurMilli(enc, "f_duration_millisecond1", o1_16.FDurationMillisecond1, false, false)
		case *WKTOneOf1_FDurationSecond1:
			jsonencoder.AppendValWKTDurSecond(enc, "f_duration_second1", o1_16.FDurationSecond1, false, false)
		}
		enc.AppendObjectEnd()
	} else {
		enc.AppendValNULL()
	}
	switch o1_19 := x.OneDuration4.(type) {
	case *WKTOneOf1_FDurationMinute1:
		jsonencoder.AppendValWKTDurMinute(enc, "f_duration_minute1", o1_19.FDurationMinute1, false, false)
	case *WKTOneOf1_FDurationHour1:
		jsonencoder.AppendValWKTDurHour(enc, "f_duration_hour1", o1_19.FDurationHour1, false, false)
	}
	enc.AppendObjectKey("one_duration5")
	if x.OneDuration5 != nil {
		enc.AppendObjectBegin()
		switch o1_22 := x.OneDuration5.(type) {
		case *WKTOneOf1_FDurationNanosecondString1:
			jsonencoder.AppendValWKTDurNano(enc, "f_duration_nanosecond_string1", o1_22.FDurationNanosecondString1, false, true)
		case *WKTOneOf1_FDurationMicrosecondString1:
			jsonencoder.AppendValWKTDurMicro(enc, "f_duration_microsecond_string1", o1_22.FDurationMicrosecondString1, false, true)
		}
		enc.AppendObjectEnd()
	} else {
		enc.AppendValNULL()
	}
	switch o1_25 := x.OneDuration6.(type) {
	case *WKTOneOf1_FDurationMillisecondString1:
		jsonencoder.AppendValWKTDurMilli(enc, "f_duration_millisecond_string1", o1_25.FDurationMillisecondString1, false, true)
	case *WKTOneOf1_FDurationSecondString1:
		jsonencoder.AppendValWKTDurSecond(enc, "f_duration_second_string1", o1_25.FDurationSecondString1, false, true)
	}
	enc.AppendObjectKey("one_duration7")
	if x.OneDuration7 != nil {
		enc.AppendObjectBegin()
		switch o1_28 := x.OneDuration7.(type) {
		case *WKTOneOf1_FDurationMinuteString1:
			jsonencoder.AppendValWKTDurMinute(enc, "f_duration_minute_string1", o1_28.FDurationMinuteString1, false, true)
		case *WKTOneOf1_FDurationHourString1:
			jsonencoder.AppendValWKTDurHour(enc, "f_duration_hour_string1", o1_28.FDurationHourString1, false, true)
		}
		enc.AppendObjectEnd()
	} else {
		enc.AppendValNULL()
	}
	enc.AppendObjectKey("one_timestamp1")
	if x.OneTimestamp1 != nil {
		enc.AppendObjectBegin()
		switch o1_31 := x.OneTimestamp1.(type) {
		case *WKTOneOf1_FTimestampNative1:
			if err := jsonencoder.AppendValWKTTsObject(enc, "f_timestamp_native1", o1_31.FTimestampNative1, false); err != nil {
				return nil, err
			}
		case *WKTOneOf1_FTimestampTimeLayout1:
			jsonencoder.AppendValWKTTsLayout(enc, "f_timestamp_time_layout1", o1_31.FTimestampTimeLayout1, false, "2006-01-02T15:04:05Z07:00")
		}
		enc.AppendObjectEnd()
	} else {
		enc.AppendValNULL()
	}
	switch o1_34 := x.OneTimestamp2.(type) {
	case *WKTOneOf1_FTimestampUnixNano1:
		jsonencoder.AppendValWKTTsUnixNano(enc, "f_timestamp_unix_nano1", o1_34.FTimestampUnixNano1, false, false)
	case *WKTOneOf1_FTimestampUnixMicro1:
		jsonencoder.AppendValWKTTsUnixMicro(enc, "f_timestamp_unix_micro1", o1_34.FTimestampUnixMicro1, false, false)
	}
	enc.AppendObjectKey("one_timestamp3")
	if x.OneTimestamp3 != nil {
		enc.AppendObjectBegin()
		switch o1_37 := x.OneTimestamp3.(type) {
		case *WKTOneOf1_FTimestampUnixMilli1:
			jsonencoder.AppendValWKTTsUnixMilli(enc, "f_timestamp_unix_milli1", o1_37.FTimestampUnixMilli1, false, false)
		case *WKTOneOf1_FTimestampUnixSec1:
			jsonencoder.AppendValWKTTsUnixSec(enc, "f_timestamp_unix_sec1", o1_37.FTimestampUnixSec1, false, false)
		}
		enc.AppendObjectEnd()
	} else {
		enc.AppendValNULL()
	}
	switch o1_40 := x.OneTimestamp4.(type) {
	case *WKTOneOf1_FTimestampUnixNanoString1:
		jsonencoder.AppendValWKTTsUnixNano(enc, "f_timestamp_unix_nano_string1", o1_40.FTimestampUnixNanoString1, false, true)
	case *WKTOneOf1_FTimestampUnixMicroString1:
		jsonencoder.AppendValWKTTsUnixMicro(enc, "f_timestamp_unix_micro_string1", o1_40.FTimestampUnixMicroString1, false, true)
	}
	enc.AppendObjectKey("one_timestamp5")
	if x.OneTimestamp5 != nil {
		enc.AppendObjectBegin()
		switch o1_43 := x.OneTimestamp5.(type) {
		case *WKTOneOf1_FTimestampUnixMilliString1:
			jsonencoder.AppendValWKTTsUnixMilli(enc, "f_timestamp_unix_milli_string1", o1_43.FTimestampUnixMilliString1, false, true)
		case *WKTOneOf1_FTimestampUnixSecString1:
			jsonencoder.AppendValWKTTsUnixSec(enc, "f_timestamp_unix_sec_string1", o1_43.FTimestampUnixSecString1, false, true)
		}
		enc.AppendObjectEnd()
	} else {
		enc.AppendValNULL()
	}
	enc.AppendObjectEnd() // Add end JSON identifier
	return enc.Bytes(), nil
}

// UnmarshalJSON implements json.Unmarshaler for proto message WKTOneOf1 in file tests/proto/cases/references/wkt_oneof.proto
func (x *WKTOneOf1) UnmarshalJSON(b []byte) error {
	if x == nil {
		return errors.New("json: Unmarshal: xgo/tests/pb/pbref.(*WKTOneOf1) is nil")
	}
	var (
		err    error
		isNULL bool
		dec    *jsondecoder.Decoder
	)
	if dec, err = jsondecoder.New(b); err != nil {
		return err
	}
	if isNULL, err = dec.BeforeScanJSON(); err != nil || isNULL {
		return err
	}
	// declares variables to report whether the oneof field is loaded.
	var (
		isLoad_o1_1  bool
		isLoad_o1_4  bool
		isLoad_o1_7  bool
		isLoad_o1_10 bool
		isLoad_o1_13 bool
		isLoad_o1_16 bool
		isLoad_o1_19 bool
		isLoad_o1_22 bool
		isLoad_o1_25 bool
		isLoad_o1_28 bool
		isLoad_o1_31 bool
		isLoad_o1_34 bool
		isLoad_o1_37 bool
		isLoad_o1_40 bool
		isLoad_o1_43 bool
	)

LOOP_SCAN:
	for { // Loop to read the JSON objects
		var (
			jsonKey string
			isEnd   bool
		)

		if isEnd, err = dec.BeforeScanNext(); err != nil {
			return err
		}
		if isEnd {
			break LOOP_SCAN
		}

		if jsonKey, err = dec.ReadJSONKey(); err != nil {
			return err
		}
		switch jsonKey { // match the jsonKey
		case "one_enum1":
			if isNULL, err = dec.BeforeReadObject(); err != nil {
				return err
			}
			if isNULL {
				x.OneEnum1 = nil
			} else {
				for { // Loop to read oneof fields
					if isEnd, err = dec.BeforeReadNext(); err != nil {
						return err
					}
					if isEnd {
						break
					}
					var oneOfKey1_1 string
					if oneOfKey1_1, err = dec.ReadObjectKey(); err != nil {
						return err
					}
					switch oneOfKey1_1 { // match the oneof key
					case "f_enum_number1":
						if isLoad_o1_1 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_1 = true
						o1_1, ok := x.OneEnum1.(*WKTOneOf1_FEnumNumber1)
						if !ok {
							o1_1 = new(WKTOneOf1_FEnumNumber1)
							x.OneEnum1 = o1_1
						}
						if o1_1.FEnumNumber1, err = jsondecoder.ReadValEnumNum(dec, o1_1.FEnumNumber1, false); err != nil {
							return err
						}
					case "f_enum_string1":
						if isLoad_o1_1 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_1 = true
						o1_1, ok := x.OneEnum1.(*WKTOneOf1_FEnumString1)
						if !ok {
							o1_1 = new(WKTOneOf1_FEnumString1)
							x.OneEnum1 = o1_1
						}
						if o1_1.FEnumString1, err = jsondecoder.ReadValEnumStr(dec, o1_1.FEnumString1, Enum1_value); err != nil {
							return err
						}
					default:
						if err = dec.DiscardValue(); err != nil {
							return err
						}
					}
				}
			}
		case "f_enum_number_string1":
			if isLoad_o1_4 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_4 = true
			o1_4, ok := x.OneEnum2.(*WKTOneOf1_FEnumNumberString1)
			if !ok {
				o1_4 = new(WKTOneOf1_FEnumNumberString1)
				x.OneEnum2 = o1_4
			}
			if o1_4.FEnumNumberString1, err = jsondecoder.ReadValEnumNum(dec, o1_4.FEnumNumberString1, true); err != nil {
				return err
			}
		case "f_enum_number_string2":
			if isLoad_o1_4 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_4 = true
			o1_4, ok := x.OneEnum2.(*WKTOneOf1_FEnumNumberString2)
			if !ok {
				o1_4 = new(WKTOneOf1_FEnumNumberString2)
				x.OneEnum2 = o1_4
			}
			if o1_4.FEnumNumberString2, err = jsondecoder.ReadValEnumNum(dec, o1_4.FEnumNumberString2, true); err != nil {
				return err
			}
		case "f_any_native1":
			if isLoad_o1_7 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_7 = true
			o1_7, ok := x.OneAny1.(*WKTOneOf1_FAnyNative1)
			if !ok {
				o1_7 = new(WKTOneOf1_FAnyNative1)
				x.OneAny1 = o1_7
			}
			if o1_7.FAnyNative1, err = jsondecoder.ReadValWKTAnyObject(dec, o1_7.FAnyNative1); err != nil {
				return err
			}
		case "f_any_proto1":
			if isLoad_o1_7 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_7 = true
			o1_7, ok := x.OneAny1.(*WKTOneOf1_FAnyProto1)
			if !ok {
				o1_7 = new(WKTOneOf1_FAnyProto1)
				x.OneAny1 = o1_7
			}
			if o1_7.FAnyProto1, err = jsondecoder.ReadValWKTAnyProto(dec, o1_7.FAnyProto1); err != nil {
				return err
			}
		case "one_duration1":
			if isNULL, err = dec.BeforeReadObject(); err != nil {
				return err
			}
			if isNULL {
				x.OneDuration1 = nil
			} else {
				for { // Loop to read oneof fields
					if isEnd, err = dec.BeforeReadNext(); err != nil {
						return err
					}
					if isEnd {
						break
					}
					var oneOfKey1_10 string
					if oneOfKey1_10, err = dec.ReadObjectKey(); err != nil {
						return err
					}
					switch oneOfKey1_10 { // match the oneof key
					case "f_duration_native1":
						if isLoad_o1_10 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_10 = true
						o1_10, ok := x.OneDuration1.(*WKTOneOf1_FDurationNative1)
						if !ok {
							o1_10 = new(WKTOneOf1_FDurationNative1)
							x.OneDuration1 = o1_10
						}
						if o1_10.FDurationNative1, err = jsondecoder.ReadValWKTDurObject(dec, o1_10.FDurationNative1); err != nil {
							return err
						}
					case "f_duration_string1":
						if isLoad_o1_10 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_10 = true
						o1_10, ok := x.OneDuration1.(*WKTOneOf1_FDurationString1)
						if !ok {
							o1_10 = new(WKTOneOf1_FDurationString1)
							x.OneDuration1 = o1_10
						}
						if o1_10.FDurationString1, err = jsondecoder.ReadValWKTDurTimeStr(dec, o1_10.FDurationString1); err != nil {
							return err
						}
					default:
						if err = dec.DiscardValue(); err != nil {
							return err
						}
					}
				}
			}
		case "f_duration_nanosecond1":
			if isLoad_o1_13 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_13 = true
			o1_13, ok := x.OneDuration2.(*WKTOneOf1_FDurationNanosecond1)
			if !ok {
				o1_13 = new(WKTOneOf1_FDurationNanosecond1)
				x.OneDuration2 = o1_13
			}
			if o1_13.FDurationNanosecond1, err = jsondecoder.ReadValWKTDurNano(dec, o1_13.FDurationNanosecond1, false); err != nil {
				return err
			}
		case "f_duration_microsecond1":
			if isLoad_o1_13 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_13 = true
			o1_13, ok := x.OneDuration2.(*WKTOneOf1_FDurationMicrosecond1)
			if !ok {
				o1_13 = new(WKTOneOf1_FDurationMicrosecond1)
				x.OneDuration2 = o1_13
			}
			if o1_13.FDurationMicrosecond1, err = jsondecoder.ReadValWKTDurMicro(dec, o1_13.FDurationMicrosecond1, false); err != nil {
				return err
			}
		case "one_duration3":
			if isNULL, err = dec.BeforeReadObject(); err != nil {
				return err
			}
			if isNULL {
				x.OneDuration3 = nil
			} else {
				for { // Loop to read oneof fields
					if isEnd, err = dec.BeforeReadNext(); err != nil {
						return err
					}
					if isEnd {
						break
					}
					var oneOfKey1_16 string
					if oneOfKey1_16, err = dec.ReadObjectKey(); err != nil {
						return err
					}
					switch oneOfKey1_16 { // match the oneof key
					case "f_duration_millisecond1":
						if isLoad_o1_16 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_16 = true
						o1_16, ok := x.OneDuration3.(*WKTOneOf1_FDurationMillisecond1)
						if !ok {
							o1_16 = new(WKTOneOf1_FDurationMillisecond1)
							x.OneDuration3 = o1_16
						}
						if o1_16.FDurationMillisecond1, err = jsondecoder.ReadValWKTDurMilli(dec, o1_16.FDurationMillisecond1, false); err != nil {
							return err
						}
					case "f_duration_second1":
						if isLoad_o1_16 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_16 = true
						o1_16, ok := x.OneDuration3.(*WKTOneOf1_FDurationSecond1)
						if !ok {
							o1_16 = new(WKTOneOf1_FDurationSecond1)
							x.OneDuration3 = o1_16
						}
						if o1_16.FDurationSecond1, err = jsondecoder.ReadValWKTDurSecond(dec, o1_16.FDurationSecond1, false); err != nil {
							return err
						}
					default:
						if err = dec.DiscardValue(); err != nil {
							return err
						}
					}
				}
			}
		case "f_duration_minute1":
			if isLoad_o1_19 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_19 = true
			o1_19, ok := x.OneDuration4.(*WKTOneOf1_FDurationMinute1)
			if !ok {
				o1_19 = new(WKTOneOf1_FDurationMinute1)
				x.OneDuration4 = o1_19
			}
			if o1_19.FDurationMinute1, err = jsondecoder.ReadValWKTDurMinute(dec, o1_19.FDurationMinute1, false); err != nil {
				return err
			}
		case "f_duration_hour1":
			if isLoad_o1_19 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_19 = true
			o1_19, ok := x.OneDuration4.(*WKTOneOf1_FDurationHour1)
			if !ok {
				o1_19 = new(WKTOneOf1_FDurationHour1)
				x.OneDuration4 = o1_19
			}
			if o1_19.FDurationHour1, err = jsondecoder.ReadValWKTDurHour(dec, o1_19.FDurationHour1, false); err != nil {
				return err
			}
		case "one_duration5":
			if isNULL, err = dec.BeforeReadObject(); err != nil {
				return err
			}
			if isNULL {
				x.OneDuration5 = nil
			} else {
				for { // Loop to read oneof fields
					if isEnd, err = dec.BeforeReadNext(); err != nil {
						return err
					}
					if isEnd {
						break
					}
					var oneOfKey1_22 string
					if oneOfKey1_22, err = dec.ReadObjectKey(); err != nil {
						return err
					}
					switch oneOfKey1_22 { // match the oneof key
					case "f_duration_nanosecond_string1":
						if isLoad_o1_22 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_22 = true
						o1_22, ok := x.OneDuration5.(*WKTOneOf1_FDurationNanosecondString1)
						if !ok {
							o1_22 = new(WKTOneOf1_FDurationNanosecondString1)
							x.OneDuration5 = o1_22
						}
						if o1_22.FDurationNanosecondString1, err = jsondecoder.ReadValWKTDurNano(dec, o1_22.FDurationNanosecondString1, true); err != nil {
							return err
						}
					case "f_duration_microsecond_string1":
						if isLoad_o1_22 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_22 = true
						o1_22, ok := x.OneDuration5.(*WKTOneOf1_FDurationMicrosecondString1)
						if !ok {
							o1_22 = new(WKTOneOf1_FDurationMicrosecondString1)
							x.OneDuration5 = o1_22
						}
						if o1_22.FDurationMicrosecondString1, err = jsondecoder.ReadValWKTDurMicro(dec, o1_22.FDurationMicrosecondString1, true); err != nil {
							return err
						}
					default:
						if err = dec.DiscardValue(); err != nil {
							return err
						}
					}
				}
			}
		case "f_duration_millisecond_string1":
			if isLoad_o1_25 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_25 = true
			o1_25, ok := x.OneDuration6.(*WKTOneOf1_FDurationMillisecondString1)
			if !ok {
				o1_25 = new(WKTOneOf1_FDurationMillisecondString1)
				x.OneDuration6 = o1_25
			}
			if o1_25.FDurationMillisecondString1, err = jsondecoder.ReadValWKTDurMilli(dec, o1_25.FDurationMillisecondString1, true); err != nil {
				return err
			}
		case "f_duration_second_string1":
			if isLoad_o1_25 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_25 = true
			o1_25, ok := x.OneDuration6.(*WKTOneOf1_FDurationSecondString1)
			if !ok {
				o1_25 = new(WKTOneOf1_FDurationSecondString1)
				x.OneDuration6 = o1_25
			}
			if o1_25.FDurationSecondString1, err = jsondecoder.ReadValWKTDurSecond(dec, o1_25.FDurationSecondString1, true); err != nil {
				return err
			}
		case "one_duration7":
			if isNULL, err = dec.BeforeReadObject(); err != nil {
				return err
			}
			if isNULL {
				x.OneDuration7 = nil
			} else {
				for { // Loop to read oneof fields
					if isEnd, err = dec.BeforeReadNext(); err != nil {
						return err
					}
					if isEnd {
						break
					}
					var oneOfKey1_28 string
					if oneOfKey1_28, err = dec.ReadObjectKey(); err != nil {
						return err
					}
					switch oneOfKey1_28 { // match the oneof key
					case "f_duration_minute_string1":
						if isLoad_o1_28 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_28 = true
						o1_28, ok := x.OneDuration7.(*WKTOneOf1_FDurationMinuteString1)
						if !ok {
							o1_28 = new(WKTOneOf1_FDurationMinuteString1)
							x.OneDuration7 = o1_28
						}
						if o1_28.FDurationMinuteString1, err = jsondecoder.ReadValWKTDurMinute(dec, o1_28.FDurationMinuteString1, true); err != nil {
							return err
						}
					case "f_duration_hour_string1":
						if isLoad_o1_28 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_28 = true
						o1_28, ok := x.OneDuration7.(*WKTOneOf1_FDurationHourString1)
						if !ok {
							o1_28 = new(WKTOneOf1_FDurationHourString1)
							x.OneDuration7 = o1_28
						}
						if o1_28.FDurationHourString1, err = jsondecoder.ReadValWKTDurHour(dec, o1_28.FDurationHourString1, true); err != nil {
							return err
						}
					default:
						if err = dec.DiscardValue(); err != nil {
							return err
						}
					}
				}
			}
		case "one_timestamp1":
			if isNULL, err = dec.BeforeReadObject(); err != nil {
				return err
			}
			if isNULL {
				x.OneTimestamp1 = nil
			} else {
				for { // Loop to read oneof fields
					if isEnd, err = dec.BeforeReadNext(); err != nil {
						return err
					}
					if isEnd {
						break
					}
					var oneOfKey1_31 string
					if oneOfKey1_31, err = dec.ReadObjectKey(); err != nil {
						return err
					}
					switch oneOfKey1_31 { // match the oneof key
					case "f_timestamp_native1":
						if isLoad_o1_31 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_31 = true
						o1_31, ok := x.OneTimestamp1.(*WKTOneOf1_FTimestampNative1)
						if !ok {
							o1_31 = new(WKTOneOf1_FTimestampNative1)
							x.OneTimestamp1 = o1_31
						}
						if o1_31.FTimestampNative1, err = jsondecoder.ReadValWKTTsObject(dec, o1_31.FTimestampNative1); err != nil {
							return err
						}
					case "f_timestamp_time_layout1":
						if isLoad_o1_31 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_31 = true
						o1_31, ok := x.OneTimestamp1.(*WKTOneOf1_FTimestampTimeLayout1)
						if !ok {
							o1_31 = new(WKTOneOf1_FTimestampTimeLayout1)
							x.OneTimestamp1 = o1_31
						}
						if o1_31.FTimestampTimeLayout1, err = jsondecoder.ReadValWKTTsLayout(dec, o1_31.FTimestampTimeLayout1, "2006-01-02T15:04:05Z07:00"); err != nil {
							return err
						}
					default:
						if err = dec.DiscardValue(); err != nil {
							return err
						}
					}
				}
			}
		case "f_timestamp_unix_nano1":
			if isLoad_o1_34 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_34 = true
			o1_34, ok := x.OneTimestamp2.(*WKTOneOf1_FTimestampUnixNano1)
			if !ok {
				o1_34 = new(WKTOneOf1_FTimestampUnixNano1)
				x.OneTimestamp2 = o1_34
			}
			if o1_34.FTimestampUnixNano1, err = jsondecoder.ReadValWKTTsUnixNano(dec, o1_34.FTimestampUnixNano1, false); err != nil {
				return err
			}
		case "f_timestamp_unix_micro1":
			if isLoad_o1_34 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_34 = true
			o1_34, ok := x.OneTimestamp2.(*WKTOneOf1_FTimestampUnixMicro1)
			if !ok {
				o1_34 = new(WKTOneOf1_FTimestampUnixMicro1)
				x.OneTimestamp2 = o1_34
			}
			if o1_34.FTimestampUnixMicro1, err = jsondecoder.ReadValWKTTsUnixMicro(dec, o1_34.FTimestampUnixMicro1, false); err != nil {
				return err
			}
		case "one_timestamp3":
			if isNULL, err = dec.BeforeReadObject(); err != nil {
				return err
			}
			if isNULL {
				x.OneTimestamp3 = nil
			} else {
				for { // Loop to read oneof fields
					if isEnd, err = dec.BeforeReadNext(); err != nil {
						return err
					}
					if isEnd {
						break
					}
					var oneOfKey1_37 string
					if oneOfKey1_37, err = dec.ReadObjectKey(); err != nil {
						return err
					}
					switch oneOfKey1_37 { // match the oneof key
					case "f_timestamp_unix_milli1":
						if isLoad_o1_37 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_37 = true
						o1_37, ok := x.OneTimestamp3.(*WKTOneOf1_FTimestampUnixMilli1)
						if !ok {
							o1_37 = new(WKTOneOf1_FTimestampUnixMilli1)
							x.OneTimestamp3 = o1_37
						}
						if o1_37.FTimestampUnixMilli1, err = jsondecoder.ReadValWKTTsUnixMilli(dec, o1_37.FTimestampUnixMilli1, false); err != nil {
							return err
						}
					case "f_timestamp_unix_sec1":
						if isLoad_o1_37 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_37 = true
						o1_37, ok := x.OneTimestamp3.(*WKTOneOf1_FTimestampUnixSec1)
						if !ok {
							o1_37 = new(WKTOneOf1_FTimestampUnixSec1)
							x.OneTimestamp3 = o1_37
						}
						if o1_37.FTimestampUnixSec1, err = jsondecoder.ReadValWKTTsUnixSec(dec, o1_37.FTimestampUnixSec1, false); err != nil {
							return err
						}
					default:
						if err = dec.DiscardValue(); err != nil {
							return err
						}
					}
				}
			}
		case "f_timestamp_unix_nano_string1":
			if isLoad_o1_40 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_40 = true
			o1_40, ok := x.OneTimestamp4.(*WKTOneOf1_FTimestampUnixNanoString1)
			if !ok {
				o1_40 = new(WKTOneOf1_FTimestampUnixNanoString1)
				x.OneTimestamp4 = o1_40
			}
			if o1_40.FTimestampUnixNanoString1, err = jsondecoder.ReadValWKTTsUnixNano(dec, o1_40.FTimestampUnixNanoString1, true); err != nil {
				return err
			}
		case "f_timestamp_unix_micro_string1":
			if isLoad_o1_40 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_40 = true
			o1_40, ok := x.OneTimestamp4.(*WKTOneOf1_FTimestampUnixMicroString1)
			if !ok {
				o1_40 = new(WKTOneOf1_FTimestampUnixMicroString1)
				x.OneTimestamp4 = o1_40
			}
			if o1_40.FTimestampUnixMicroString1, err = jsondecoder.ReadValWKTTsUnixMicro(dec, o1_40.FTimestampUnixMicroString1, true); err != nil {
				return err
			}
		case "one_timestamp5":
			if isNULL, err = dec.BeforeReadObject(); err != nil {
				return err
			}
			if isNULL {
				x.OneTimestamp5 = nil
			} else {
				for { // Loop to read oneof fields
					if isEnd, err = dec.BeforeReadNext(); err != nil {
						return err
					}
					if isEnd {
						break
					}
					var oneOfKey1_43 string
					if oneOfKey1_43, err = dec.ReadObjectKey(); err != nil {
						return err
					}
					switch oneOfKey1_43 { // match the oneof key
					case "f_timestamp_unix_milli_string1":
						if isLoad_o1_43 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_43 = true
						o1_43, ok := x.OneTimestamp5.(*WKTOneOf1_FTimestampUnixMilliString1)
						if !ok {
							o1_43 = new(WKTOneOf1_FTimestampUnixMilliString1)
							x.OneTimestamp5 = o1_43
						}
						if o1_43.FTimestampUnixMilliString1, err = jsondecoder.ReadValWKTTsUnixMilli(dec, o1_43.FTimestampUnixMilliString1, true); err != nil {
							return err
						}
					case "f_timestamp_unix_sec_string1":
						if isLoad_o1_43 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_43 = true
						o1_43, ok := x.OneTimestamp5.(*WKTOneOf1_FTimestampUnixSecString1)
						if !ok {
							o1_43 = new(WKTOneOf1_FTimestampUnixSecString1)
							x.OneTimestamp5 = o1_43
						}
						if o1_43.FTimestampUnixSecString1, err = jsondecoder.ReadValWKTTsUnixSec(dec, o1_43.FTimestampUnixSecString1, true); err != nil {
							return err
						}
					default:
						if err = dec.DiscardValue(); err != nil {
							return err
						}
					}
				}
			}
		default:
			if err = dec.DiscardValue(); err != nil {
				return err
			}
		} // end switch
	}
	return nil
}
