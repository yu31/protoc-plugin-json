// Code generated by protoc-gen-gojson. DO NOT EDIT.
// versions:
// 		protoc-gen-gojson 0.0.1
// source: tests/proto/cases/base/type_oneof.proto

package pbbase

import (
	errors "errors"
	_ "github.com/yu31/protoc-plugin-json/xgo/pb/pbjson"
	jsondecoder "github.com/yu31/protoc-plugin-json/xgo/pkg/jsondecoder"
	jsonencoder "github.com/yu31/protoc-plugin-json/xgo/pkg/jsonencoder"
	_ "github.com/yu31/protoc-plugin-json/xgo/tests/pb/pbexternal"
	_ "google.golang.org/protobuf/types/known/anypb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
)

// MarshalJSON implements interface json.Marshaler for proto message MessageOneOf1 in file tests/proto/cases/base/type_oneof.proto
func (x *MessageOneOf1) MarshalJSON() ([]byte, error) {
	if x == nil {
		return []byte("null"), nil
	}
	enc := jsonencoder.New(72)
	enc.AppendObjectBegin() // Add begin JSON identifier

	jsonencoder.AppendValStr(enc, "f_string1", x.FString1, false)
	jsonencoder.AppendValStr(enc, "f_string2", x.FString2, false)
	jsonencoder.AppendValStr(enc, "f_string3", x.FString3, false)
	enc.AppendObjectEnd() // Add end JSON identifier
	return enc.Bytes(), nil
}

// UnmarshalJSON implements json.Unmarshaler for proto message MessageOneOf1 in file tests/proto/cases/base/type_oneof.proto
func (x *MessageOneOf1) UnmarshalJSON(b []byte) error {
	if x == nil {
		return errors.New("json: Unmarshal: xgo/tests/pb/pbbase.(*MessageOneOf1) is nil")
	}
	var (
		err    error
		isNULL bool
		dec    *jsondecoder.Decoder
	)
	if dec, err = jsondecoder.New(b); err != nil {
		return err
	}
	if isNULL, err = dec.BeforeScanJSON(); err != nil || isNULL {
		return err
	}
LOOP_SCAN:
	for { // Loop to read the JSON objects
		var (
			jsonKey string
			isEnd   bool
		)

		if isEnd, err = dec.BeforeScanNext(); err != nil {
			return err
		}
		if isEnd {
			break LOOP_SCAN
		}

		if jsonKey, err = dec.ReadJSONKey(); err != nil {
			return err
		}
		switch jsonKey { // match the jsonKey
		case "f_string1":
			if x.FString1, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_string2":
			if x.FString2, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_string3":
			if x.FString3, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		default:
			if err = dec.DiscardValue(); err != nil {
				return err
			}
		} // end switch
	}
	return nil
}

// MarshalJSON implements interface json.Marshaler for proto message Embed1 in file tests/proto/cases/base/type_oneof.proto
func (x *MessageOneOf1_Embed1) MarshalJSON() ([]byte, error) {
	if x == nil {
		return []byte("null"), nil
	}
	enc := jsonencoder.New(72)
	enc.AppendObjectBegin() // Add begin JSON identifier

	jsonencoder.AppendValStr(enc, "f_string1", x.FString1, false)
	jsonencoder.AppendValStr(enc, "f_string2", x.FString2, false)
	jsonencoder.AppendValStr(enc, "f_string3", x.FString3, false)
	enc.AppendObjectEnd() // Add end JSON identifier
	return enc.Bytes(), nil
}

// UnmarshalJSON implements json.Unmarshaler for proto message Embed1 in file tests/proto/cases/base/type_oneof.proto
func (x *MessageOneOf1_Embed1) UnmarshalJSON(b []byte) error {
	if x == nil {
		return errors.New("json: Unmarshal: xgo/tests/pb/pbbase.(*MessageOneOf1_Embed1) is nil")
	}
	var (
		err    error
		isNULL bool
		dec    *jsondecoder.Decoder
	)
	if dec, err = jsondecoder.New(b); err != nil {
		return err
	}
	if isNULL, err = dec.BeforeScanJSON(); err != nil || isNULL {
		return err
	}
LOOP_SCAN:
	for { // Loop to read the JSON objects
		var (
			jsonKey string
			isEnd   bool
		)

		if isEnd, err = dec.BeforeScanNext(); err != nil {
			return err
		}
		if isEnd {
			break LOOP_SCAN
		}

		if jsonKey, err = dec.ReadJSONKey(); err != nil {
			return err
		}
		switch jsonKey { // match the jsonKey
		case "f_string1":
			if x.FString1, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_string2":
			if x.FString2, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_string3":
			if x.FString3, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		default:
			if err = dec.DiscardValue(); err != nil {
				return err
			}
		} // end switch
	}
	return nil
}

// MarshalJSON implements interface json.Marshaler for proto message Embed2 in file tests/proto/cases/base/type_oneof.proto
func (x *MessageOneOf1_Embed1_Embed2) MarshalJSON() ([]byte, error) {
	if x == nil {
		return []byte("null"), nil
	}
	enc := jsonencoder.New(72)
	enc.AppendObjectBegin() // Add begin JSON identifier

	jsonencoder.AppendValStr(enc, "f_string1", x.FString1, false)
	jsonencoder.AppendValStr(enc, "f_string2", x.FString2, false)
	jsonencoder.AppendValStr(enc, "f_string3", x.FString3, false)
	enc.AppendObjectEnd() // Add end JSON identifier
	return enc.Bytes(), nil
}

// UnmarshalJSON implements json.Unmarshaler for proto message Embed2 in file tests/proto/cases/base/type_oneof.proto
func (x *MessageOneOf1_Embed1_Embed2) UnmarshalJSON(b []byte) error {
	if x == nil {
		return errors.New("json: Unmarshal: xgo/tests/pb/pbbase.(*MessageOneOf1_Embed1_Embed2) is nil")
	}
	var (
		err    error
		isNULL bool
		dec    *jsondecoder.Decoder
	)
	if dec, err = jsondecoder.New(b); err != nil {
		return err
	}
	if isNULL, err = dec.BeforeScanJSON(); err != nil || isNULL {
		return err
	}
LOOP_SCAN:
	for { // Loop to read the JSON objects
		var (
			jsonKey string
			isEnd   bool
		)

		if isEnd, err = dec.BeforeScanNext(); err != nil {
			return err
		}
		if isEnd {
			break LOOP_SCAN
		}

		if jsonKey, err = dec.ReadJSONKey(); err != nil {
			return err
		}
		switch jsonKey { // match the jsonKey
		case "f_string1":
			if x.FString1, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_string2":
			if x.FString2, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_string3":
			if x.FString3, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		default:
			if err = dec.DiscardValue(); err != nil {
				return err
			}
		} // end switch
	}
	return nil
}

// MarshalJSON implements interface json.Marshaler for proto message TypeOneOf1 in file tests/proto/cases/base/type_oneof.proto
func (x *TypeOneOf1) MarshalJSON() ([]byte, error) {
	if x == nil {
		return []byte("null"), nil
	}
	enc := jsonencoder.New(1096)
	enc.AppendObjectBegin() // Add begin JSON identifier

	enc.AppendObjectKey("OneType01")
	if x.OneType01 != nil {
		enc.AppendObjectBegin()
		switch o1_1 := x.OneType01.(type) {
		case *TypeOneOf1_FString1:
			jsonencoder.AppendValStr(enc, "f_string1", o1_1.FString1, false)
		case *TypeOneOf1_FString2:
			jsonencoder.AppendValStr(enc, "f_string2", o1_1.FString2, false)
		}
		enc.AppendObjectEnd()
	} else {
		enc.AppendValNULL()
	}
	enc.AppendObjectKey("One_Type02")
	if x.One_Type02 != nil {
		enc.AppendObjectBegin()
		switch o1_4 := x.One_Type02.(type) {
		case *TypeOneOf1_FInt32:
			jsonencoder.AppendValI32(enc, "f_int32", o1_4.FInt32, false, false)
		case *TypeOneOf1_FInt64:
			jsonencoder.AppendValI64(enc, "f_int64", o1_4.FInt64, false, false)
		}
		enc.AppendObjectEnd()
	} else {
		enc.AppendValNULL()
	}
	enc.AppendObjectKey("One_type03")
	if x.OneType03 != nil {
		enc.AppendObjectBegin()
		switch o1_7 := x.OneType03.(type) {
		case *TypeOneOf1_FUint32:
			jsonencoder.AppendValU32(enc, "f_uint32", o1_7.FUint32, false, false)
		case *TypeOneOf1_FUint64:
			jsonencoder.AppendValU64(enc, "f_uint64", o1_7.FUint64, false, false)
		}
		enc.AppendObjectEnd()
	} else {
		enc.AppendValNULL()
	}
	enc.AppendObjectKey("one_Type04")
	if x.One_Type04 != nil {
		enc.AppendObjectBegin()
		switch o1_10 := x.One_Type04.(type) {
		case *TypeOneOf1_FSint32:
			jsonencoder.AppendValI32(enc, "f_sint32", o1_10.FSint32, false, false)
		case *TypeOneOf1_FSint64:
			jsonencoder.AppendValI64(enc, "f_sint64", o1_10.FSint64, false, false)
		}
		enc.AppendObjectEnd()
	} else {
		enc.AppendValNULL()
	}
	enc.AppendObjectKey("one_type05")
	if x.OneType05 != nil {
		enc.AppendObjectBegin()
		switch o1_13 := x.OneType05.(type) {
		case *TypeOneOf1_FSfixed32:
			jsonencoder.AppendValI32(enc, "f_sfixed32", o1_13.FSfixed32, false, false)
		case *TypeOneOf1_FSfixed64:
			jsonencoder.AppendValI64(enc, "f_sfixed64", o1_13.FSfixed64, false, false)
		}
		enc.AppendObjectEnd()
	} else {
		enc.AppendValNULL()
	}
	enc.AppendObjectKey("oneType06")
	if x.OneType06 != nil {
		enc.AppendObjectBegin()
		switch o1_16 := x.OneType06.(type) {
		case *TypeOneOf1_FFixed32:
			jsonencoder.AppendValU32(enc, "f_fixed32", o1_16.FFixed32, false, false)
		case *TypeOneOf1_FFixed64:
			jsonencoder.AppendValU64(enc, "f_fixed64", o1_16.FFixed64, false, false)
		}
		enc.AppendObjectEnd()
	} else {
		enc.AppendValNULL()
	}
	enc.AppendObjectKey("Onetype07")
	if x.Onetype07 != nil {
		enc.AppendObjectBegin()
		switch o1_19 := x.Onetype07.(type) {
		case *TypeOneOf1_FFloat:
			jsonencoder.AppendValF32(enc, "f_float", o1_19.FFloat, false, false)
		case *TypeOneOf1_FDouble:
			jsonencoder.AppendValF64(enc, "f_double", o1_19.FDouble, false, false)
		}
		enc.AppendObjectEnd()
	} else {
		enc.AppendValNULL()
	}
	enc.AppendObjectKey("onetype08")
	if x.Onetype08 != nil {
		enc.AppendObjectBegin()
		switch o1_22 := x.Onetype08.(type) {
		case *TypeOneOf1_FBool1:
			jsonencoder.AppendValBool(enc, "f_bool1", o1_22.FBool1, false, false)
		case *TypeOneOf1_FBytes1:
			if err := jsonencoder.AppendValBytes(enc, "f_bytes1", o1_22.FBytes1, false); err != nil {
				return nil, err
			}
		}
		enc.AppendObjectEnd()
	} else {
		enc.AppendValNULL()
	}
	enc.AppendObjectKey("OneType09")
	if x.OneType09 != nil {
		enc.AppendObjectBegin()
		switch o1_25 := x.OneType09.(type) {
		case *TypeOneOf1_FEnum1:
			jsonencoder.AppendValEnumNum(enc, "f_enum1", o1_25.FEnum1, false, false)
		case *TypeOneOf1_FEnum2:
			jsonencoder.AppendValEnumNum(enc, "f_enum2", o1_25.FEnum2, false, false)
		case *TypeOneOf1_FEnum3:
			jsonencoder.AppendValEnumNum(enc, "f_enum3", o1_25.FEnum3, false, false)
		case *TypeOneOf1_FEnum4:
			jsonencoder.AppendValEnumNum(enc, "f_enum4", o1_25.FEnum4, false, false)
		case *TypeOneOf1_FEnum5:
			jsonencoder.AppendValEnumNum(enc, "f_enum5", o1_25.FEnum5, false, false)
		case *TypeOneOf1_FEnum6:
			jsonencoder.AppendValEnumNum(enc, "f_enum6", o1_25.FEnum6, false, false)
		}
		enc.AppendObjectEnd()
	} else {
		enc.AppendValNULL()
	}
	enc.AppendObjectKey("OneType10")
	if x.OneType10 != nil {
		enc.AppendObjectBegin()
		switch o1_32 := x.OneType10.(type) {
		case *TypeOneOf1_FDuration1:
			if err := jsonencoder.AppendValWKTDurObject(enc, "f_duration1", o1_32.FDuration1, false); err != nil {
				return nil, err
			}
		case *TypeOneOf1_FDuration2:
			if err := jsonencoder.AppendValWKTDurObject(enc, "f_duration2", o1_32.FDuration2, false); err != nil {
				return nil, err
			}
		}
		enc.AppendObjectEnd()
	} else {
		enc.AppendValNULL()
	}
	enc.AppendObjectKey("OneType11")
	if x.OneType11 != nil {
		enc.AppendObjectBegin()
		switch o1_35 := x.OneType11.(type) {
		case *TypeOneOf1_FTimestamp1:
			if err := jsonencoder.AppendValWKTTsObject(enc, "f_timestamp1", o1_35.FTimestamp1, false); err != nil {
				return nil, err
			}
		case *TypeOneOf1_FTimestamp2:
			if err := jsonencoder.AppendValWKTTsObject(enc, "f_timestamp2", o1_35.FTimestamp2, false); err != nil {
				return nil, err
			}
		}
		enc.AppendObjectEnd()
	} else {
		enc.AppendValNULL()
	}
	enc.AppendObjectKey("OneType12")
	if x.OneType12 != nil {
		enc.AppendObjectBegin()
		switch o1_38 := x.OneType12.(type) {
		case *TypeOneOf1_FAny1:
			if err := jsonencoder.AppendValWKTAnyObject(enc, "f_any1", o1_38.FAny1, false); err != nil {
				return nil, err
			}
		case *TypeOneOf1_FAny2:
			if err := jsonencoder.AppendValWKTAnyObject(enc, "f_any2", o1_38.FAny2, false); err != nil {
				return nil, err
			}
		}
		enc.AppendObjectEnd()
	} else {
		enc.AppendValNULL()
	}
	enc.AppendObjectKey("OneType13")
	if x.OneType13 != nil {
		enc.AppendObjectBegin()
		switch o1_41 := x.OneType13.(type) {
		case *TypeOneOf1_FMessage1:
			if err := jsonencoder.AppendValMessage(enc, "f_message1", o1_41.FMessage1, false); err != nil {
				return nil, err
			}
		case *TypeOneOf1_FMessage2:
			if err := jsonencoder.AppendValMessage(enc, "f_message2", o1_41.FMessage2, false); err != nil {
				return nil, err
			}
		case *TypeOneOf1_FMessage3:
			if err := jsonencoder.AppendValMessage(enc, "f_message3", o1_41.FMessage3, false); err != nil {
				return nil, err
			}
		case *TypeOneOf1_FMessage4:
			if err := jsonencoder.AppendValMessage(enc, "f_message4", o1_41.FMessage4, false); err != nil {
				return nil, err
			}
		case *TypeOneOf1_FMessage5:
			if err := jsonencoder.AppendValMessage(enc, "f_message5", o1_41.FMessage5, false); err != nil {
				return nil, err
			}
		case *TypeOneOf1_FMessage6:
			if err := jsonencoder.AppendValMessage(enc, "f_message6", o1_41.FMessage6, false); err != nil {
				return nil, err
			}
		case *TypeOneOf1_FMessage7:
			if err := jsonencoder.AppendValMessage(enc, "f_message7", o1_41.FMessage7, false); err != nil {
				return nil, err
			}
		case *TypeOneOf1_FMessage8:
			if err := jsonencoder.AppendValMessage(enc, "f_message8", o1_41.FMessage8, false); err != nil {
				return nil, err
			}
		case *TypeOneOf1_FMessage9:
			if err := jsonencoder.AppendValMessage(enc, "f_message9", o1_41.FMessage9, false); err != nil {
				return nil, err
			}
		}
		enc.AppendObjectEnd()
	} else {
		enc.AppendValNULL()
	}
	enc.AppendObjectEnd() // Add end JSON identifier
	return enc.Bytes(), nil
}

// UnmarshalJSON implements json.Unmarshaler for proto message TypeOneOf1 in file tests/proto/cases/base/type_oneof.proto
func (x *TypeOneOf1) UnmarshalJSON(b []byte) error {
	if x == nil {
		return errors.New("json: Unmarshal: xgo/tests/pb/pbbase.(*TypeOneOf1) is nil")
	}
	var (
		err    error
		isNULL bool
		dec    *jsondecoder.Decoder
	)
	if dec, err = jsondecoder.New(b); err != nil {
		return err
	}
	if isNULL, err = dec.BeforeScanJSON(); err != nil || isNULL {
		return err
	}
	// declares variables to report whether the oneof field is loaded.
	var (
		isLoad_o1_1  bool
		isLoad_o1_4  bool
		isLoad_o1_7  bool
		isLoad_o1_10 bool
		isLoad_o1_13 bool
		isLoad_o1_16 bool
		isLoad_o1_19 bool
		isLoad_o1_22 bool
		isLoad_o1_25 bool
		isLoad_o1_32 bool
		isLoad_o1_35 bool
		isLoad_o1_38 bool
		isLoad_o1_41 bool
	)

LOOP_SCAN:
	for { // Loop to read the JSON objects
		var (
			jsonKey string
			isEnd   bool
		)

		if isEnd, err = dec.BeforeScanNext(); err != nil {
			return err
		}
		if isEnd {
			break LOOP_SCAN
		}

		if jsonKey, err = dec.ReadJSONKey(); err != nil {
			return err
		}
		switch jsonKey { // match the jsonKey
		case "OneType01":
			if isNULL, err = dec.BeforeReadObject(); err != nil {
				return err
			}
			if isNULL {
				x.OneType01 = nil
			} else {
				for { // Loop to read oneof fields
					if isEnd, err = dec.BeforeReadNext(); err != nil {
						return err
					}
					if isEnd {
						break
					}
					var oneOfKey1_1 string
					if oneOfKey1_1, err = dec.ReadObjectKey(); err != nil {
						return err
					}
					switch oneOfKey1_1 { // match the oneof key
					case "f_string1":
						if isLoad_o1_1 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_1 = true
						o1_1, ok := x.OneType01.(*TypeOneOf1_FString1)
						if !ok {
							o1_1 = new(TypeOneOf1_FString1)
							x.OneType01 = o1_1
						}
						if o1_1.FString1, err = jsondecoder.ReadValStr(dec); err != nil {
							return err
						}
					case "f_string2":
						if isLoad_o1_1 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_1 = true
						o1_1, ok := x.OneType01.(*TypeOneOf1_FString2)
						if !ok {
							o1_1 = new(TypeOneOf1_FString2)
							x.OneType01 = o1_1
						}
						if o1_1.FString2, err = jsondecoder.ReadValStr(dec); err != nil {
							return err
						}
					default:
						if err = dec.DiscardValue(); err != nil {
							return err
						}
					}
				}
			}
		case "One_Type02":
			if isNULL, err = dec.BeforeReadObject(); err != nil {
				return err
			}
			if isNULL {
				x.One_Type02 = nil
			} else {
				for { // Loop to read oneof fields
					if isEnd, err = dec.BeforeReadNext(); err != nil {
						return err
					}
					if isEnd {
						break
					}
					var oneOfKey1_4 string
					if oneOfKey1_4, err = dec.ReadObjectKey(); err != nil {
						return err
					}
					switch oneOfKey1_4 { // match the oneof key
					case "f_int32":
						if isLoad_o1_4 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_4 = true
						o1_4, ok := x.One_Type02.(*TypeOneOf1_FInt32)
						if !ok {
							o1_4 = new(TypeOneOf1_FInt32)
							x.One_Type02 = o1_4
						}
						if o1_4.FInt32, err = jsondecoder.ReadValI32(dec, false); err != nil {
							return err
						}
					case "f_int64":
						if isLoad_o1_4 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_4 = true
						o1_4, ok := x.One_Type02.(*TypeOneOf1_FInt64)
						if !ok {
							o1_4 = new(TypeOneOf1_FInt64)
							x.One_Type02 = o1_4
						}
						if o1_4.FInt64, err = jsondecoder.ReadValI64(dec, false); err != nil {
							return err
						}
					default:
						if err = dec.DiscardValue(); err != nil {
							return err
						}
					}
				}
			}
		case "One_type03":
			if isNULL, err = dec.BeforeReadObject(); err != nil {
				return err
			}
			if isNULL {
				x.OneType03 = nil
			} else {
				for { // Loop to read oneof fields
					if isEnd, err = dec.BeforeReadNext(); err != nil {
						return err
					}
					if isEnd {
						break
					}
					var oneOfKey1_7 string
					if oneOfKey1_7, err = dec.ReadObjectKey(); err != nil {
						return err
					}
					switch oneOfKey1_7 { // match the oneof key
					case "f_uint32":
						if isLoad_o1_7 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_7 = true
						o1_7, ok := x.OneType03.(*TypeOneOf1_FUint32)
						if !ok {
							o1_7 = new(TypeOneOf1_FUint32)
							x.OneType03 = o1_7
						}
						if o1_7.FUint32, err = jsondecoder.ReadValU32(dec, false); err != nil {
							return err
						}
					case "f_uint64":
						if isLoad_o1_7 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_7 = true
						o1_7, ok := x.OneType03.(*TypeOneOf1_FUint64)
						if !ok {
							o1_7 = new(TypeOneOf1_FUint64)
							x.OneType03 = o1_7
						}
						if o1_7.FUint64, err = jsondecoder.ReadValU64(dec, false); err != nil {
							return err
						}
					default:
						if err = dec.DiscardValue(); err != nil {
							return err
						}
					}
				}
			}
		case "one_Type04":
			if isNULL, err = dec.BeforeReadObject(); err != nil {
				return err
			}
			if isNULL {
				x.One_Type04 = nil
			} else {
				for { // Loop to read oneof fields
					if isEnd, err = dec.BeforeReadNext(); err != nil {
						return err
					}
					if isEnd {
						break
					}
					var oneOfKey1_10 string
					if oneOfKey1_10, err = dec.ReadObjectKey(); err != nil {
						return err
					}
					switch oneOfKey1_10 { // match the oneof key
					case "f_sint32":
						if isLoad_o1_10 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_10 = true
						o1_10, ok := x.One_Type04.(*TypeOneOf1_FSint32)
						if !ok {
							o1_10 = new(TypeOneOf1_FSint32)
							x.One_Type04 = o1_10
						}
						if o1_10.FSint32, err = jsondecoder.ReadValI32(dec, false); err != nil {
							return err
						}
					case "f_sint64":
						if isLoad_o1_10 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_10 = true
						o1_10, ok := x.One_Type04.(*TypeOneOf1_FSint64)
						if !ok {
							o1_10 = new(TypeOneOf1_FSint64)
							x.One_Type04 = o1_10
						}
						if o1_10.FSint64, err = jsondecoder.ReadValI64(dec, false); err != nil {
							return err
						}
					default:
						if err = dec.DiscardValue(); err != nil {
							return err
						}
					}
				}
			}
		case "one_type05":
			if isNULL, err = dec.BeforeReadObject(); err != nil {
				return err
			}
			if isNULL {
				x.OneType05 = nil
			} else {
				for { // Loop to read oneof fields
					if isEnd, err = dec.BeforeReadNext(); err != nil {
						return err
					}
					if isEnd {
						break
					}
					var oneOfKey1_13 string
					if oneOfKey1_13, err = dec.ReadObjectKey(); err != nil {
						return err
					}
					switch oneOfKey1_13 { // match the oneof key
					case "f_sfixed32":
						if isLoad_o1_13 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_13 = true
						o1_13, ok := x.OneType05.(*TypeOneOf1_FSfixed32)
						if !ok {
							o1_13 = new(TypeOneOf1_FSfixed32)
							x.OneType05 = o1_13
						}
						if o1_13.FSfixed32, err = jsondecoder.ReadValI32(dec, false); err != nil {
							return err
						}
					case "f_sfixed64":
						if isLoad_o1_13 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_13 = true
						o1_13, ok := x.OneType05.(*TypeOneOf1_FSfixed64)
						if !ok {
							o1_13 = new(TypeOneOf1_FSfixed64)
							x.OneType05 = o1_13
						}
						if o1_13.FSfixed64, err = jsondecoder.ReadValI64(dec, false); err != nil {
							return err
						}
					default:
						if err = dec.DiscardValue(); err != nil {
							return err
						}
					}
				}
			}
		case "oneType06":
			if isNULL, err = dec.BeforeReadObject(); err != nil {
				return err
			}
			if isNULL {
				x.OneType06 = nil
			} else {
				for { // Loop to read oneof fields
					if isEnd, err = dec.BeforeReadNext(); err != nil {
						return err
					}
					if isEnd {
						break
					}
					var oneOfKey1_16 string
					if oneOfKey1_16, err = dec.ReadObjectKey(); err != nil {
						return err
					}
					switch oneOfKey1_16 { // match the oneof key
					case "f_fixed32":
						if isLoad_o1_16 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_16 = true
						o1_16, ok := x.OneType06.(*TypeOneOf1_FFixed32)
						if !ok {
							o1_16 = new(TypeOneOf1_FFixed32)
							x.OneType06 = o1_16
						}
						if o1_16.FFixed32, err = jsondecoder.ReadValU32(dec, false); err != nil {
							return err
						}
					case "f_fixed64":
						if isLoad_o1_16 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_16 = true
						o1_16, ok := x.OneType06.(*TypeOneOf1_FFixed64)
						if !ok {
							o1_16 = new(TypeOneOf1_FFixed64)
							x.OneType06 = o1_16
						}
						if o1_16.FFixed64, err = jsondecoder.ReadValU64(dec, false); err != nil {
							return err
						}
					default:
						if err = dec.DiscardValue(); err != nil {
							return err
						}
					}
				}
			}
		case "Onetype07":
			if isNULL, err = dec.BeforeReadObject(); err != nil {
				return err
			}
			if isNULL {
				x.Onetype07 = nil
			} else {
				for { // Loop to read oneof fields
					if isEnd, err = dec.BeforeReadNext(); err != nil {
						return err
					}
					if isEnd {
						break
					}
					var oneOfKey1_19 string
					if oneOfKey1_19, err = dec.ReadObjectKey(); err != nil {
						return err
					}
					switch oneOfKey1_19 { // match the oneof key
					case "f_float":
						if isLoad_o1_19 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_19 = true
						o1_19, ok := x.Onetype07.(*TypeOneOf1_FFloat)
						if !ok {
							o1_19 = new(TypeOneOf1_FFloat)
							x.Onetype07 = o1_19
						}
						if o1_19.FFloat, err = jsondecoder.ReadValF32(dec, false); err != nil {
							return err
						}
					case "f_double":
						if isLoad_o1_19 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_19 = true
						o1_19, ok := x.Onetype07.(*TypeOneOf1_FDouble)
						if !ok {
							o1_19 = new(TypeOneOf1_FDouble)
							x.Onetype07 = o1_19
						}
						if o1_19.FDouble, err = jsondecoder.ReadValF64(dec, false); err != nil {
							return err
						}
					default:
						if err = dec.DiscardValue(); err != nil {
							return err
						}
					}
				}
			}
		case "onetype08":
			if isNULL, err = dec.BeforeReadObject(); err != nil {
				return err
			}
			if isNULL {
				x.Onetype08 = nil
			} else {
				for { // Loop to read oneof fields
					if isEnd, err = dec.BeforeReadNext(); err != nil {
						return err
					}
					if isEnd {
						break
					}
					var oneOfKey1_22 string
					if oneOfKey1_22, err = dec.ReadObjectKey(); err != nil {
						return err
					}
					switch oneOfKey1_22 { // match the oneof key
					case "f_bool1":
						if isLoad_o1_22 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_22 = true
						o1_22, ok := x.Onetype08.(*TypeOneOf1_FBool1)
						if !ok {
							o1_22 = new(TypeOneOf1_FBool1)
							x.Onetype08 = o1_22
						}
						if o1_22.FBool1, err = jsondecoder.ReadValBool(dec, false); err != nil {
							return err
						}
					case "f_bytes1":
						if isLoad_o1_22 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_22 = true
						o1_22, ok := x.Onetype08.(*TypeOneOf1_FBytes1)
						if !ok {
							o1_22 = new(TypeOneOf1_FBytes1)
							x.Onetype08 = o1_22
						}
						if o1_22.FBytes1, err = jsondecoder.ReadValBytes(dec); err != nil {
							return err
						}
					default:
						if err = dec.DiscardValue(); err != nil {
							return err
						}
					}
				}
			}
		case "OneType09":
			if isNULL, err = dec.BeforeReadObject(); err != nil {
				return err
			}
			if isNULL {
				x.OneType09 = nil
			} else {
				for { // Loop to read oneof fields
					if isEnd, err = dec.BeforeReadNext(); err != nil {
						return err
					}
					if isEnd {
						break
					}
					var oneOfKey1_25 string
					if oneOfKey1_25, err = dec.ReadObjectKey(); err != nil {
						return err
					}
					switch oneOfKey1_25 { // match the oneof key
					case "f_enum1":
						if isLoad_o1_25 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_25 = true
						o1_25, ok := x.OneType09.(*TypeOneOf1_FEnum1)
						if !ok {
							o1_25 = new(TypeOneOf1_FEnum1)
							x.OneType09 = o1_25
						}
						if o1_25.FEnum1, err = jsondecoder.ReadValEnumNum(dec, o1_25.FEnum1, false); err != nil {
							return err
						}
					case "f_enum2":
						if isLoad_o1_25 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_25 = true
						o1_25, ok := x.OneType09.(*TypeOneOf1_FEnum2)
						if !ok {
							o1_25 = new(TypeOneOf1_FEnum2)
							x.OneType09 = o1_25
						}
						if o1_25.FEnum2, err = jsondecoder.ReadValEnumNum(dec, o1_25.FEnum2, false); err != nil {
							return err
						}
					case "f_enum3":
						if isLoad_o1_25 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_25 = true
						o1_25, ok := x.OneType09.(*TypeOneOf1_FEnum3)
						if !ok {
							o1_25 = new(TypeOneOf1_FEnum3)
							x.OneType09 = o1_25
						}
						if o1_25.FEnum3, err = jsondecoder.ReadValEnumNum(dec, o1_25.FEnum3, false); err != nil {
							return err
						}
					case "f_enum4":
						if isLoad_o1_25 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_25 = true
						o1_25, ok := x.OneType09.(*TypeOneOf1_FEnum4)
						if !ok {
							o1_25 = new(TypeOneOf1_FEnum4)
							x.OneType09 = o1_25
						}
						if o1_25.FEnum4, err = jsondecoder.ReadValEnumNum(dec, o1_25.FEnum4, false); err != nil {
							return err
						}
					case "f_enum5":
						if isLoad_o1_25 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_25 = true
						o1_25, ok := x.OneType09.(*TypeOneOf1_FEnum5)
						if !ok {
							o1_25 = new(TypeOneOf1_FEnum5)
							x.OneType09 = o1_25
						}
						if o1_25.FEnum5, err = jsondecoder.ReadValEnumNum(dec, o1_25.FEnum5, false); err != nil {
							return err
						}
					case "f_enum6":
						if isLoad_o1_25 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_25 = true
						o1_25, ok := x.OneType09.(*TypeOneOf1_FEnum6)
						if !ok {
							o1_25 = new(TypeOneOf1_FEnum6)
							x.OneType09 = o1_25
						}
						if o1_25.FEnum6, err = jsondecoder.ReadValEnumNum(dec, o1_25.FEnum6, false); err != nil {
							return err
						}
					default:
						if err = dec.DiscardValue(); err != nil {
							return err
						}
					}
				}
			}
		case "OneType10":
			if isNULL, err = dec.BeforeReadObject(); err != nil {
				return err
			}
			if isNULL {
				x.OneType10 = nil
			} else {
				for { // Loop to read oneof fields
					if isEnd, err = dec.BeforeReadNext(); err != nil {
						return err
					}
					if isEnd {
						break
					}
					var oneOfKey1_32 string
					if oneOfKey1_32, err = dec.ReadObjectKey(); err != nil {
						return err
					}
					switch oneOfKey1_32 { // match the oneof key
					case "f_duration1":
						if isLoad_o1_32 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_32 = true
						o1_32, ok := x.OneType10.(*TypeOneOf1_FDuration1)
						if !ok {
							o1_32 = new(TypeOneOf1_FDuration1)
							x.OneType10 = o1_32
						}
						if o1_32.FDuration1, err = jsondecoder.ReadValWKTDurObject(dec, o1_32.FDuration1); err != nil {
							return err
						}
					case "f_duration2":
						if isLoad_o1_32 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_32 = true
						o1_32, ok := x.OneType10.(*TypeOneOf1_FDuration2)
						if !ok {
							o1_32 = new(TypeOneOf1_FDuration2)
							x.OneType10 = o1_32
						}
						if o1_32.FDuration2, err = jsondecoder.ReadValWKTDurObject(dec, o1_32.FDuration2); err != nil {
							return err
						}
					default:
						if err = dec.DiscardValue(); err != nil {
							return err
						}
					}
				}
			}
		case "OneType11":
			if isNULL, err = dec.BeforeReadObject(); err != nil {
				return err
			}
			if isNULL {
				x.OneType11 = nil
			} else {
				for { // Loop to read oneof fields
					if isEnd, err = dec.BeforeReadNext(); err != nil {
						return err
					}
					if isEnd {
						break
					}
					var oneOfKey1_35 string
					if oneOfKey1_35, err = dec.ReadObjectKey(); err != nil {
						return err
					}
					switch oneOfKey1_35 { // match the oneof key
					case "f_timestamp1":
						if isLoad_o1_35 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_35 = true
						o1_35, ok := x.OneType11.(*TypeOneOf1_FTimestamp1)
						if !ok {
							o1_35 = new(TypeOneOf1_FTimestamp1)
							x.OneType11 = o1_35
						}
						if o1_35.FTimestamp1, err = jsondecoder.ReadValWKTTsObject(dec, o1_35.FTimestamp1); err != nil {
							return err
						}
					case "f_timestamp2":
						if isLoad_o1_35 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_35 = true
						o1_35, ok := x.OneType11.(*TypeOneOf1_FTimestamp2)
						if !ok {
							o1_35 = new(TypeOneOf1_FTimestamp2)
							x.OneType11 = o1_35
						}
						if o1_35.FTimestamp2, err = jsondecoder.ReadValWKTTsObject(dec, o1_35.FTimestamp2); err != nil {
							return err
						}
					default:
						if err = dec.DiscardValue(); err != nil {
							return err
						}
					}
				}
			}
		case "OneType12":
			if isNULL, err = dec.BeforeReadObject(); err != nil {
				return err
			}
			if isNULL {
				x.OneType12 = nil
			} else {
				for { // Loop to read oneof fields
					if isEnd, err = dec.BeforeReadNext(); err != nil {
						return err
					}
					if isEnd {
						break
					}
					var oneOfKey1_38 string
					if oneOfKey1_38, err = dec.ReadObjectKey(); err != nil {
						return err
					}
					switch oneOfKey1_38 { // match the oneof key
					case "f_any1":
						if isLoad_o1_38 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_38 = true
						o1_38, ok := x.OneType12.(*TypeOneOf1_FAny1)
						if !ok {
							o1_38 = new(TypeOneOf1_FAny1)
							x.OneType12 = o1_38
						}
						if o1_38.FAny1, err = jsondecoder.ReadValWKTAnyObject(dec, o1_38.FAny1); err != nil {
							return err
						}
					case "f_any2":
						if isLoad_o1_38 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_38 = true
						o1_38, ok := x.OneType12.(*TypeOneOf1_FAny2)
						if !ok {
							o1_38 = new(TypeOneOf1_FAny2)
							x.OneType12 = o1_38
						}
						if o1_38.FAny2, err = jsondecoder.ReadValWKTAnyObject(dec, o1_38.FAny2); err != nil {
							return err
						}
					default:
						if err = dec.DiscardValue(); err != nil {
							return err
						}
					}
				}
			}
		case "OneType13":
			if isNULL, err = dec.BeforeReadObject(); err != nil {
				return err
			}
			if isNULL {
				x.OneType13 = nil
			} else {
				for { // Loop to read oneof fields
					if isEnd, err = dec.BeforeReadNext(); err != nil {
						return err
					}
					if isEnd {
						break
					}
					var oneOfKey1_41 string
					if oneOfKey1_41, err = dec.ReadObjectKey(); err != nil {
						return err
					}
					switch oneOfKey1_41 { // match the oneof key
					case "f_message1":
						if isLoad_o1_41 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_41 = true
						o1_41, ok := x.OneType13.(*TypeOneOf1_FMessage1)
						if !ok {
							o1_41 = new(TypeOneOf1_FMessage1)
							x.OneType13 = o1_41
						}
						if o1_41.FMessage1, err = jsondecoder.ReadValMessage(dec, o1_41.FMessage1); err != nil {
							return err
						}
					case "f_message2":
						if isLoad_o1_41 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_41 = true
						o1_41, ok := x.OneType13.(*TypeOneOf1_FMessage2)
						if !ok {
							o1_41 = new(TypeOneOf1_FMessage2)
							x.OneType13 = o1_41
						}
						if o1_41.FMessage2, err = jsondecoder.ReadValMessage(dec, o1_41.FMessage2); err != nil {
							return err
						}
					case "f_message3":
						if isLoad_o1_41 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_41 = true
						o1_41, ok := x.OneType13.(*TypeOneOf1_FMessage3)
						if !ok {
							o1_41 = new(TypeOneOf1_FMessage3)
							x.OneType13 = o1_41
						}
						if o1_41.FMessage3, err = jsondecoder.ReadValMessage(dec, o1_41.FMessage3); err != nil {
							return err
						}
					case "f_message4":
						if isLoad_o1_41 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_41 = true
						o1_41, ok := x.OneType13.(*TypeOneOf1_FMessage4)
						if !ok {
							o1_41 = new(TypeOneOf1_FMessage4)
							x.OneType13 = o1_41
						}
						if o1_41.FMessage4, err = jsondecoder.ReadValMessage(dec, o1_41.FMessage4); err != nil {
							return err
						}
					case "f_message5":
						if isLoad_o1_41 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_41 = true
						o1_41, ok := x.OneType13.(*TypeOneOf1_FMessage5)
						if !ok {
							o1_41 = new(TypeOneOf1_FMessage5)
							x.OneType13 = o1_41
						}
						if o1_41.FMessage5, err = jsondecoder.ReadValMessage(dec, o1_41.FMessage5); err != nil {
							return err
						}
					case "f_message6":
						if isLoad_o1_41 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_41 = true
						o1_41, ok := x.OneType13.(*TypeOneOf1_FMessage6)
						if !ok {
							o1_41 = new(TypeOneOf1_FMessage6)
							x.OneType13 = o1_41
						}
						if o1_41.FMessage6, err = jsondecoder.ReadValMessage(dec, o1_41.FMessage6); err != nil {
							return err
						}
					case "f_message7":
						if isLoad_o1_41 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_41 = true
						o1_41, ok := x.OneType13.(*TypeOneOf1_FMessage7)
						if !ok {
							o1_41 = new(TypeOneOf1_FMessage7)
							x.OneType13 = o1_41
						}
						if o1_41.FMessage7, err = jsondecoder.ReadValMessage(dec, o1_41.FMessage7); err != nil {
							return err
						}
					case "f_message8":
						if isLoad_o1_41 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_41 = true
						o1_41, ok := x.OneType13.(*TypeOneOf1_FMessage8)
						if !ok {
							o1_41 = new(TypeOneOf1_FMessage8)
							x.OneType13 = o1_41
						}
						if o1_41.FMessage8, err = jsondecoder.ReadValMessage(dec, o1_41.FMessage8); err != nil {
							return err
						}
					case "f_message9":
						if isLoad_o1_41 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_41 = true
						o1_41, ok := x.OneType13.(*TypeOneOf1_FMessage9)
						if !ok {
							o1_41 = new(TypeOneOf1_FMessage9)
							x.OneType13 = o1_41
						}
						if o1_41.FMessage9, err = jsondecoder.ReadValMessage(dec, o1_41.FMessage9); err != nil {
							return err
						}
					default:
						if err = dec.DiscardValue(); err != nil {
							return err
						}
					}
				}
			}
		default:
			if err = dec.DiscardValue(); err != nil {
				return err
			}
		} // end switch
	}
	return nil
}

// MarshalJSON implements interface json.Marshaler for proto message TypeOneOfInline1 in file tests/proto/cases/base/type_oneof.proto
func (x *TypeOneOfInline1) MarshalJSON() ([]byte, error) {
	if x == nil {
		return []byte("null"), nil
	}
	enc := jsonencoder.New(280)
	enc.AppendObjectBegin() // Add begin JSON identifier

	switch o1_1 := x.OneType01.(type) {
	case *TypeOneOfInline1_FString1:
		jsonencoder.AppendValStr(enc, "f_string1", o1_1.FString1, false)
	case *TypeOneOfInline1_FString2:
		jsonencoder.AppendValStr(enc, "f_string2", o1_1.FString2, false)
	}
	switch o1_4 := x.OneType02.(type) {
	case *TypeOneOfInline1_FMessage1:
		if err := jsonencoder.AppendValMessage(enc, "f_message1", o1_4.FMessage1, false); err != nil {
			return nil, err
		}
	case *TypeOneOfInline1_FMessage2:
		if err := jsonencoder.AppendValMessage(enc, "f_message2", o1_4.FMessage2, false); err != nil {
			return nil, err
		}
	}
	switch o1_7 := x.OneType03.(type) {
	case *TypeOneOfInline1_FEnum1:
		jsonencoder.AppendValEnumNum(enc, "f_enum1", o1_7.FEnum1, false, false)
	case *TypeOneOfInline1_FEnum2:
		jsonencoder.AppendValEnumNum(enc, "f_enum2", o1_7.FEnum2, false, false)
	}
	enc.AppendObjectKey("OneType04")
	if x.OneType04 != nil {
		enc.AppendObjectBegin()
		switch o1_10 := x.OneType04.(type) {
		case *TypeOneOfInline1_FDuration1:
			if err := jsonencoder.AppendValWKTDurObject(enc, "f_duration1", o1_10.FDuration1, false); err != nil {
				return nil, err
			}
		case *TypeOneOfInline1_FDuration2:
			if err := jsonencoder.AppendValWKTDurObject(enc, "f_duration2", o1_10.FDuration2, false); err != nil {
				return nil, err
			}
		}
		enc.AppendObjectEnd()
	} else {
		enc.AppendValNULL()
	}
	enc.AppendObjectEnd() // Add end JSON identifier
	return enc.Bytes(), nil
}

// UnmarshalJSON implements json.Unmarshaler for proto message TypeOneOfInline1 in file tests/proto/cases/base/type_oneof.proto
func (x *TypeOneOfInline1) UnmarshalJSON(b []byte) error {
	if x == nil {
		return errors.New("json: Unmarshal: xgo/tests/pb/pbbase.(*TypeOneOfInline1) is nil")
	}
	var (
		err    error
		isNULL bool
		dec    *jsondecoder.Decoder
	)
	if dec, err = jsondecoder.New(b); err != nil {
		return err
	}
	if isNULL, err = dec.BeforeScanJSON(); err != nil || isNULL {
		return err
	}
	// declares variables to report whether the oneof field is loaded.
	var (
		isLoad_o1_1  bool
		isLoad_o1_4  bool
		isLoad_o1_7  bool
		isLoad_o1_10 bool
	)

LOOP_SCAN:
	for { // Loop to read the JSON objects
		var (
			jsonKey string
			isEnd   bool
		)

		if isEnd, err = dec.BeforeScanNext(); err != nil {
			return err
		}
		if isEnd {
			break LOOP_SCAN
		}

		if jsonKey, err = dec.ReadJSONKey(); err != nil {
			return err
		}
		switch jsonKey { // match the jsonKey
		case "f_string1":
			if isLoad_o1_1 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_1 = true
			o1_1, ok := x.OneType01.(*TypeOneOfInline1_FString1)
			if !ok {
				o1_1 = new(TypeOneOfInline1_FString1)
				x.OneType01 = o1_1
			}
			if o1_1.FString1, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_string2":
			if isLoad_o1_1 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_1 = true
			o1_1, ok := x.OneType01.(*TypeOneOfInline1_FString2)
			if !ok {
				o1_1 = new(TypeOneOfInline1_FString2)
				x.OneType01 = o1_1
			}
			if o1_1.FString2, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_message1":
			if isLoad_o1_4 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_4 = true
			o1_4, ok := x.OneType02.(*TypeOneOfInline1_FMessage1)
			if !ok {
				o1_4 = new(TypeOneOfInline1_FMessage1)
				x.OneType02 = o1_4
			}
			if o1_4.FMessage1, err = jsondecoder.ReadValMessage(dec, o1_4.FMessage1); err != nil {
				return err
			}
		case "f_message2":
			if isLoad_o1_4 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_4 = true
			o1_4, ok := x.OneType02.(*TypeOneOfInline1_FMessage2)
			if !ok {
				o1_4 = new(TypeOneOfInline1_FMessage2)
				x.OneType02 = o1_4
			}
			if o1_4.FMessage2, err = jsondecoder.ReadValMessage(dec, o1_4.FMessage2); err != nil {
				return err
			}
		case "f_enum1":
			if isLoad_o1_7 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_7 = true
			o1_7, ok := x.OneType03.(*TypeOneOfInline1_FEnum1)
			if !ok {
				o1_7 = new(TypeOneOfInline1_FEnum1)
				x.OneType03 = o1_7
			}
			if o1_7.FEnum1, err = jsondecoder.ReadValEnumNum(dec, o1_7.FEnum1, false); err != nil {
				return err
			}
		case "f_enum2":
			if isLoad_o1_7 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_7 = true
			o1_7, ok := x.OneType03.(*TypeOneOfInline1_FEnum2)
			if !ok {
				o1_7 = new(TypeOneOfInline1_FEnum2)
				x.OneType03 = o1_7
			}
			if o1_7.FEnum2, err = jsondecoder.ReadValEnumNum(dec, o1_7.FEnum2, false); err != nil {
				return err
			}
		case "OneType04":
			if isNULL, err = dec.BeforeReadObject(); err != nil {
				return err
			}
			if isNULL {
				x.OneType04 = nil
			} else {
				for { // Loop to read oneof fields
					if isEnd, err = dec.BeforeReadNext(); err != nil {
						return err
					}
					if isEnd {
						break
					}
					var oneOfKey1_10 string
					if oneOfKey1_10, err = dec.ReadObjectKey(); err != nil {
						return err
					}
					switch oneOfKey1_10 { // match the oneof key
					case "f_duration1":
						if isLoad_o1_10 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_10 = true
						o1_10, ok := x.OneType04.(*TypeOneOfInline1_FDuration1)
						if !ok {
							o1_10 = new(TypeOneOfInline1_FDuration1)
							x.OneType04 = o1_10
						}
						if o1_10.FDuration1, err = jsondecoder.ReadValWKTDurObject(dec, o1_10.FDuration1); err != nil {
							return err
						}
					case "f_duration2":
						if isLoad_o1_10 {
							return jsondecoder.ErrOneOfConflict(dec)
						}
						isLoad_o1_10 = true
						o1_10, ok := x.OneType04.(*TypeOneOfInline1_FDuration2)
						if !ok {
							o1_10 = new(TypeOneOfInline1_FDuration2)
							x.OneType04 = o1_10
						}
						if o1_10.FDuration2, err = jsondecoder.ReadValWKTDurObject(dec, o1_10.FDuration2); err != nil {
							return err
						}
					default:
						if err = dec.DiscardValue(); err != nil {
							return err
						}
					}
				}
			}
		default:
			if err = dec.DiscardValue(); err != nil {
				return err
			}
		} // end switch
	}
	return nil
}
