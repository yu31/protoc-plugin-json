// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: tests/proto/cases/errors/invalid_codec_plain.proto

package pberrors

import (
	_ "github.com/yu31/protoc-plugin-json/xgo/pb/pbjson"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InvalidCodecPlain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FInt32Numeric    int32   `protobuf:"varint,1,opt,name=f_int32_numeric,json=fInt32Numeric,proto3" json:"f_int32_numeric,omitempty"`
	FInt32String     int32   `protobuf:"varint,2,opt,name=f_int32_string,json=fInt32String,proto3" json:"f_int32_string,omitempty"`
	FInt64Numeric    int64   `protobuf:"varint,3,opt,name=f_int64_numeric,json=fInt64Numeric,proto3" json:"f_int64_numeric,omitempty"`
	FInt64String     int64   `protobuf:"varint,4,opt,name=f_int64_string,json=fInt64String,proto3" json:"f_int64_string,omitempty"`
	FUint32Numeric   uint32  `protobuf:"varint,5,opt,name=f_uint32_numeric,json=fUint32Numeric,proto3" json:"f_uint32_numeric,omitempty"`
	FUint32String    uint32  `protobuf:"varint,6,opt,name=f_uint32_string,json=fUint32String,proto3" json:"f_uint32_string,omitempty"`
	FUint64Numeric   uint64  `protobuf:"varint,7,opt,name=f_uint64_numeric,json=fUint64Numeric,proto3" json:"f_uint64_numeric,omitempty"`
	FUint64String    uint64  `protobuf:"varint,8,opt,name=f_uint64_string,json=fUint64String,proto3" json:"f_uint64_string,omitempty"`
	FSint32Numeric   int32   `protobuf:"zigzag32,9,opt,name=f_sint32_numeric,json=fSint32Numeric,proto3" json:"f_sint32_numeric,omitempty"`
	FSint32String    int32   `protobuf:"zigzag32,10,opt,name=f_sint32_string,json=fSint32String,proto3" json:"f_sint32_string,omitempty"`
	FSint64Numeric   int64   `protobuf:"zigzag64,11,opt,name=f_sint64_numeric,json=fSint64Numeric,proto3" json:"f_sint64_numeric,omitempty"`
	FSint64String    int64   `protobuf:"zigzag64,12,opt,name=f_sint64_string,json=fSint64String,proto3" json:"f_sint64_string,omitempty"`
	FSfixed32Numeric int32   `protobuf:"fixed32,13,opt,name=f_sfixed32_numeric,json=fSfixed32Numeric,proto3" json:"f_sfixed32_numeric,omitempty"`
	FSfixed32String  int32   `protobuf:"fixed32,14,opt,name=f_sfixed32_string,json=fSfixed32String,proto3" json:"f_sfixed32_string,omitempty"`
	FSfixed64Numeric int64   `protobuf:"fixed64,15,opt,name=f_sfixed64_numeric,json=fSfixed64Numeric,proto3" json:"f_sfixed64_numeric,omitempty"`
	FSfixed64String  int64   `protobuf:"fixed64,16,opt,name=f_sfixed64_string,json=fSfixed64String,proto3" json:"f_sfixed64_string,omitempty"`
	FFixed32Numeric  uint32  `protobuf:"fixed32,17,opt,name=f_fixed32_numeric,json=fFixed32Numeric,proto3" json:"f_fixed32_numeric,omitempty"`
	FFixed32String   uint32  `protobuf:"fixed32,18,opt,name=f_fixed32_string,json=fFixed32String,proto3" json:"f_fixed32_string,omitempty"`
	FFixed64Numeric  uint64  `protobuf:"fixed64,19,opt,name=f_fixed64_numeric,json=fFixed64Numeric,proto3" json:"f_fixed64_numeric,omitempty"`
	FFixed64String   uint64  `protobuf:"fixed64,20,opt,name=f_fixed64_string,json=fFixed64String,proto3" json:"f_fixed64_string,omitempty"`
	FFloatNumeric    float32 `protobuf:"fixed32,21,opt,name=f_float_numeric,json=fFloatNumeric,proto3" json:"f_float_numeric,omitempty"`
	FFloatString     float32 `protobuf:"fixed32,22,opt,name=f_float_string,json=fFloatString,proto3" json:"f_float_string,omitempty"`
	FDoubleNumeric   float64 `protobuf:"fixed64,23,opt,name=f_double_numeric,json=fDoubleNumeric,proto3" json:"f_double_numeric,omitempty"`
	FDoubleString    float64 `protobuf:"fixed64,24,opt,name=f_double_string,json=fDoubleString,proto3" json:"f_double_string,omitempty"`
	FBoolBool        bool    `protobuf:"varint,25,opt,name=f_bool_bool,json=fBoolBool,proto3" json:"f_bool_bool,omitempty"`
	FBoolString      bool    `protobuf:"varint,26,opt,name=f_bool_string,json=fBoolString,proto3" json:"f_bool_string,omitempty"`
	FStringNone      string  `protobuf:"bytes,31,opt,name=f_string_none,json=fStringNone,proto3" json:"f_string_none,omitempty"`
	FBytesNone       []byte  `protobuf:"bytes,32,opt,name=f_bytes_none,json=fBytesNone,proto3" json:"f_bytes_none,omitempty"`
	// Cases for Enum
	FEnumNumeric       EnumNum1 `protobuf:"varint,41,opt,name=f_enum_numeric,json=fEnumNumeric,proto3,enum=private.EnumNum1" json:"f_enum_numeric,omitempty"`
	FEnumNumericString EnumNum1 `protobuf:"varint,42,opt,name=f_enum_numeric_string,json=fEnumNumericString,proto3,enum=private.EnumNum1" json:"f_enum_numeric_string,omitempty"`
	FEnumString        EnumNum1 `protobuf:"varint,43,opt,name=f_enum_string,json=fEnumString,proto3,enum=private.EnumNum1" json:"f_enum_string,omitempty"`
	// Cases for google.protobuf.Any
	FAnyNative *anypb.Any `protobuf:"bytes,51,opt,name=f_any_native,json=fAnyNative,proto3" json:"f_any_native,omitempty"`
	FAnyProto  *anypb.Any `protobuf:"bytes,52,opt,name=f_any_proto,json=fAnyProto,proto3" json:"f_any_proto,omitempty"`
	// Cases for google.protobuf.Duration
	FDurationNative            *durationpb.Duration `protobuf:"bytes,61,opt,name=f_duration_native,json=fDurationNative,proto3" json:"f_duration_native,omitempty"`
	FDurationString            *durationpb.Duration `protobuf:"bytes,62,opt,name=f_duration_string,json=fDurationString,proto3" json:"f_duration_string,omitempty"`
	FDurationNanosecond        *durationpb.Duration `protobuf:"bytes,63,opt,name=f_duration_nanosecond,json=fDurationNanosecond,proto3" json:"f_duration_nanosecond,omitempty"`
	FDurationNanosecondString  *durationpb.Duration `protobuf:"bytes,64,opt,name=f_duration_nanosecond_string,json=fDurationNanosecondString,proto3" json:"f_duration_nanosecond_string,omitempty"`
	FDurationMicrosecond       *durationpb.Duration `protobuf:"bytes,65,opt,name=f_duration_microsecond,json=fDurationMicrosecond,proto3" json:"f_duration_microsecond,omitempty"`
	FDurationMicrosecondString *durationpb.Duration `protobuf:"bytes,66,opt,name=f_duration_microsecond_string,json=fDurationMicrosecondString,proto3" json:"f_duration_microsecond_string,omitempty"`
	FDurationMillisecond       *durationpb.Duration `protobuf:"bytes,67,opt,name=f_duration_millisecond,json=fDurationMillisecond,proto3" json:"f_duration_millisecond,omitempty"`
	FDurationMillisecondString *durationpb.Duration `protobuf:"bytes,68,opt,name=f_duration_millisecond_string,json=fDurationMillisecondString,proto3" json:"f_duration_millisecond_string,omitempty"`
	FDurationSecond            *durationpb.Duration `protobuf:"bytes,69,opt,name=f_duration_second,json=fDurationSecond,proto3" json:"f_duration_second,omitempty"`
	FDurationSecondString      *durationpb.Duration `protobuf:"bytes,70,opt,name=f_duration_second_string,json=fDurationSecondString,proto3" json:"f_duration_second_string,omitempty"`
	FDurationMinute            *durationpb.Duration `protobuf:"bytes,71,opt,name=f_duration_minute,json=fDurationMinute,proto3" json:"f_duration_minute,omitempty"`
	FDurationMinuteString      *durationpb.Duration `protobuf:"bytes,72,opt,name=f_duration_minute_string,json=fDurationMinuteString,proto3" json:"f_duration_minute_string,omitempty"`
	FDurationHour              *durationpb.Duration `protobuf:"bytes,73,opt,name=f_duration_hour,json=fDurationHour,proto3" json:"f_duration_hour,omitempty"`
	FDurationHourString        *durationpb.Duration `protobuf:"bytes,74,opt,name=f_duration_hour_string,json=fDurationHourString,proto3" json:"f_duration_hour_string,omitempty"`
	// Cases for google.protobuf.Timestamp
	FTimestampNative          *timestamppb.Timestamp `protobuf:"bytes,81,opt,name=f_timestamp_native,json=fTimestampNative,proto3" json:"f_timestamp_native,omitempty"`
	FTimestampTimeLayout      *timestamppb.Timestamp `protobuf:"bytes,82,opt,name=f_timestamp_time_layout,json=fTimestampTimeLayout,proto3" json:"f_timestamp_time_layout,omitempty"`
	FTimestampUnixNano        *timestamppb.Timestamp `protobuf:"bytes,83,opt,name=f_timestamp_unix_nano,json=fTimestampUnixNano,proto3" json:"f_timestamp_unix_nano,omitempty"`
	FTimestampUnixNanoString  *timestamppb.Timestamp `protobuf:"bytes,84,opt,name=f_timestamp_unix_nano_string,json=fTimestampUnixNanoString,proto3" json:"f_timestamp_unix_nano_string,omitempty"`
	FTimestampUnixMicro       *timestamppb.Timestamp `protobuf:"bytes,85,opt,name=f_timestamp_unix_micro,json=fTimestampUnixMicro,proto3" json:"f_timestamp_unix_micro,omitempty"`
	FTimestampUnixMicroString *timestamppb.Timestamp `protobuf:"bytes,86,opt,name=f_timestamp_unix_micro_string,json=fTimestampUnixMicroString,proto3" json:"f_timestamp_unix_micro_string,omitempty"`
	FTimestampUnixMilli       *timestamppb.Timestamp `protobuf:"bytes,87,opt,name=f_timestamp_unix_milli,json=fTimestampUnixMilli,proto3" json:"f_timestamp_unix_milli,omitempty"`
	FTimestampUnixMilliString *timestamppb.Timestamp `protobuf:"bytes,88,opt,name=f_timestamp_unix_milli_string,json=fTimestampUnixMilliString,proto3" json:"f_timestamp_unix_milli_string,omitempty"`
	FTimestampUnixSec         *timestamppb.Timestamp `protobuf:"bytes,89,opt,name=f_timestamp_unix_sec,json=fTimestampUnixSec,proto3" json:"f_timestamp_unix_sec,omitempty"`
	FTimestampUnixSecString   *timestamppb.Timestamp `protobuf:"bytes,90,opt,name=f_timestamp_unix_sec_string,json=fTimestampUnixSecString,proto3" json:"f_timestamp_unix_sec_string,omitempty"`
}

func (x *InvalidCodecPlain) Reset() {
	*x = InvalidCodecPlain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_cases_errors_invalid_codec_plain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidCodecPlain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidCodecPlain) ProtoMessage() {}

func (x *InvalidCodecPlain) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_cases_errors_invalid_codec_plain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidCodecPlain.ProtoReflect.Descriptor instead.
func (*InvalidCodecPlain) Descriptor() ([]byte, []int) {
	return file_tests_proto_cases_errors_invalid_codec_plain_proto_rawDescGZIP(), []int{0}
}

func (x *InvalidCodecPlain) GetFInt32Numeric() int32 {
	if x != nil {
		return x.FInt32Numeric
	}
	return 0
}

func (x *InvalidCodecPlain) GetFInt32String() int32 {
	if x != nil {
		return x.FInt32String
	}
	return 0
}

func (x *InvalidCodecPlain) GetFInt64Numeric() int64 {
	if x != nil {
		return x.FInt64Numeric
	}
	return 0
}

func (x *InvalidCodecPlain) GetFInt64String() int64 {
	if x != nil {
		return x.FInt64String
	}
	return 0
}

func (x *InvalidCodecPlain) GetFUint32Numeric() uint32 {
	if x != nil {
		return x.FUint32Numeric
	}
	return 0
}

func (x *InvalidCodecPlain) GetFUint32String() uint32 {
	if x != nil {
		return x.FUint32String
	}
	return 0
}

func (x *InvalidCodecPlain) GetFUint64Numeric() uint64 {
	if x != nil {
		return x.FUint64Numeric
	}
	return 0
}

func (x *InvalidCodecPlain) GetFUint64String() uint64 {
	if x != nil {
		return x.FUint64String
	}
	return 0
}

func (x *InvalidCodecPlain) GetFSint32Numeric() int32 {
	if x != nil {
		return x.FSint32Numeric
	}
	return 0
}

func (x *InvalidCodecPlain) GetFSint32String() int32 {
	if x != nil {
		return x.FSint32String
	}
	return 0
}

func (x *InvalidCodecPlain) GetFSint64Numeric() int64 {
	if x != nil {
		return x.FSint64Numeric
	}
	return 0
}

func (x *InvalidCodecPlain) GetFSint64String() int64 {
	if x != nil {
		return x.FSint64String
	}
	return 0
}

func (x *InvalidCodecPlain) GetFSfixed32Numeric() int32 {
	if x != nil {
		return x.FSfixed32Numeric
	}
	return 0
}

func (x *InvalidCodecPlain) GetFSfixed32String() int32 {
	if x != nil {
		return x.FSfixed32String
	}
	return 0
}

func (x *InvalidCodecPlain) GetFSfixed64Numeric() int64 {
	if x != nil {
		return x.FSfixed64Numeric
	}
	return 0
}

func (x *InvalidCodecPlain) GetFSfixed64String() int64 {
	if x != nil {
		return x.FSfixed64String
	}
	return 0
}

func (x *InvalidCodecPlain) GetFFixed32Numeric() uint32 {
	if x != nil {
		return x.FFixed32Numeric
	}
	return 0
}

func (x *InvalidCodecPlain) GetFFixed32String() uint32 {
	if x != nil {
		return x.FFixed32String
	}
	return 0
}

func (x *InvalidCodecPlain) GetFFixed64Numeric() uint64 {
	if x != nil {
		return x.FFixed64Numeric
	}
	return 0
}

func (x *InvalidCodecPlain) GetFFixed64String() uint64 {
	if x != nil {
		return x.FFixed64String
	}
	return 0
}

func (x *InvalidCodecPlain) GetFFloatNumeric() float32 {
	if x != nil {
		return x.FFloatNumeric
	}
	return 0
}

func (x *InvalidCodecPlain) GetFFloatString() float32 {
	if x != nil {
		return x.FFloatString
	}
	return 0
}

func (x *InvalidCodecPlain) GetFDoubleNumeric() float64 {
	if x != nil {
		return x.FDoubleNumeric
	}
	return 0
}

func (x *InvalidCodecPlain) GetFDoubleString() float64 {
	if x != nil {
		return x.FDoubleString
	}
	return 0
}

func (x *InvalidCodecPlain) GetFBoolBool() bool {
	if x != nil {
		return x.FBoolBool
	}
	return false
}

func (x *InvalidCodecPlain) GetFBoolString() bool {
	if x != nil {
		return x.FBoolString
	}
	return false
}

func (x *InvalidCodecPlain) GetFStringNone() string {
	if x != nil {
		return x.FStringNone
	}
	return ""
}

func (x *InvalidCodecPlain) GetFBytesNone() []byte {
	if x != nil {
		return x.FBytesNone
	}
	return nil
}

func (x *InvalidCodecPlain) GetFEnumNumeric() EnumNum1 {
	if x != nil {
		return x.FEnumNumeric
	}
	return EnumNum1_Zero
}

func (x *InvalidCodecPlain) GetFEnumNumericString() EnumNum1 {
	if x != nil {
		return x.FEnumNumericString
	}
	return EnumNum1_Zero
}

func (x *InvalidCodecPlain) GetFEnumString() EnumNum1 {
	if x != nil {
		return x.FEnumString
	}
	return EnumNum1_Zero
}

func (x *InvalidCodecPlain) GetFAnyNative() *anypb.Any {
	if x != nil {
		return x.FAnyNative
	}
	return nil
}

func (x *InvalidCodecPlain) GetFAnyProto() *anypb.Any {
	if x != nil {
		return x.FAnyProto
	}
	return nil
}

func (x *InvalidCodecPlain) GetFDurationNative() *durationpb.Duration {
	if x != nil {
		return x.FDurationNative
	}
	return nil
}

func (x *InvalidCodecPlain) GetFDurationString() *durationpb.Duration {
	if x != nil {
		return x.FDurationString
	}
	return nil
}

func (x *InvalidCodecPlain) GetFDurationNanosecond() *durationpb.Duration {
	if x != nil {
		return x.FDurationNanosecond
	}
	return nil
}

func (x *InvalidCodecPlain) GetFDurationNanosecondString() *durationpb.Duration {
	if x != nil {
		return x.FDurationNanosecondString
	}
	return nil
}

func (x *InvalidCodecPlain) GetFDurationMicrosecond() *durationpb.Duration {
	if x != nil {
		return x.FDurationMicrosecond
	}
	return nil
}

func (x *InvalidCodecPlain) GetFDurationMicrosecondString() *durationpb.Duration {
	if x != nil {
		return x.FDurationMicrosecondString
	}
	return nil
}

func (x *InvalidCodecPlain) GetFDurationMillisecond() *durationpb.Duration {
	if x != nil {
		return x.FDurationMillisecond
	}
	return nil
}

func (x *InvalidCodecPlain) GetFDurationMillisecondString() *durationpb.Duration {
	if x != nil {
		return x.FDurationMillisecondString
	}
	return nil
}

func (x *InvalidCodecPlain) GetFDurationSecond() *durationpb.Duration {
	if x != nil {
		return x.FDurationSecond
	}
	return nil
}

func (x *InvalidCodecPlain) GetFDurationSecondString() *durationpb.Duration {
	if x != nil {
		return x.FDurationSecondString
	}
	return nil
}

func (x *InvalidCodecPlain) GetFDurationMinute() *durationpb.Duration {
	if x != nil {
		return x.FDurationMinute
	}
	return nil
}

func (x *InvalidCodecPlain) GetFDurationMinuteString() *durationpb.Duration {
	if x != nil {
		return x.FDurationMinuteString
	}
	return nil
}

func (x *InvalidCodecPlain) GetFDurationHour() *durationpb.Duration {
	if x != nil {
		return x.FDurationHour
	}
	return nil
}

func (x *InvalidCodecPlain) GetFDurationHourString() *durationpb.Duration {
	if x != nil {
		return x.FDurationHourString
	}
	return nil
}

func (x *InvalidCodecPlain) GetFTimestampNative() *timestamppb.Timestamp {
	if x != nil {
		return x.FTimestampNative
	}
	return nil
}

func (x *InvalidCodecPlain) GetFTimestampTimeLayout() *timestamppb.Timestamp {
	if x != nil {
		return x.FTimestampTimeLayout
	}
	return nil
}

func (x *InvalidCodecPlain) GetFTimestampUnixNano() *timestamppb.Timestamp {
	if x != nil {
		return x.FTimestampUnixNano
	}
	return nil
}

func (x *InvalidCodecPlain) GetFTimestampUnixNanoString() *timestamppb.Timestamp {
	if x != nil {
		return x.FTimestampUnixNanoString
	}
	return nil
}

func (x *InvalidCodecPlain) GetFTimestampUnixMicro() *timestamppb.Timestamp {
	if x != nil {
		return x.FTimestampUnixMicro
	}
	return nil
}

func (x *InvalidCodecPlain) GetFTimestampUnixMicroString() *timestamppb.Timestamp {
	if x != nil {
		return x.FTimestampUnixMicroString
	}
	return nil
}

func (x *InvalidCodecPlain) GetFTimestampUnixMilli() *timestamppb.Timestamp {
	if x != nil {
		return x.FTimestampUnixMilli
	}
	return nil
}

func (x *InvalidCodecPlain) GetFTimestampUnixMilliString() *timestamppb.Timestamp {
	if x != nil {
		return x.FTimestampUnixMilliString
	}
	return nil
}

func (x *InvalidCodecPlain) GetFTimestampUnixSec() *timestamppb.Timestamp {
	if x != nil {
		return x.FTimestampUnixSec
	}
	return nil
}

func (x *InvalidCodecPlain) GetFTimestampUnixSecString() *timestamppb.Timestamp {
	if x != nil {
		return x.FTimestampUnixSecString
	}
	return nil
}

var File_tests_proto_cases_errors_invalid_codec_plain_proto protoreflect.FileDescriptor

var file_tests_proto_cases_errors_invalid_codec_plain_proto_rawDesc = []byte{
	0x0a, 0x32, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x5f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb2, 0x20, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x0f, 0x66, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x66,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x30, 0x0a, 0x0e,
	0x66, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x0a, 0x02, 0x08, 0x02,
	0x52, 0x0c, 0x66, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x32,
	0x0a, 0x0f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x12,
	0x02, 0x08, 0x01, 0x52, 0x0d, 0x66, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x12, 0x30, 0x0a, 0x0e, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06,
	0x5a, 0x04, 0x12, 0x02, 0x08, 0x02, 0x52, 0x0c, 0x66, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x10, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a,
	0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x3a, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x66, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x32, 0x0a, 0x0f, 0x66, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x3a, 0x02, 0x08, 0x02, 0x52,
	0x0d, 0x66, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x34,
	0x0a, 0x10, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04,
	0x42, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x66, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x12, 0x32, 0x0a, 0x0f, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x8a,
	0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x42, 0x02, 0x08, 0x02, 0x52, 0x0d, 0x66, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x10, 0x66, 0x5f, 0x73, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x11, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x1a, 0x02, 0x08, 0x01, 0x52, 0x0e,
	0x66, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x32,
	0x0a, 0x0f, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x1a,
	0x02, 0x08, 0x02, 0x52, 0x0d, 0x66, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x34, 0x0a, 0x10, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x42, 0x0a, 0x8a, 0xa2,
	0x1f, 0x06, 0x5a, 0x04, 0x22, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x66, 0x53, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x32, 0x0a, 0x0f, 0x66, 0x5f, 0x73, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x12, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x22, 0x02, 0x08, 0x02, 0x52, 0x0d, 0x66,
	0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x12,
	0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04,
	0x2a, 0x02, 0x08, 0x01, 0x52, 0x10, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x36, 0x0a, 0x11, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0f, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x2a, 0x02, 0x08, 0x02, 0x52, 0x0f, 0x66,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x38,
	0x0a, 0x12, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06,
	0x5a, 0x04, 0x32, 0x02, 0x08, 0x01, 0x52, 0x10, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x36, 0x0a, 0x11, 0x66, 0x5f, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x10, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x32, 0x02, 0x08, 0x02, 0x52,
	0x0f, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x36, 0x0a, 0x11, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x07, 0x42, 0x0a, 0x8a, 0xa2, 0x1f,
	0x06, 0x5a, 0x04, 0x4a, 0x02, 0x08, 0x01, 0x52, 0x0f, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x34, 0x0a, 0x10, 0x66, 0x5f, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x07, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x4a, 0x02, 0x08, 0x02, 0x52, 0x0e,
	0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x36,
	0x0a, 0x11, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28, 0x06, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a,
	0x04, 0x52, 0x02, 0x08, 0x01, 0x52, 0x0f, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x34, 0x0a, 0x10, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x06,
	0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x52, 0x02, 0x08, 0x02, 0x52, 0x0e, 0x66, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x0f,
	0x66, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x5a, 0x02, 0x08,
	0x01, 0x52, 0x0d, 0x66, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x12, 0x30, 0x0a, 0x0e, 0x66, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04,
	0x5a, 0x02, 0x08, 0x02, 0x52, 0x0c, 0x66, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x34, 0x0a, 0x10, 0x66, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x8a, 0xa2,
	0x1f, 0x06, 0x5a, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x66, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x32, 0x0a, 0x0f, 0x66, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x62, 0x02, 0x08, 0x02, 0x52, 0x0d, 0x66,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x0b,
	0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x6a, 0x02, 0x08, 0x01, 0x52, 0x09, 0x66,
	0x42, 0x6f, 0x6f, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x2e, 0x0a, 0x0d, 0x66, 0x5f, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x6a, 0x02, 0x08, 0x02, 0x52, 0x0b, 0x66, 0x42, 0x6f,
	0x6f, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x0d, 0x66, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0x8a, 0xa2, 0x1f, 0x04, 0x5a, 0x02, 0x7a, 0x00, 0x52, 0x0b, 0x66, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4e, 0x6f, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x0c, 0x66, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x09, 0x8a, 0xa2,
	0x1f, 0x05, 0x5a, 0x03, 0x82, 0x01, 0x00, 0x52, 0x0a, 0x66, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4e,
	0x6f, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4e, 0x75, 0x6d, 0x31, 0x42, 0x0a,
	0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x72, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x66, 0x45, 0x6e, 0x75,
	0x6d, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x50, 0x0a, 0x15, 0x66, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4e, 0x75, 0x6d, 0x31, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06,
	0x5a, 0x04, 0x72, 0x02, 0x08, 0x02, 0x52, 0x12, 0x66, 0x45, 0x6e, 0x75, 0x6d, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x0d, 0x66, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x4e, 0x75, 0x6d, 0x31, 0x42, 0x0a, 0x8a, 0xa2, 0x1f, 0x06, 0x5a, 0x04, 0x72, 0x02, 0x08, 0x03,
	0x52, 0x0b, 0x66, 0x45, 0x6e, 0x75, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a,
	0x0c, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a,
	0x05, 0xaa, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x66, 0x41, 0x6e, 0x79, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x0b, 0x8a,
	0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xaa, 0x01, 0x02, 0x08, 0x02, 0x52, 0x09, 0x66, 0x41, 0x6e, 0x79,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x52, 0x0a, 0x11, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x8a, 0xa2, 0x1f,
	0x07, 0x5a, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0f, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x66, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x3e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x02, 0x52, 0x0f, 0x66, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x5a, 0x0a,
	0x15, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6e, 0x6f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xb2,
	0x01, 0x02, 0x08, 0x03, 0x52, 0x13, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x67, 0x0a, 0x1c, 0x66, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07,
	0x5a, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x04, 0x52, 0x19, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x5c, 0x0a, 0x16, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x41, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x8a,
	0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x05, 0x52, 0x14, 0x66, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x12, 0x69, 0x0a, 0x1d, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x06, 0x52,
	0x1a, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x5c, 0x0a, 0x16, 0x66,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xb2, 0x01,
	0x02, 0x08, 0x07, 0x52, 0x14, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x69, 0x0a, 0x1d, 0x66, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x8a, 0xa2, 0x1f,
	0x07, 0x5a, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x08, 0x52, 0x1a, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x11, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07,
	0x5a, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x09, 0x52, 0x0f, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x5f, 0x0a, 0x18, 0x66, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xb2, 0x01, 0x02,
	0x08, 0x0a, 0x52, 0x15, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x11, 0x66, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x47,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x0b, 0x52, 0x0f, 0x66, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x5f, 0x0a,
	0x18, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07,
	0x5a, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x0c, 0x52, 0x15, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4e,
	0x0a, 0x0f, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x75,
	0x72, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x0d, 0x52,
	0x0d, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x5b,
	0x0a, 0x16, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x75,
	0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a,
	0x05, 0xb2, 0x01, 0x02, 0x08, 0x0e, 0x52, 0x13, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x6f, 0x75, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x55, 0x0a, 0x12, 0x66,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xba, 0x01, 0x02, 0x08, 0x01,
	0x52, 0x10, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x7b, 0x0a, 0x17, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x52, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x28, 0x8a, 0xa2, 0x1f, 0x24, 0x5a, 0x22, 0xba, 0x01, 0x1f, 0x08, 0x02, 0x12, 0x1b, 0x0a, 0x19,
	0x32, 0x30, 0x30, 0x36, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x32, 0x54, 0x31, 0x35, 0x3a, 0x30, 0x34,
	0x3a, 0x30, 0x35, 0x5a, 0x30, 0x37, 0x3a, 0x30, 0x30, 0x52, 0x14, 0x66, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12,
	0x5a, 0x0a, 0x15, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75,
	0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07,
	0x5a, 0x05, 0xba, 0x01, 0x02, 0x08, 0x03, 0x52, 0x12, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x67, 0x0a, 0x1c, 0x66,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f,
	0x6e, 0x61, 0x6e, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x54, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0x8a,
	0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xba, 0x01, 0x02, 0x08, 0x04, 0x52, 0x18, 0x66, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x5c, 0x0a, 0x16, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x18, 0x55,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xba, 0x01, 0x02, 0x08, 0x05, 0x52, 0x13, 0x66,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x12, 0x69, 0x0a, 0x1d, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xba, 0x01, 0x02,
	0x08, 0x06, 0x52, 0x19, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e,
	0x69, 0x78, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x5c, 0x0a,
	0x16, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x6e, 0x69,
	0x78, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a,
	0x05, 0xba, 0x01, 0x02, 0x08, 0x07, 0x52, 0x13, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x12, 0x69, 0x0a, 0x1d, 0x66,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f,
	0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x58, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b,
	0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xba, 0x01, 0x02, 0x08, 0x08, 0x52, 0x19, 0x66, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x4d, 0x69, 0x6c, 0x6c, 0x69,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x58, 0x0a, 0x14, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x59,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xba, 0x01, 0x02, 0x08, 0x09, 0x52, 0x11, 0x66,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x53, 0x65, 0x63,
	0x12, 0x65, 0x0a, 0x1b, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x75, 0x6e, 0x69, 0x78, 0x5f, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x0b, 0x8a, 0xa2, 0x1f, 0x07, 0x5a, 0x05, 0xba, 0x01, 0x02, 0x08, 0x0a, 0x52, 0x17,
	0x66, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x53, 0x65,
	0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x17, 0x5a, 0x15, 0x78, 0x67, 0x6f, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x62, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tests_proto_cases_errors_invalid_codec_plain_proto_rawDescOnce sync.Once
	file_tests_proto_cases_errors_invalid_codec_plain_proto_rawDescData = file_tests_proto_cases_errors_invalid_codec_plain_proto_rawDesc
)

func file_tests_proto_cases_errors_invalid_codec_plain_proto_rawDescGZIP() []byte {
	file_tests_proto_cases_errors_invalid_codec_plain_proto_rawDescOnce.Do(func() {
		file_tests_proto_cases_errors_invalid_codec_plain_proto_rawDescData = protoimpl.X.CompressGZIP(file_tests_proto_cases_errors_invalid_codec_plain_proto_rawDescData)
	})
	return file_tests_proto_cases_errors_invalid_codec_plain_proto_rawDescData
}

var file_tests_proto_cases_errors_invalid_codec_plain_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_tests_proto_cases_errors_invalid_codec_plain_proto_goTypes = []interface{}{
	(*InvalidCodecPlain)(nil),     // 0: errors.InvalidCodecPlain
	(EnumNum1)(0),                 // 1: private.EnumNum1
	(*anypb.Any)(nil),             // 2: google.protobuf.Any
	(*durationpb.Duration)(nil),   // 3: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_tests_proto_cases_errors_invalid_codec_plain_proto_depIdxs = []int32{
	1,  // 0: errors.InvalidCodecPlain.f_enum_numeric:type_name -> private.EnumNum1
	1,  // 1: errors.InvalidCodecPlain.f_enum_numeric_string:type_name -> private.EnumNum1
	1,  // 2: errors.InvalidCodecPlain.f_enum_string:type_name -> private.EnumNum1
	2,  // 3: errors.InvalidCodecPlain.f_any_native:type_name -> google.protobuf.Any
	2,  // 4: errors.InvalidCodecPlain.f_any_proto:type_name -> google.protobuf.Any
	3,  // 5: errors.InvalidCodecPlain.f_duration_native:type_name -> google.protobuf.Duration
	3,  // 6: errors.InvalidCodecPlain.f_duration_string:type_name -> google.protobuf.Duration
	3,  // 7: errors.InvalidCodecPlain.f_duration_nanosecond:type_name -> google.protobuf.Duration
	3,  // 8: errors.InvalidCodecPlain.f_duration_nanosecond_string:type_name -> google.protobuf.Duration
	3,  // 9: errors.InvalidCodecPlain.f_duration_microsecond:type_name -> google.protobuf.Duration
	3,  // 10: errors.InvalidCodecPlain.f_duration_microsecond_string:type_name -> google.protobuf.Duration
	3,  // 11: errors.InvalidCodecPlain.f_duration_millisecond:type_name -> google.protobuf.Duration
	3,  // 12: errors.InvalidCodecPlain.f_duration_millisecond_string:type_name -> google.protobuf.Duration
	3,  // 13: errors.InvalidCodecPlain.f_duration_second:type_name -> google.protobuf.Duration
	3,  // 14: errors.InvalidCodecPlain.f_duration_second_string:type_name -> google.protobuf.Duration
	3,  // 15: errors.InvalidCodecPlain.f_duration_minute:type_name -> google.protobuf.Duration
	3,  // 16: errors.InvalidCodecPlain.f_duration_minute_string:type_name -> google.protobuf.Duration
	3,  // 17: errors.InvalidCodecPlain.f_duration_hour:type_name -> google.protobuf.Duration
	3,  // 18: errors.InvalidCodecPlain.f_duration_hour_string:type_name -> google.protobuf.Duration
	4,  // 19: errors.InvalidCodecPlain.f_timestamp_native:type_name -> google.protobuf.Timestamp
	4,  // 20: errors.InvalidCodecPlain.f_timestamp_time_layout:type_name -> google.protobuf.Timestamp
	4,  // 21: errors.InvalidCodecPlain.f_timestamp_unix_nano:type_name -> google.protobuf.Timestamp
	4,  // 22: errors.InvalidCodecPlain.f_timestamp_unix_nano_string:type_name -> google.protobuf.Timestamp
	4,  // 23: errors.InvalidCodecPlain.f_timestamp_unix_micro:type_name -> google.protobuf.Timestamp
	4,  // 24: errors.InvalidCodecPlain.f_timestamp_unix_micro_string:type_name -> google.protobuf.Timestamp
	4,  // 25: errors.InvalidCodecPlain.f_timestamp_unix_milli:type_name -> google.protobuf.Timestamp
	4,  // 26: errors.InvalidCodecPlain.f_timestamp_unix_milli_string:type_name -> google.protobuf.Timestamp
	4,  // 27: errors.InvalidCodecPlain.f_timestamp_unix_sec:type_name -> google.protobuf.Timestamp
	4,  // 28: errors.InvalidCodecPlain.f_timestamp_unix_sec_string:type_name -> google.protobuf.Timestamp
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_tests_proto_cases_errors_invalid_codec_plain_proto_init() }
func file_tests_proto_cases_errors_invalid_codec_plain_proto_init() {
	if File_tests_proto_cases_errors_invalid_codec_plain_proto != nil {
		return
	}
	file_tests_proto_cases_errors_private_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tests_proto_cases_errors_invalid_codec_plain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidCodecPlain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tests_proto_cases_errors_invalid_codec_plain_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tests_proto_cases_errors_invalid_codec_plain_proto_goTypes,
		DependencyIndexes: file_tests_proto_cases_errors_invalid_codec_plain_proto_depIdxs,
		MessageInfos:      file_tests_proto_cases_errors_invalid_codec_plain_proto_msgTypes,
	}.Build()
	File_tests_proto_cases_errors_invalid_codec_plain_proto = out.File
	file_tests_proto_cases_errors_invalid_codec_plain_proto_rawDesc = nil
	file_tests_proto_cases_errors_invalid_codec_plain_proto_goTypes = nil
	file_tests_proto_cases_errors_invalid_codec_plain_proto_depIdxs = nil
}
