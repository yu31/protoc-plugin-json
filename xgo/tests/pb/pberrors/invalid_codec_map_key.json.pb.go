// Code generated by protoc-gen-gojson. DO NOT EDIT.
// versions:
// 		protoc-gen-gojson 0.0.1
// source: tests/proto/cases/errors/invalid_codec_map_key.proto

package pberrors

import (
	errors "errors"
	_ "github.com/yu31/protoc-plugin-json/xgo/pb/pbjson"
	jsondecoder "github.com/yu31/protoc-plugin-json/xgo/pkg/jsondecoder"
	jsonencoder "github.com/yu31/protoc-plugin-json/xgo/pkg/jsonencoder"
)

// MarshalJSON implements interface json.Marshaler for proto message InvalidCodecMapKey in file tests/proto/cases/errors/invalid_codec_map_key.proto
func (x *InvalidCodecMapKey) MarshalJSON() ([]byte, error) {
	if x == nil {
		return []byte("null"), nil
	}
	enc := jsonencoder.New(3320)
	enc.AppendObjectBegin() // Add begin JSON identifier

	jsonencoder.AppendMapI32I32(enc, "f_int32_key_numeric_val_numeric", x.FInt32KeyNumericValNumeric, false, false, false)
	jsonencoder.AppendMapI32I32(enc, "f_int32_key_string_val_string", x.FInt32KeyStringValString, false, true, true)
	jsonencoder.AppendMapI64I64(enc, "f_int64_key_numeric_val_numeric", x.FInt64KeyNumericValNumeric, false, false, false)
	jsonencoder.AppendMapI64I64(enc, "f_int64_key_string_val_string", x.FInt64KeyStringValString, false, true, true)
	jsonencoder.AppendMapU32U32(enc, "f_uint32_key_numeric_val_numeric", x.FUint32KeyNumericValNumeric, false, false, false)
	jsonencoder.AppendMapU32U32(enc, "f_uint32_key_string_val_string", x.FUint32KeyStringValString, false, true, true)
	jsonencoder.AppendMapU64U64(enc, "f_uint64_key_numeric_val_numeric", x.FUint64KeyNumericValNumeric, false, false, false)
	jsonencoder.AppendMapU64U64(enc, "f_uint64_key_string_val_string", x.FUint64KeyStringValString, false, true, true)
	jsonencoder.AppendMapI32I32(enc, "f_sint32_key_numeric_val_numeric", x.FSint32KeyNumericValNumeric, false, false, false)
	jsonencoder.AppendMapI32I32(enc, "f_sint32_key_string_val_string", x.FSint32KeyStringValString, false, true, true)
	jsonencoder.AppendMapI64I64(enc, "f_sint64_key_numeric_val_numeric", x.FSint64KeyNumericValNumeric, false, false, false)
	jsonencoder.AppendMapI64I64(enc, "f_sint64_key_string_val_string", x.FSint64KeyStringValString, false, true, true)
	jsonencoder.AppendMapI32I32(enc, "f_sfixed32_key_numeric_val_numeric", x.FSfixed32KeyNumericValNumeric, false, false, false)
	jsonencoder.AppendMapI32I32(enc, "f_sfixed32_key_string_val_string", x.FSfixed32KeyStringValString, false, true, true)
	jsonencoder.AppendMapI64I64(enc, "f_sfixed64_key_numeric_val_numeric", x.FSfixed64KeyNumericValNumeric, false, false, false)
	jsonencoder.AppendMapI64I64(enc, "f_sfixed64_key_string_val_string", x.FSfixed64KeyStringValString, false, true, true)
	jsonencoder.AppendMapU32U32(enc, "f_fixed32_key_numeric_val_numeric", x.FFixed32KeyNumericValNumeric, false, false, false)
	jsonencoder.AppendMapU32U32(enc, "f_fixed32_key_string_val_string", x.FFixed32KeyStringValString, false, true, true)
	jsonencoder.AppendMapU64U64(enc, "f_fixed64_key_numeric_val_numeric", x.FFixed64KeyNumericValNumeric, false, false, false)
	jsonencoder.AppendMapU64U64(enc, "f_fixed64_key_string_val_string", x.FFixed64KeyStringValString, false, true, true)
	jsonencoder.AppendMapBoolBool(enc, "f_bool_key_bool_val_bool", x.FBoolKeyBoolValBool, false, false, false)
	jsonencoder.AppendMapBoolBool(enc, "f_bool_key_string_val_string", x.FBoolKeyStringValString, false, true, true)
	jsonencoder.AppendMapStrStr(enc, "f_string_key_none_val_none1", x.FStringKeyNoneValNone1, false)
	enc.AppendObjectEnd() // Add end JSON identifier
	return enc.Bytes(), nil
}

// UnmarshalJSON implements json.Unmarshaler for proto message InvalidCodecMapKey in file tests/proto/cases/errors/invalid_codec_map_key.proto
func (x *InvalidCodecMapKey) UnmarshalJSON(b []byte) error {
	if x == nil {
		return errors.New("json: Unmarshal: xgo/tests/pb/pberrors.(*InvalidCodecMapKey) is nil")
	}
	var (
		err    error
		isNULL bool
		dec    *jsondecoder.Decoder
	)
	if dec, err = jsondecoder.New(b); err != nil {
		return err
	}
	if isNULL, err = dec.BeforeScanJSON(); err != nil || isNULL {
		return err
	}
LOOP_SCAN:
	for { // Loop to read the JSON objects
		var (
			jsonKey string
			isEnd   bool
		)

		if isEnd, err = dec.BeforeScanNext(); err != nil {
			return err
		}
		if isEnd {
			break LOOP_SCAN
		}

		if jsonKey, err = dec.ReadJSONKey(); err != nil {
			return err
		}
		switch jsonKey { // match the jsonKey
		case "f_int32_key_numeric_val_numeric":
			if x.FInt32KeyNumericValNumeric, err = jsondecoder.ReadMapI32I32(dec, x.FInt32KeyNumericValNumeric, false, false); err != nil {
				return err
			}
		case "f_int32_key_string_val_string":
			if x.FInt32KeyStringValString, err = jsondecoder.ReadMapI32I32(dec, x.FInt32KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_int64_key_numeric_val_numeric":
			if x.FInt64KeyNumericValNumeric, err = jsondecoder.ReadMapI64I64(dec, x.FInt64KeyNumericValNumeric, false, false); err != nil {
				return err
			}
		case "f_int64_key_string_val_string":
			if x.FInt64KeyStringValString, err = jsondecoder.ReadMapI64I64(dec, x.FInt64KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_uint32_key_numeric_val_numeric":
			if x.FUint32KeyNumericValNumeric, err = jsondecoder.ReadMapU32U32(dec, x.FUint32KeyNumericValNumeric, false, false); err != nil {
				return err
			}
		case "f_uint32_key_string_val_string":
			if x.FUint32KeyStringValString, err = jsondecoder.ReadMapU32U32(dec, x.FUint32KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_uint64_key_numeric_val_numeric":
			if x.FUint64KeyNumericValNumeric, err = jsondecoder.ReadMapU64U64(dec, x.FUint64KeyNumericValNumeric, false, false); err != nil {
				return err
			}
		case "f_uint64_key_string_val_string":
			if x.FUint64KeyStringValString, err = jsondecoder.ReadMapU64U64(dec, x.FUint64KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_sint32_key_numeric_val_numeric":
			if x.FSint32KeyNumericValNumeric, err = jsondecoder.ReadMapI32I32(dec, x.FSint32KeyNumericValNumeric, false, false); err != nil {
				return err
			}
		case "f_sint32_key_string_val_string":
			if x.FSint32KeyStringValString, err = jsondecoder.ReadMapI32I32(dec, x.FSint32KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_sint64_key_numeric_val_numeric":
			if x.FSint64KeyNumericValNumeric, err = jsondecoder.ReadMapI64I64(dec, x.FSint64KeyNumericValNumeric, false, false); err != nil {
				return err
			}
		case "f_sint64_key_string_val_string":
			if x.FSint64KeyStringValString, err = jsondecoder.ReadMapI64I64(dec, x.FSint64KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_sfixed32_key_numeric_val_numeric":
			if x.FSfixed32KeyNumericValNumeric, err = jsondecoder.ReadMapI32I32(dec, x.FSfixed32KeyNumericValNumeric, false, false); err != nil {
				return err
			}
		case "f_sfixed32_key_string_val_string":
			if x.FSfixed32KeyStringValString, err = jsondecoder.ReadMapI32I32(dec, x.FSfixed32KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_sfixed64_key_numeric_val_numeric":
			if x.FSfixed64KeyNumericValNumeric, err = jsondecoder.ReadMapI64I64(dec, x.FSfixed64KeyNumericValNumeric, false, false); err != nil {
				return err
			}
		case "f_sfixed64_key_string_val_string":
			if x.FSfixed64KeyStringValString, err = jsondecoder.ReadMapI64I64(dec, x.FSfixed64KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_fixed32_key_numeric_val_numeric":
			if x.FFixed32KeyNumericValNumeric, err = jsondecoder.ReadMapU32U32(dec, x.FFixed32KeyNumericValNumeric, false, false); err != nil {
				return err
			}
		case "f_fixed32_key_string_val_string":
			if x.FFixed32KeyStringValString, err = jsondecoder.ReadMapU32U32(dec, x.FFixed32KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_fixed64_key_numeric_val_numeric":
			if x.FFixed64KeyNumericValNumeric, err = jsondecoder.ReadMapU64U64(dec, x.FFixed64KeyNumericValNumeric, false, false); err != nil {
				return err
			}
		case "f_fixed64_key_string_val_string":
			if x.FFixed64KeyStringValString, err = jsondecoder.ReadMapU64U64(dec, x.FFixed64KeyStringValString, true, true); err != nil {
				return err
			}
		case "f_bool_key_bool_val_bool":
			if x.FBoolKeyBoolValBool, err = jsondecoder.ReadMapBoolBool(dec, x.FBoolKeyBoolValBool, false, false); err != nil {
				return err
			}
		case "f_bool_key_string_val_string":
			if x.FBoolKeyStringValString, err = jsondecoder.ReadMapBoolBool(dec, x.FBoolKeyStringValString, true, true); err != nil {
				return err
			}
		case "f_string_key_none_val_none1":
			if x.FStringKeyNoneValNone1, err = jsondecoder.ReadMapStrStr(dec, x.FStringKeyNoneValNone1); err != nil {
				return err
			}
		default:
			if err = dec.DiscardValue(); err != nil {
				return err
			}
		} // end switch
	}
	return nil
}
