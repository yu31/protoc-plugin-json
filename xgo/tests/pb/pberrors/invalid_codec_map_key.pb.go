// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: tests/proto/cases/errors/invalid_codec_map_key.proto

package pberrors

import (
	_ "github.com/yu31/protoc-plugin-json/xgo/pb/pbjson"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// InvalidCodecMapKey for test cases that the codec of map key is invalid in unmarshal
type InvalidCodecMapKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FInt32KeyNumericValNumeric    map[int32]int32   `protobuf:"bytes,1,rep,name=f_int32_key_numeric_val_numeric,json=fInt32KeyNumericValNumeric,proto3" json:"f_int32_key_numeric_val_numeric,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FInt32KeyStringValString      map[int32]int32   `protobuf:"bytes,2,rep,name=f_int32_key_string_val_string,json=fInt32KeyStringValString,proto3" json:"f_int32_key_string_val_string,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FInt64KeyNumericValNumeric    map[int64]int64   `protobuf:"bytes,3,rep,name=f_int64_key_numeric_val_numeric,json=fInt64KeyNumericValNumeric,proto3" json:"f_int64_key_numeric_val_numeric,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FInt64KeyStringValString      map[int64]int64   `protobuf:"bytes,4,rep,name=f_int64_key_string_val_string,json=fInt64KeyStringValString,proto3" json:"f_int64_key_string_val_string,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FUint32KeyNumericValNumeric   map[uint32]uint32 `protobuf:"bytes,5,rep,name=f_uint32_key_numeric_val_numeric,json=fUint32KeyNumericValNumeric,proto3" json:"f_uint32_key_numeric_val_numeric,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FUint32KeyStringValString     map[uint32]uint32 `protobuf:"bytes,6,rep,name=f_uint32_key_string_val_string,json=fUint32KeyStringValString,proto3" json:"f_uint32_key_string_val_string,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FUint64KeyNumericValNumeric   map[uint64]uint64 `protobuf:"bytes,7,rep,name=f_uint64_key_numeric_val_numeric,json=fUint64KeyNumericValNumeric,proto3" json:"f_uint64_key_numeric_val_numeric,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FUint64KeyStringValString     map[uint64]uint64 `protobuf:"bytes,8,rep,name=f_uint64_key_string_val_string,json=fUint64KeyStringValString,proto3" json:"f_uint64_key_string_val_string,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FSint32KeyNumericValNumeric   map[int32]int32   `protobuf:"bytes,9,rep,name=f_sint32_key_numeric_val_numeric,json=fSint32KeyNumericValNumeric,proto3" json:"f_sint32_key_numeric_val_numeric,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	FSint32KeyStringValString     map[int32]int32   `protobuf:"bytes,10,rep,name=f_sint32_key_string_val_string,json=fSint32KeyStringValString,proto3" json:"f_sint32_key_string_val_string,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	FSint64KeyNumericValNumeric   map[int64]int64   `protobuf:"bytes,11,rep,name=f_sint64_key_numeric_val_numeric,json=fSint64KeyNumericValNumeric,proto3" json:"f_sint64_key_numeric_val_numeric,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	FSint64KeyStringValString     map[int64]int64   `protobuf:"bytes,12,rep,name=f_sint64_key_string_val_string,json=fSint64KeyStringValString,proto3" json:"f_sint64_key_string_val_string,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	FSfixed32KeyNumericValNumeric map[int32]int32   `protobuf:"bytes,13,rep,name=f_sfixed32_key_numeric_val_numeric,json=fSfixed32KeyNumericValNumeric,proto3" json:"f_sfixed32_key_numeric_val_numeric,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	FSfixed32KeyStringValString   map[int32]int32   `protobuf:"bytes,14,rep,name=f_sfixed32_key_string_val_string,json=fSfixed32KeyStringValString,proto3" json:"f_sfixed32_key_string_val_string,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	FSfixed64KeyNumericValNumeric map[int64]int64   `protobuf:"bytes,15,rep,name=f_sfixed64_key_numeric_val_numeric,json=fSfixed64KeyNumericValNumeric,proto3" json:"f_sfixed64_key_numeric_val_numeric,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	FSfixed64KeyStringValString   map[int64]int64   `protobuf:"bytes,16,rep,name=f_sfixed64_key_string_val_string,json=fSfixed64KeyStringValString,proto3" json:"f_sfixed64_key_string_val_string,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	FFixed32KeyNumericValNumeric  map[uint32]uint32 `protobuf:"bytes,17,rep,name=f_fixed32_key_numeric_val_numeric,json=fFixed32KeyNumericValNumeric,proto3" json:"f_fixed32_key_numeric_val_numeric,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	FFixed32KeyStringValString    map[uint32]uint32 `protobuf:"bytes,18,rep,name=f_fixed32_key_string_val_string,json=fFixed32KeyStringValString,proto3" json:"f_fixed32_key_string_val_string,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	FFixed64KeyNumericValNumeric  map[uint64]uint64 `protobuf:"bytes,19,rep,name=f_fixed64_key_numeric_val_numeric,json=fFixed64KeyNumericValNumeric,proto3" json:"f_fixed64_key_numeric_val_numeric,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	FFixed64KeyStringValString    map[uint64]uint64 `protobuf:"bytes,20,rep,name=f_fixed64_key_string_val_string,json=fFixed64KeyStringValString,proto3" json:"f_fixed64_key_string_val_string,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	FBoolKeyBoolValBool           map[bool]bool     `protobuf:"bytes,21,rep,name=f_bool_key_bool_val_bool,json=fBoolKeyBoolValBool,proto3" json:"f_bool_key_bool_val_bool,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FBoolKeyStringValString       map[bool]bool     `protobuf:"bytes,22,rep,name=f_bool_key_string_val_string,json=fBoolKeyStringValString,proto3" json:"f_bool_key_string_val_string,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FStringKeyNoneValNone1        map[string]string `protobuf:"bytes,23,rep,name=f_string_key_none_val_none1,json=fStringKeyNoneValNone1,proto3" json:"f_string_key_none_val_none1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InvalidCodecMapKey) Reset() {
	*x = InvalidCodecMapKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_cases_errors_invalid_codec_map_key_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidCodecMapKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidCodecMapKey) ProtoMessage() {}

func (x *InvalidCodecMapKey) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_cases_errors_invalid_codec_map_key_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidCodecMapKey.ProtoReflect.Descriptor instead.
func (*InvalidCodecMapKey) Descriptor() ([]byte, []int) {
	return file_tests_proto_cases_errors_invalid_codec_map_key_proto_rawDescGZIP(), []int{0}
}

func (x *InvalidCodecMapKey) GetFInt32KeyNumericValNumeric() map[int32]int32 {
	if x != nil {
		return x.FInt32KeyNumericValNumeric
	}
	return nil
}

func (x *InvalidCodecMapKey) GetFInt32KeyStringValString() map[int32]int32 {
	if x != nil {
		return x.FInt32KeyStringValString
	}
	return nil
}

func (x *InvalidCodecMapKey) GetFInt64KeyNumericValNumeric() map[int64]int64 {
	if x != nil {
		return x.FInt64KeyNumericValNumeric
	}
	return nil
}

func (x *InvalidCodecMapKey) GetFInt64KeyStringValString() map[int64]int64 {
	if x != nil {
		return x.FInt64KeyStringValString
	}
	return nil
}

func (x *InvalidCodecMapKey) GetFUint32KeyNumericValNumeric() map[uint32]uint32 {
	if x != nil {
		return x.FUint32KeyNumericValNumeric
	}
	return nil
}

func (x *InvalidCodecMapKey) GetFUint32KeyStringValString() map[uint32]uint32 {
	if x != nil {
		return x.FUint32KeyStringValString
	}
	return nil
}

func (x *InvalidCodecMapKey) GetFUint64KeyNumericValNumeric() map[uint64]uint64 {
	if x != nil {
		return x.FUint64KeyNumericValNumeric
	}
	return nil
}

func (x *InvalidCodecMapKey) GetFUint64KeyStringValString() map[uint64]uint64 {
	if x != nil {
		return x.FUint64KeyStringValString
	}
	return nil
}

func (x *InvalidCodecMapKey) GetFSint32KeyNumericValNumeric() map[int32]int32 {
	if x != nil {
		return x.FSint32KeyNumericValNumeric
	}
	return nil
}

func (x *InvalidCodecMapKey) GetFSint32KeyStringValString() map[int32]int32 {
	if x != nil {
		return x.FSint32KeyStringValString
	}
	return nil
}

func (x *InvalidCodecMapKey) GetFSint64KeyNumericValNumeric() map[int64]int64 {
	if x != nil {
		return x.FSint64KeyNumericValNumeric
	}
	return nil
}

func (x *InvalidCodecMapKey) GetFSint64KeyStringValString() map[int64]int64 {
	if x != nil {
		return x.FSint64KeyStringValString
	}
	return nil
}

func (x *InvalidCodecMapKey) GetFSfixed32KeyNumericValNumeric() map[int32]int32 {
	if x != nil {
		return x.FSfixed32KeyNumericValNumeric
	}
	return nil
}

func (x *InvalidCodecMapKey) GetFSfixed32KeyStringValString() map[int32]int32 {
	if x != nil {
		return x.FSfixed32KeyStringValString
	}
	return nil
}

func (x *InvalidCodecMapKey) GetFSfixed64KeyNumericValNumeric() map[int64]int64 {
	if x != nil {
		return x.FSfixed64KeyNumericValNumeric
	}
	return nil
}

func (x *InvalidCodecMapKey) GetFSfixed64KeyStringValString() map[int64]int64 {
	if x != nil {
		return x.FSfixed64KeyStringValString
	}
	return nil
}

func (x *InvalidCodecMapKey) GetFFixed32KeyNumericValNumeric() map[uint32]uint32 {
	if x != nil {
		return x.FFixed32KeyNumericValNumeric
	}
	return nil
}

func (x *InvalidCodecMapKey) GetFFixed32KeyStringValString() map[uint32]uint32 {
	if x != nil {
		return x.FFixed32KeyStringValString
	}
	return nil
}

func (x *InvalidCodecMapKey) GetFFixed64KeyNumericValNumeric() map[uint64]uint64 {
	if x != nil {
		return x.FFixed64KeyNumericValNumeric
	}
	return nil
}

func (x *InvalidCodecMapKey) GetFFixed64KeyStringValString() map[uint64]uint64 {
	if x != nil {
		return x.FFixed64KeyStringValString
	}
	return nil
}

func (x *InvalidCodecMapKey) GetFBoolKeyBoolValBool() map[bool]bool {
	if x != nil {
		return x.FBoolKeyBoolValBool
	}
	return nil
}

func (x *InvalidCodecMapKey) GetFBoolKeyStringValString() map[bool]bool {
	if x != nil {
		return x.FBoolKeyStringValString
	}
	return nil
}

func (x *InvalidCodecMapKey) GetFStringKeyNoneValNone1() map[string]string {
	if x != nil {
		return x.FStringKeyNoneValNone1
	}
	return nil
}

var File_tests_proto_cases_errors_invalid_codec_map_key_proto protoreflect.FileDescriptor

var file_tests_proto_cases_errors_invalid_codec_map_key_proto_rawDesc = []byte{
	0x0a, 0x34, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6b, 0x65, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x10,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xd0, 0x29, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x63, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x96, 0x01, 0x0a, 0x1f, 0x66, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f,
	0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x2e, 0x46, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x4b, 0x65, 0x79, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x15, 0x8a,
	0xa2, 0x1f, 0x11, 0x5a, 0x0f, 0x82, 0x02, 0x0c, 0x0a, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x04,
	0x0a, 0x02, 0x08, 0x01, 0x52, 0x1a, 0x66, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4b, 0x65, 0x79, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x12, 0x90, 0x01, 0x0a, 0x1d, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4d, 0x61,
	0x70, 0x4b, 0x65, 0x79, 0x2e, 0x46, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4b, 0x65, 0x79, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x15, 0x8a, 0xa2, 0x1f, 0x11, 0x5a, 0x0f, 0x82, 0x02, 0x0c, 0x0a, 0x04, 0x0a,
	0x02, 0x08, 0x02, 0x12, 0x04, 0x0a, 0x02, 0x08, 0x02, 0x52, 0x18, 0x66, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x96, 0x01, 0x0a, 0x1f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x2e, 0x46, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x4b, 0x65, 0x79, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x15, 0x8a, 0xa2, 0x1f, 0x11, 0x5a,
	0x0f, 0x82, 0x02, 0x0c, 0x0a, 0x04, 0x12, 0x02, 0x08, 0x01, 0x12, 0x04, 0x12, 0x02, 0x08, 0x01,
	0x52, 0x1a, 0x66, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4b, 0x65, 0x79, 0x4e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x56, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x90, 0x01, 0x0a,
	0x1d, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79,
	0x2e, 0x46, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x15,
	0x8a, 0xa2, 0x1f, 0x11, 0x5a, 0x0f, 0x82, 0x02, 0x0c, 0x0a, 0x04, 0x12, 0x02, 0x08, 0x02, 0x12,
	0x04, 0x12, 0x02, 0x08, 0x02, 0x52, 0x18, 0x66, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4b, 0x65, 0x79,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x99, 0x01, 0x0a, 0x20, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63,
	0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x2e, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4b, 0x65,
	0x79, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x15, 0x8a, 0xa2, 0x1f, 0x11, 0x5a, 0x0f, 0x82,
	0x02, 0x0c, 0x0a, 0x04, 0x3a, 0x02, 0x08, 0x01, 0x12, 0x04, 0x3a, 0x02, 0x08, 0x01, 0x52, 0x1b,
	0x66, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4b, 0x65, 0x79, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x56, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x93, 0x01, 0x0a, 0x1e,
	0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79,
	0x2e, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x15, 0x8a, 0xa2, 0x1f, 0x11, 0x5a, 0x0f, 0x82, 0x02, 0x0c, 0x0a, 0x04, 0x3a, 0x02, 0x08, 0x02,
	0x12, 0x04, 0x3a, 0x02, 0x08, 0x02, 0x52, 0x19, 0x66, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4b,
	0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x99, 0x01, 0x0a, 0x20, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x63, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x2e, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x4b, 0x65, 0x79, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x15, 0x8a, 0xa2, 0x1f, 0x11, 0x5a,
	0x0f, 0x82, 0x02, 0x0c, 0x0a, 0x04, 0x42, 0x02, 0x08, 0x01, 0x12, 0x04, 0x42, 0x02, 0x08, 0x01,
	0x52, 0x1b, 0x66, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4b, 0x65, 0x79, 0x4e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x93, 0x01,
	0x0a, 0x1e, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4d, 0x61, 0x70, 0x4b,
	0x65, 0x79, 0x2e, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x15, 0x8a, 0xa2, 0x1f, 0x11, 0x5a, 0x0f, 0x82, 0x02, 0x0c, 0x0a, 0x04, 0x42, 0x02,
	0x08, 0x02, 0x12, 0x04, 0x42, 0x02, 0x08, 0x02, 0x52, 0x19, 0x66, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x99, 0x01, 0x0a, 0x20, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x63, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x2e, 0x46, 0x53, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x4b, 0x65, 0x79, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x15, 0x8a, 0xa2, 0x1f,
	0x11, 0x5a, 0x0f, 0x82, 0x02, 0x0c, 0x0a, 0x04, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x04, 0x1a, 0x02,
	0x08, 0x01, 0x52, 0x1b, 0x66, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4b, 0x65, 0x79, 0x4e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12,
	0x93, 0x01, 0x0a, 0x1e, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4d, 0x61,
	0x70, 0x4b, 0x65, 0x79, 0x2e, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4b, 0x65, 0x79, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x15, 0x8a, 0xa2, 0x1f, 0x11, 0x5a, 0x0f, 0x82, 0x02, 0x0c, 0x0a, 0x04,
	0x1a, 0x02, 0x08, 0x02, 0x12, 0x04, 0x1a, 0x02, 0x08, 0x02, 0x52, 0x19, 0x66, 0x53, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x99, 0x01, 0x0a, 0x20, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x76,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x2e, 0x46, 0x53, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x4b, 0x65, 0x79, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x15, 0x8a,
	0xa2, 0x1f, 0x11, 0x5a, 0x0f, 0x82, 0x02, 0x0c, 0x0a, 0x04, 0x22, 0x02, 0x08, 0x01, 0x12, 0x04,
	0x22, 0x02, 0x08, 0x01, 0x52, 0x1b, 0x66, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4b, 0x65, 0x79,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x12, 0x93, 0x01, 0x0a, 0x1e, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63,
	0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x2e, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4b, 0x65,
	0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x15, 0x8a, 0xa2, 0x1f, 0x11, 0x5a, 0x0f, 0x82, 0x02, 0x0c,
	0x0a, 0x04, 0x22, 0x02, 0x08, 0x02, 0x12, 0x04, 0x22, 0x02, 0x08, 0x02, 0x52, 0x19, 0x66, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x9f, 0x01, 0x0a, 0x22, 0x66, 0x5f, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79,
	0x2e, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4b, 0x65, 0x79, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x15, 0x8a, 0xa2, 0x1f, 0x11, 0x5a, 0x0f, 0x82, 0x02, 0x0c, 0x0a, 0x04,
	0x2a, 0x02, 0x08, 0x01, 0x12, 0x04, 0x2a, 0x02, 0x08, 0x01, 0x52, 0x1d, 0x66, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x4b, 0x65, 0x79, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x99, 0x01, 0x0a, 0x20, 0x66, 0x5f,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79,
	0x2e, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x15, 0x8a, 0xa2, 0x1f, 0x11, 0x5a, 0x0f, 0x82, 0x02, 0x0c, 0x0a, 0x04, 0x2a, 0x02,
	0x08, 0x02, 0x12, 0x04, 0x2a, 0x02, 0x08, 0x02, 0x52, 0x1b, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x9f, 0x01, 0x0a, 0x22, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x5f, 0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x2e, 0x46,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4b, 0x65, 0x79, 0x4e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x56, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x15, 0x8a, 0xa2, 0x1f, 0x11, 0x5a, 0x0f, 0x82, 0x02, 0x0c, 0x0a, 0x04, 0x32, 0x02,
	0x08, 0x01, 0x12, 0x04, 0x32, 0x02, 0x08, 0x01, 0x52, 0x1d, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x4b, 0x65, 0x79, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x99, 0x01, 0x0a, 0x20, 0x66, 0x5f, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x2e, 0x46,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x15, 0x8a, 0xa2, 0x1f, 0x11, 0x5a, 0x0f, 0x82, 0x02, 0x0c, 0x0a, 0x04, 0x32, 0x02, 0x08, 0x02,
	0x12, 0x04, 0x32, 0x02, 0x08, 0x02, 0x52, 0x1b, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x9c, 0x01, 0x0a, 0x21, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x2e, 0x46, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x4b, 0x65, 0x79, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x15, 0x8a,
	0xa2, 0x1f, 0x11, 0x5a, 0x0f, 0x82, 0x02, 0x0c, 0x0a, 0x04, 0x4a, 0x02, 0x08, 0x01, 0x12, 0x04,
	0x4a, 0x02, 0x08, 0x01, 0x52, 0x1c, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4b, 0x65,
	0x79, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x12, 0x96, 0x01, 0x0a, 0x1f, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x63, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x2e, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x15, 0x8a, 0xa2, 0x1f, 0x11, 0x5a, 0x0f,
	0x82, 0x02, 0x0c, 0x0a, 0x04, 0x4a, 0x02, 0x08, 0x02, 0x12, 0x04, 0x4a, 0x02, 0x08, 0x02, 0x52,
	0x1a, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x9c, 0x01, 0x0a, 0x21,
	0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4d, 0x61, 0x70,
	0x4b, 0x65, 0x79, 0x2e, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4b, 0x65, 0x79, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x15, 0x8a, 0xa2, 0x1f, 0x11, 0x5a, 0x0f, 0x82, 0x02, 0x0c,
	0x0a, 0x04, 0x52, 0x02, 0x08, 0x01, 0x12, 0x04, 0x52, 0x02, 0x08, 0x01, 0x52, 0x1c, 0x66, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4b, 0x65, 0x79, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x56, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x96, 0x01, 0x0a, 0x1f, 0x66,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79,
	0x2e, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x15, 0x8a, 0xa2, 0x1f, 0x11, 0x5a, 0x0f, 0x82, 0x02, 0x0c, 0x0a, 0x04, 0x52, 0x02, 0x08,
	0x02, 0x12, 0x04, 0x52, 0x02, 0x08, 0x02, 0x52, 0x1a, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x81, 0x01, 0x0a, 0x18, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6f, 0x6c,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4d, 0x61, 0x70, 0x4b,
	0x65, 0x79, 0x2e, 0x46, 0x42, 0x6f, 0x6f, 0x6c, 0x4b, 0x65, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x15, 0x8a, 0xa2, 0x1f,
	0x11, 0x5a, 0x0f, 0x82, 0x02, 0x0c, 0x0a, 0x04, 0x6a, 0x02, 0x08, 0x01, 0x12, 0x04, 0x6a, 0x02,
	0x08, 0x01, 0x52, 0x13, 0x66, 0x42, 0x6f, 0x6f, 0x6c, 0x4b, 0x65, 0x79, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x8d, 0x01, 0x0a, 0x1c, 0x66, 0x5f, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x63, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x2e, 0x46, 0x42, 0x6f, 0x6f, 0x6c,
	0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x15, 0x8a, 0xa2, 0x1f, 0x11, 0x5a, 0x0f, 0x82,
	0x02, 0x0c, 0x0a, 0x04, 0x6a, 0x02, 0x08, 0x02, 0x12, 0x04, 0x6a, 0x02, 0x08, 0x02, 0x52, 0x17,
	0x66, 0x42, 0x6f, 0x6f, 0x6c, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x1b, 0x66, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x5f, 0x6e, 0x6f, 0x6e, 0x65, 0x31, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x2e, 0x46, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x6e, 0x65, 0x56, 0x61, 0x6c, 0x4e, 0x6f, 0x6e, 0x65, 0x31,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x11, 0x8a, 0xa2, 0x1f, 0x0d, 0x5a, 0x0b, 0x82, 0x02, 0x08,
	0x0a, 0x02, 0x7a, 0x00, 0x12, 0x02, 0x7a, 0x00, 0x52, 0x16, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x6e, 0x65, 0x56, 0x61, 0x6c, 0x4e, 0x6f, 0x6e, 0x65, 0x31,
	0x1a, 0x4d, 0x0a, 0x1f, 0x46, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4b, 0x65, 0x79, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x4b, 0x0a, 0x1d, 0x46, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x1f,
	0x46, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4b, 0x65, 0x79, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x56, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x1d, 0x46,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4e, 0x0a, 0x20, 0x46, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x4b, 0x65, 0x79, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x1e, 0x46, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4e, 0x0a, 0x20, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x4b, 0x65, 0x79, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x1e, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4e, 0x0a, 0x20, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4b,
	0x65, 0x79, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x1e, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4b,
	0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x4e, 0x0a, 0x20, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4b, 0x65, 0x79,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x1e, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4b, 0x65, 0x79,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x50, 0x0a, 0x22, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4b, 0x65, 0x79,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0f, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x4e, 0x0a, 0x20, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4b,
	0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0f, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x50, 0x0a, 0x22, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4b,
	0x65, 0x79, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x10, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4e, 0x0a, 0x20, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x10, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x21, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x4b, 0x65, 0x79, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x1f, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x21, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x4b, 0x65, 0x79, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x1f, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x46, 0x42, 0x6f, 0x6f, 0x6c, 0x4b, 0x65, 0x79,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x1c,
	0x46, 0x42, 0x6f, 0x6f, 0x6c, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x49, 0x0a, 0x1b, 0x46, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x6e, 0x65, 0x56, 0x61, 0x6c, 0x4e, 0x6f, 0x6e,
	0x65, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x17, 0x5a, 0x15, 0x78, 0x67, 0x6f, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2f, 0x70, 0x62, 0x2f, 0x70, 0x62, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tests_proto_cases_errors_invalid_codec_map_key_proto_rawDescOnce sync.Once
	file_tests_proto_cases_errors_invalid_codec_map_key_proto_rawDescData = file_tests_proto_cases_errors_invalid_codec_map_key_proto_rawDesc
)

func file_tests_proto_cases_errors_invalid_codec_map_key_proto_rawDescGZIP() []byte {
	file_tests_proto_cases_errors_invalid_codec_map_key_proto_rawDescOnce.Do(func() {
		file_tests_proto_cases_errors_invalid_codec_map_key_proto_rawDescData = protoimpl.X.CompressGZIP(file_tests_proto_cases_errors_invalid_codec_map_key_proto_rawDescData)
	})
	return file_tests_proto_cases_errors_invalid_codec_map_key_proto_rawDescData
}

var file_tests_proto_cases_errors_invalid_codec_map_key_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_tests_proto_cases_errors_invalid_codec_map_key_proto_goTypes = []interface{}{
	(*InvalidCodecMapKey)(nil), // 0: errors.InvalidCodecMapKey
	nil,                        // 1: errors.InvalidCodecMapKey.FInt32KeyNumericValNumericEntry
	nil,                        // 2: errors.InvalidCodecMapKey.FInt32KeyStringValStringEntry
	nil,                        // 3: errors.InvalidCodecMapKey.FInt64KeyNumericValNumericEntry
	nil,                        // 4: errors.InvalidCodecMapKey.FInt64KeyStringValStringEntry
	nil,                        // 5: errors.InvalidCodecMapKey.FUint32KeyNumericValNumericEntry
	nil,                        // 6: errors.InvalidCodecMapKey.FUint32KeyStringValStringEntry
	nil,                        // 7: errors.InvalidCodecMapKey.FUint64KeyNumericValNumericEntry
	nil,                        // 8: errors.InvalidCodecMapKey.FUint64KeyStringValStringEntry
	nil,                        // 9: errors.InvalidCodecMapKey.FSint32KeyNumericValNumericEntry
	nil,                        // 10: errors.InvalidCodecMapKey.FSint32KeyStringValStringEntry
	nil,                        // 11: errors.InvalidCodecMapKey.FSint64KeyNumericValNumericEntry
	nil,                        // 12: errors.InvalidCodecMapKey.FSint64KeyStringValStringEntry
	nil,                        // 13: errors.InvalidCodecMapKey.FSfixed32KeyNumericValNumericEntry
	nil,                        // 14: errors.InvalidCodecMapKey.FSfixed32KeyStringValStringEntry
	nil,                        // 15: errors.InvalidCodecMapKey.FSfixed64KeyNumericValNumericEntry
	nil,                        // 16: errors.InvalidCodecMapKey.FSfixed64KeyStringValStringEntry
	nil,                        // 17: errors.InvalidCodecMapKey.FFixed32KeyNumericValNumericEntry
	nil,                        // 18: errors.InvalidCodecMapKey.FFixed32KeyStringValStringEntry
	nil,                        // 19: errors.InvalidCodecMapKey.FFixed64KeyNumericValNumericEntry
	nil,                        // 20: errors.InvalidCodecMapKey.FFixed64KeyStringValStringEntry
	nil,                        // 21: errors.InvalidCodecMapKey.FBoolKeyBoolValBoolEntry
	nil,                        // 22: errors.InvalidCodecMapKey.FBoolKeyStringValStringEntry
	nil,                        // 23: errors.InvalidCodecMapKey.FStringKeyNoneValNone1Entry
}
var file_tests_proto_cases_errors_invalid_codec_map_key_proto_depIdxs = []int32{
	1,  // 0: errors.InvalidCodecMapKey.f_int32_key_numeric_val_numeric:type_name -> errors.InvalidCodecMapKey.FInt32KeyNumericValNumericEntry
	2,  // 1: errors.InvalidCodecMapKey.f_int32_key_string_val_string:type_name -> errors.InvalidCodecMapKey.FInt32KeyStringValStringEntry
	3,  // 2: errors.InvalidCodecMapKey.f_int64_key_numeric_val_numeric:type_name -> errors.InvalidCodecMapKey.FInt64KeyNumericValNumericEntry
	4,  // 3: errors.InvalidCodecMapKey.f_int64_key_string_val_string:type_name -> errors.InvalidCodecMapKey.FInt64KeyStringValStringEntry
	5,  // 4: errors.InvalidCodecMapKey.f_uint32_key_numeric_val_numeric:type_name -> errors.InvalidCodecMapKey.FUint32KeyNumericValNumericEntry
	6,  // 5: errors.InvalidCodecMapKey.f_uint32_key_string_val_string:type_name -> errors.InvalidCodecMapKey.FUint32KeyStringValStringEntry
	7,  // 6: errors.InvalidCodecMapKey.f_uint64_key_numeric_val_numeric:type_name -> errors.InvalidCodecMapKey.FUint64KeyNumericValNumericEntry
	8,  // 7: errors.InvalidCodecMapKey.f_uint64_key_string_val_string:type_name -> errors.InvalidCodecMapKey.FUint64KeyStringValStringEntry
	9,  // 8: errors.InvalidCodecMapKey.f_sint32_key_numeric_val_numeric:type_name -> errors.InvalidCodecMapKey.FSint32KeyNumericValNumericEntry
	10, // 9: errors.InvalidCodecMapKey.f_sint32_key_string_val_string:type_name -> errors.InvalidCodecMapKey.FSint32KeyStringValStringEntry
	11, // 10: errors.InvalidCodecMapKey.f_sint64_key_numeric_val_numeric:type_name -> errors.InvalidCodecMapKey.FSint64KeyNumericValNumericEntry
	12, // 11: errors.InvalidCodecMapKey.f_sint64_key_string_val_string:type_name -> errors.InvalidCodecMapKey.FSint64KeyStringValStringEntry
	13, // 12: errors.InvalidCodecMapKey.f_sfixed32_key_numeric_val_numeric:type_name -> errors.InvalidCodecMapKey.FSfixed32KeyNumericValNumericEntry
	14, // 13: errors.InvalidCodecMapKey.f_sfixed32_key_string_val_string:type_name -> errors.InvalidCodecMapKey.FSfixed32KeyStringValStringEntry
	15, // 14: errors.InvalidCodecMapKey.f_sfixed64_key_numeric_val_numeric:type_name -> errors.InvalidCodecMapKey.FSfixed64KeyNumericValNumericEntry
	16, // 15: errors.InvalidCodecMapKey.f_sfixed64_key_string_val_string:type_name -> errors.InvalidCodecMapKey.FSfixed64KeyStringValStringEntry
	17, // 16: errors.InvalidCodecMapKey.f_fixed32_key_numeric_val_numeric:type_name -> errors.InvalidCodecMapKey.FFixed32KeyNumericValNumericEntry
	18, // 17: errors.InvalidCodecMapKey.f_fixed32_key_string_val_string:type_name -> errors.InvalidCodecMapKey.FFixed32KeyStringValStringEntry
	19, // 18: errors.InvalidCodecMapKey.f_fixed64_key_numeric_val_numeric:type_name -> errors.InvalidCodecMapKey.FFixed64KeyNumericValNumericEntry
	20, // 19: errors.InvalidCodecMapKey.f_fixed64_key_string_val_string:type_name -> errors.InvalidCodecMapKey.FFixed64KeyStringValStringEntry
	21, // 20: errors.InvalidCodecMapKey.f_bool_key_bool_val_bool:type_name -> errors.InvalidCodecMapKey.FBoolKeyBoolValBoolEntry
	22, // 21: errors.InvalidCodecMapKey.f_bool_key_string_val_string:type_name -> errors.InvalidCodecMapKey.FBoolKeyStringValStringEntry
	23, // 22: errors.InvalidCodecMapKey.f_string_key_none_val_none1:type_name -> errors.InvalidCodecMapKey.FStringKeyNoneValNone1Entry
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_tests_proto_cases_errors_invalid_codec_map_key_proto_init() }
func file_tests_proto_cases_errors_invalid_codec_map_key_proto_init() {
	if File_tests_proto_cases_errors_invalid_codec_map_key_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tests_proto_cases_errors_invalid_codec_map_key_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidCodecMapKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tests_proto_cases_errors_invalid_codec_map_key_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tests_proto_cases_errors_invalid_codec_map_key_proto_goTypes,
		DependencyIndexes: file_tests_proto_cases_errors_invalid_codec_map_key_proto_depIdxs,
		MessageInfos:      file_tests_proto_cases_errors_invalid_codec_map_key_proto_msgTypes,
	}.Build()
	File_tests_proto_cases_errors_invalid_codec_map_key_proto = out.File
	file_tests_proto_cases_errors_invalid_codec_map_key_proto_rawDesc = nil
	file_tests_proto_cases_errors_invalid_codec_map_key_proto_goTypes = nil
	file_tests_proto_cases_errors_invalid_codec_map_key_proto_depIdxs = nil
}
