// Code generated by protoc-gen-gojson. DO NOT EDIT.
// versions:
// 		protoc-gen-gojson 0.0.1
// source: tests/proto/cases/options/type_optional.proto

package pboptions

import (
	errors "errors"
	_ "github.com/yu31/protoc-plugin-json/xgo/pb/pbjson"
	jsondecoder "github.com/yu31/protoc-plugin-json/xgo/pkg/jsondecoder"
	jsonencoder "github.com/yu31/protoc-plugin-json/xgo/pkg/jsonencoder"
	_ "github.com/yu31/protoc-plugin-json/xgo/tests/pb/pbexternal"
	_ "google.golang.org/protobuf/types/known/anypb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
)

// MarshalJSON implements interface json.Marshaler for proto message TypeOptional1 in file tests/proto/cases/options/type_optional.proto
func (x *TypeOptional1) MarshalJSON() ([]byte, error) {
	if x == nil {
		return []byte("null"), nil
	}
	enc := jsonencoder.New(648)
	enc.AppendObjectBegin() // Add begin JSON identifier

	jsonencoder.AppendPtrI32(enc, "t_int32", x.FInt32, true, false)
	jsonencoder.AppendPtrI64(enc, "t_int64", x.FInt64, true, false)
	jsonencoder.AppendPtrU32(enc, "t_uint32", x.FUint32, true, false)
	jsonencoder.AppendPtrU64(enc, "t_uint64", x.FUint64, true, false)
	jsonencoder.AppendPtrI32(enc, "t_sint32", x.FSint32, true, false)
	jsonencoder.AppendPtrI64(enc, "t_sint64", x.FSint64, true, false)
	jsonencoder.AppendPtrI32(enc, "t_sfixed32", x.FSfixed32, true, false)
	jsonencoder.AppendPtrI64(enc, "t_sfixed64", x.FSfixed64, true, false)
	jsonencoder.AppendPtrU32(enc, "t_fixed32", x.FFixed32, true, false)
	jsonencoder.AppendPtrU64(enc, "t_fixed64", x.FFixed64, true, false)
	jsonencoder.AppendPtrF32(enc, "t_float", x.FFloat, true, false)
	jsonencoder.AppendPtrF64(enc, "t_double", x.FDouble, true, false)
	jsonencoder.AppendPtrBool(enc, "t_bool1", x.FBool1, true, false)
	jsonencoder.AppendPtrStr(enc, "t_string1", x.FString1, true)
	if err := jsonencoder.AppendValBytes(enc, "t_bytes1", x.FBytes1, true); err != nil {
		return nil, err
	}
	jsonencoder.AppendPtrEnumNum(enc, "t_enum1", x.FEnum1, true, false)
	if err := jsonencoder.AppendValMessage(enc, "t_message1", x.FMessage1, true); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendValWKTAnyObject(enc, "t_any1", x.FAny1, true); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendValWKTDurObject(enc, "t_duration1", x.FDuration1, true); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendValWKTTsObject(enc, "t_timestamp1", x.FTimestamp1, true); err != nil {
		return nil, err
	}
	enc.AppendObjectEnd() // Add end JSON identifier
	return enc.Bytes(), nil
}

// UnmarshalJSON implements json.Unmarshaler for proto message TypeOptional1 in file tests/proto/cases/options/type_optional.proto
func (x *TypeOptional1) UnmarshalJSON(b []byte) error {
	if x == nil {
		return errors.New("json: Unmarshal: xgo/tests/pb/pboptions.(*TypeOptional1) is nil")
	}
	var (
		err    error
		isNULL bool
		dec    *jsondecoder.Decoder
	)
	if dec, err = jsondecoder.New(b); err != nil {
		return err
	}
	if isNULL, err = dec.BeforeScanJSON(); err != nil || isNULL {
		return err
	}
LOOP_SCAN:
	for { // Loop to read the JSON objects
		var (
			jsonKey string
			isEnd   bool
		)

		if isEnd, err = dec.BeforeScanNext(); err != nil {
			return err
		}
		if isEnd {
			break LOOP_SCAN
		}

		if jsonKey, err = dec.ReadJSONKey(); err != nil {
			return err
		}
		switch jsonKey { // match the jsonKey
		case "t_int32":
			if x.FInt32, err = jsondecoder.ReadPtrI32(dec, false); err != nil {
				return err
			}
		case "t_int64":
			if x.FInt64, err = jsondecoder.ReadPtrI64(dec, false); err != nil {
				return err
			}
		case "t_uint32":
			if x.FUint32, err = jsondecoder.ReadPtrU32(dec, false); err != nil {
				return err
			}
		case "t_uint64":
			if x.FUint64, err = jsondecoder.ReadPtrU64(dec, false); err != nil {
				return err
			}
		case "t_sint32":
			if x.FSint32, err = jsondecoder.ReadPtrI32(dec, false); err != nil {
				return err
			}
		case "t_sint64":
			if x.FSint64, err = jsondecoder.ReadPtrI64(dec, false); err != nil {
				return err
			}
		case "t_sfixed32":
			if x.FSfixed32, err = jsondecoder.ReadPtrI32(dec, false); err != nil {
				return err
			}
		case "t_sfixed64":
			if x.FSfixed64, err = jsondecoder.ReadPtrI64(dec, false); err != nil {
				return err
			}
		case "t_fixed32":
			if x.FFixed32, err = jsondecoder.ReadPtrU32(dec, false); err != nil {
				return err
			}
		case "t_fixed64":
			if x.FFixed64, err = jsondecoder.ReadPtrU64(dec, false); err != nil {
				return err
			}
		case "t_float":
			if x.FFloat, err = jsondecoder.ReadPtrF32(dec, false); err != nil {
				return err
			}
		case "t_double":
			if x.FDouble, err = jsondecoder.ReadPtrF64(dec, false); err != nil {
				return err
			}
		case "t_bool1":
			if x.FBool1, err = jsondecoder.ReadPtrBool(dec, false); err != nil {
				return err
			}
		case "t_string1":
			if x.FString1, err = jsondecoder.ReadPtrStr(dec); err != nil {
				return err
			}
		case "t_bytes1":
			if x.FBytes1, err = jsondecoder.ReadValBytes(dec); err != nil {
				return err
			}
		case "t_enum1":
			if x.FEnum1, err = jsondecoder.ReadPtrEnumNum(dec, x.FEnum1, false); err != nil {
				return err
			}
		case "t_message1":
			if x.FMessage1, err = jsondecoder.ReadValMessage(dec, x.FMessage1); err != nil {
				return err
			}
		case "t_any1":
			if x.FAny1, err = jsondecoder.ReadValWKTAnyObject(dec, x.FAny1); err != nil {
				return err
			}
		case "t_duration1":
			if x.FDuration1, err = jsondecoder.ReadValWKTDurObject(dec, x.FDuration1); err != nil {
				return err
			}
		case "t_timestamp1":
			if x.FTimestamp1, err = jsondecoder.ReadValWKTTsObject(dec, x.FTimestamp1); err != nil {
				return err
			}
		default:
			if err = dec.DiscardValue(); err != nil {
				return err
			}
		} // end switch
	}
	return nil
}
