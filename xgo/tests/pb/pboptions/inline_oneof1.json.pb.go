// Code generated by protoc-gen-gojson. DO NOT EDIT.
// versions:
// 		protoc-gen-gojson 0.0.1
// source: tests/proto/cases/options/inline_oneof1.proto

package pboptions

import (
	errors "errors"
	_ "github.com/yu31/protoc-plugin-json/xgo/pb/pbjson"
	jsondecoder "github.com/yu31/protoc-plugin-json/xgo/pkg/jsondecoder"
	jsonencoder "github.com/yu31/protoc-plugin-json/xgo/pkg/jsonencoder"
	_ "github.com/yu31/protoc-plugin-json/xgo/tests/pb/pbexternal"
	_ "google.golang.org/protobuf/types/known/anypb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
)

// MarshalJSON implements interface json.Marshaler for proto message InlineOneOf1 in file tests/proto/cases/options/inline_oneof1.proto
func (x *InlineOneOf1) MarshalJSON() ([]byte, error) {
	if x == nil {
		return []byte("null"), nil
	}
	enc := jsonencoder.New(768)
	enc.AppendObjectBegin() // Add begin JSON identifier

	switch o1_1 := x.OneType1.(type) {
	case *InlineOneOf1_FInt32:
		jsonencoder.AppendValI32(enc, "t_int32", o1_1.FInt32, false, false)
	}
	switch o1_3 := x.OneType2.(type) {
	case *InlineOneOf1_FInt64:
		jsonencoder.AppendValI64(enc, "t_int64", o1_3.FInt64, false, false)
	}
	switch o1_5 := x.OneType3.(type) {
	case *InlineOneOf1_FUint32:
		jsonencoder.AppendValU32(enc, "t_uint32", o1_5.FUint32, false, false)
	}
	switch o1_7 := x.OneType4.(type) {
	case *InlineOneOf1_FUint64:
		jsonencoder.AppendValU64(enc, "t_uint64", o1_7.FUint64, false, false)
	}
	switch o1_9 := x.OneType5.(type) {
	case *InlineOneOf1_FSint32:
		jsonencoder.AppendValI32(enc, "t_sint32", o1_9.FSint32, false, false)
	}
	switch o1_11 := x.OneType6.(type) {
	case *InlineOneOf1_FSint64:
		jsonencoder.AppendValI64(enc, "t_sint64", o1_11.FSint64, false, false)
	}
	switch o1_13 := x.OneType7.(type) {
	case *InlineOneOf1_FSfixed32:
		jsonencoder.AppendValI32(enc, "t_sfixed32", o1_13.FSfixed32, false, false)
	}
	switch o1_15 := x.OneType8.(type) {
	case *InlineOneOf1_FSfixed64:
		jsonencoder.AppendValI64(enc, "t_sfixed64", o1_15.FSfixed64, false, false)
	}
	switch o1_17 := x.OneType9.(type) {
	case *InlineOneOf1_FFixed32:
		jsonencoder.AppendValU32(enc, "t_fixed32", o1_17.FFixed32, false, false)
	}
	switch o1_19 := x.OneType10.(type) {
	case *InlineOneOf1_FFixed64:
		jsonencoder.AppendValU64(enc, "t_fixed64", o1_19.FFixed64, false, false)
	}
	switch o1_21 := x.OneType11.(type) {
	case *InlineOneOf1_FFloat:
		jsonencoder.AppendValF32(enc, "t_float", o1_21.FFloat, false, false)
	}
	switch o1_23 := x.OneType12.(type) {
	case *InlineOneOf1_FDouble:
		jsonencoder.AppendValF64(enc, "t_double", o1_23.FDouble, false, false)
	}
	switch o1_25 := x.OneType13.(type) {
	case *InlineOneOf1_FBool1:
		jsonencoder.AppendValBool(enc, "t_bool1", o1_25.FBool1, false, false)
	}
	switch o1_27 := x.OneType14.(type) {
	case *InlineOneOf1_FString1:
		jsonencoder.AppendValStr(enc, "t_string1", o1_27.FString1, false)
	}
	switch o1_29 := x.OneType15.(type) {
	case *InlineOneOf1_FBytes1:
		if err := jsonencoder.AppendValBytes(enc, "t_bytes1", o1_29.FBytes1, false); err != nil {
			return nil, err
		}
	}
	switch o1_31 := x.OneType16.(type) {
	case *InlineOneOf1_FEnum1:
		jsonencoder.AppendValEnumNum(enc, "t_enum1", o1_31.FEnum1, false, false)
	}
	switch o1_33 := x.OneType17.(type) {
	case *InlineOneOf1_FMessage1:
		if err := jsonencoder.AppendValMessage(enc, "t_message1", o1_33.FMessage1, false); err != nil {
			return nil, err
		}
	}
	switch o1_35 := x.OneType18.(type) {
	case *InlineOneOf1_FAny1:
		if err := jsonencoder.AppendValWKTAnyObject(enc, "t_any1", o1_35.FAny1, false); err != nil {
			return nil, err
		}
	}
	switch o1_37 := x.OneType19.(type) {
	case *InlineOneOf1_FDuration1:
		if err := jsonencoder.AppendValWKTDurObject(enc, "t_duration1", o1_37.FDuration1, false); err != nil {
			return nil, err
		}
	}
	switch o1_39 := x.OneType20.(type) {
	case *InlineOneOf1_FTimestamp1:
		if err := jsonencoder.AppendValWKTTsObject(enc, "t_timestamp1", o1_39.FTimestamp1, false); err != nil {
			return nil, err
		}
	}
	enc.AppendObjectEnd() // Add end JSON identifier
	return enc.Bytes(), nil
}

// UnmarshalJSON implements json.Unmarshaler for proto message InlineOneOf1 in file tests/proto/cases/options/inline_oneof1.proto
func (x *InlineOneOf1) UnmarshalJSON(b []byte) error {
	if x == nil {
		return errors.New("json: Unmarshal: xgo/tests/pb/pboptions.(*InlineOneOf1) is nil")
	}
	var (
		err    error
		isNULL bool
		dec    *jsondecoder.Decoder
	)
	if dec, err = jsondecoder.New(b); err != nil {
		return err
	}
	if isNULL, err = dec.BeforeScanJSON(); err != nil || isNULL {
		return err
	}
	// declares variables to report whether the oneof field is loaded.
	var (
		isLoad_o1_1  bool
		isLoad_o1_3  bool
		isLoad_o1_5  bool
		isLoad_o1_7  bool
		isLoad_o1_9  bool
		isLoad_o1_11 bool
		isLoad_o1_13 bool
		isLoad_o1_15 bool
		isLoad_o1_17 bool
		isLoad_o1_19 bool
		isLoad_o1_21 bool
		isLoad_o1_23 bool
		isLoad_o1_25 bool
		isLoad_o1_27 bool
		isLoad_o1_29 bool
		isLoad_o1_31 bool
		isLoad_o1_33 bool
		isLoad_o1_35 bool
		isLoad_o1_37 bool
		isLoad_o1_39 bool
	)

LOOP_SCAN:
	for { // Loop to read the JSON objects
		var (
			jsonKey string
			isEnd   bool
		)

		if isEnd, err = dec.BeforeScanNext(); err != nil {
			return err
		}
		if isEnd {
			break LOOP_SCAN
		}

		if jsonKey, err = dec.ReadJSONKey(); err != nil {
			return err
		}
		switch jsonKey { // match the jsonKey
		case "t_int32":
			if isLoad_o1_1 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_1 = true
			o1_1, ok := x.OneType1.(*InlineOneOf1_FInt32)
			if !ok {
				o1_1 = new(InlineOneOf1_FInt32)
				x.OneType1 = o1_1
			}
			if o1_1.FInt32, err = jsondecoder.ReadValI32(dec, false); err != nil {
				return err
			}
		case "t_int64":
			if isLoad_o1_3 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_3 = true
			o1_3, ok := x.OneType2.(*InlineOneOf1_FInt64)
			if !ok {
				o1_3 = new(InlineOneOf1_FInt64)
				x.OneType2 = o1_3
			}
			if o1_3.FInt64, err = jsondecoder.ReadValI64(dec, false); err != nil {
				return err
			}
		case "t_uint32":
			if isLoad_o1_5 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_5 = true
			o1_5, ok := x.OneType3.(*InlineOneOf1_FUint32)
			if !ok {
				o1_5 = new(InlineOneOf1_FUint32)
				x.OneType3 = o1_5
			}
			if o1_5.FUint32, err = jsondecoder.ReadValU32(dec, false); err != nil {
				return err
			}
		case "t_uint64":
			if isLoad_o1_7 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_7 = true
			o1_7, ok := x.OneType4.(*InlineOneOf1_FUint64)
			if !ok {
				o1_7 = new(InlineOneOf1_FUint64)
				x.OneType4 = o1_7
			}
			if o1_7.FUint64, err = jsondecoder.ReadValU64(dec, false); err != nil {
				return err
			}
		case "t_sint32":
			if isLoad_o1_9 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_9 = true
			o1_9, ok := x.OneType5.(*InlineOneOf1_FSint32)
			if !ok {
				o1_9 = new(InlineOneOf1_FSint32)
				x.OneType5 = o1_9
			}
			if o1_9.FSint32, err = jsondecoder.ReadValI32(dec, false); err != nil {
				return err
			}
		case "t_sint64":
			if isLoad_o1_11 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_11 = true
			o1_11, ok := x.OneType6.(*InlineOneOf1_FSint64)
			if !ok {
				o1_11 = new(InlineOneOf1_FSint64)
				x.OneType6 = o1_11
			}
			if o1_11.FSint64, err = jsondecoder.ReadValI64(dec, false); err != nil {
				return err
			}
		case "t_sfixed32":
			if isLoad_o1_13 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_13 = true
			o1_13, ok := x.OneType7.(*InlineOneOf1_FSfixed32)
			if !ok {
				o1_13 = new(InlineOneOf1_FSfixed32)
				x.OneType7 = o1_13
			}
			if o1_13.FSfixed32, err = jsondecoder.ReadValI32(dec, false); err != nil {
				return err
			}
		case "t_sfixed64":
			if isLoad_o1_15 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_15 = true
			o1_15, ok := x.OneType8.(*InlineOneOf1_FSfixed64)
			if !ok {
				o1_15 = new(InlineOneOf1_FSfixed64)
				x.OneType8 = o1_15
			}
			if o1_15.FSfixed64, err = jsondecoder.ReadValI64(dec, false); err != nil {
				return err
			}
		case "t_fixed32":
			if isLoad_o1_17 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_17 = true
			o1_17, ok := x.OneType9.(*InlineOneOf1_FFixed32)
			if !ok {
				o1_17 = new(InlineOneOf1_FFixed32)
				x.OneType9 = o1_17
			}
			if o1_17.FFixed32, err = jsondecoder.ReadValU32(dec, false); err != nil {
				return err
			}
		case "t_fixed64":
			if isLoad_o1_19 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_19 = true
			o1_19, ok := x.OneType10.(*InlineOneOf1_FFixed64)
			if !ok {
				o1_19 = new(InlineOneOf1_FFixed64)
				x.OneType10 = o1_19
			}
			if o1_19.FFixed64, err = jsondecoder.ReadValU64(dec, false); err != nil {
				return err
			}
		case "t_float":
			if isLoad_o1_21 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_21 = true
			o1_21, ok := x.OneType11.(*InlineOneOf1_FFloat)
			if !ok {
				o1_21 = new(InlineOneOf1_FFloat)
				x.OneType11 = o1_21
			}
			if o1_21.FFloat, err = jsondecoder.ReadValF32(dec, false); err != nil {
				return err
			}
		case "t_double":
			if isLoad_o1_23 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_23 = true
			o1_23, ok := x.OneType12.(*InlineOneOf1_FDouble)
			if !ok {
				o1_23 = new(InlineOneOf1_FDouble)
				x.OneType12 = o1_23
			}
			if o1_23.FDouble, err = jsondecoder.ReadValF64(dec, false); err != nil {
				return err
			}
		case "t_bool1":
			if isLoad_o1_25 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_25 = true
			o1_25, ok := x.OneType13.(*InlineOneOf1_FBool1)
			if !ok {
				o1_25 = new(InlineOneOf1_FBool1)
				x.OneType13 = o1_25
			}
			if o1_25.FBool1, err = jsondecoder.ReadValBool(dec, false); err != nil {
				return err
			}
		case "t_string1":
			if isLoad_o1_27 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_27 = true
			o1_27, ok := x.OneType14.(*InlineOneOf1_FString1)
			if !ok {
				o1_27 = new(InlineOneOf1_FString1)
				x.OneType14 = o1_27
			}
			if o1_27.FString1, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "t_bytes1":
			if isLoad_o1_29 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_29 = true
			o1_29, ok := x.OneType15.(*InlineOneOf1_FBytes1)
			if !ok {
				o1_29 = new(InlineOneOf1_FBytes1)
				x.OneType15 = o1_29
			}
			if o1_29.FBytes1, err = jsondecoder.ReadValBytes(dec); err != nil {
				return err
			}
		case "t_enum1":
			if isLoad_o1_31 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_31 = true
			o1_31, ok := x.OneType16.(*InlineOneOf1_FEnum1)
			if !ok {
				o1_31 = new(InlineOneOf1_FEnum1)
				x.OneType16 = o1_31
			}
			if o1_31.FEnum1, err = jsondecoder.ReadValEnumNum(dec, o1_31.FEnum1, false); err != nil {
				return err
			}
		case "t_message1":
			if isLoad_o1_33 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_33 = true
			o1_33, ok := x.OneType17.(*InlineOneOf1_FMessage1)
			if !ok {
				o1_33 = new(InlineOneOf1_FMessage1)
				x.OneType17 = o1_33
			}
			if o1_33.FMessage1, err = jsondecoder.ReadValMessage(dec, o1_33.FMessage1); err != nil {
				return err
			}
		case "t_any1":
			if isLoad_o1_35 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_35 = true
			o1_35, ok := x.OneType18.(*InlineOneOf1_FAny1)
			if !ok {
				o1_35 = new(InlineOneOf1_FAny1)
				x.OneType18 = o1_35
			}
			if o1_35.FAny1, err = jsondecoder.ReadValWKTAnyObject(dec, o1_35.FAny1); err != nil {
				return err
			}
		case "t_duration1":
			if isLoad_o1_37 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_37 = true
			o1_37, ok := x.OneType19.(*InlineOneOf1_FDuration1)
			if !ok {
				o1_37 = new(InlineOneOf1_FDuration1)
				x.OneType19 = o1_37
			}
			if o1_37.FDuration1, err = jsondecoder.ReadValWKTDurObject(dec, o1_37.FDuration1); err != nil {
				return err
			}
		case "t_timestamp1":
			if isLoad_o1_39 {
				return jsondecoder.ErrOneOfConflict(dec)
			}
			isLoad_o1_39 = true
			o1_39, ok := x.OneType20.(*InlineOneOf1_FTimestamp1)
			if !ok {
				o1_39 = new(InlineOneOf1_FTimestamp1)
				x.OneType20 = o1_39
			}
			if o1_39.FTimestamp1, err = jsondecoder.ReadValWKTTsObject(dec, o1_39.FTimestamp1); err != nil {
				return err
			}
		default:
			if err = dec.DiscardValue(); err != nil {
				return err
			}
		} // end switch
	}
	return nil
}
