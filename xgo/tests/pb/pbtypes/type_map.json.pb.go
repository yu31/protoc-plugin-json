// Code generated by protoc-gen-gojson. DO NOT EDIT.
// versions:
// 		protoc-gen-gojson 0.0.1
// source: tests/proto/cases/types/type_map.proto

package pbtypes

import (
	errors "errors"
	_ "github.com/yu31/protoc-plugin-json/xgo/pb/pbjson"
	jsondecoder "github.com/yu31/protoc-plugin-json/xgo/pkg/jsondecoder"
	jsonencoder "github.com/yu31/protoc-plugin-json/xgo/pkg/jsonencoder"
	pbexternal "github.com/yu31/protoc-plugin-json/xgo/tests/pb/pbexternal"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// MarshalJSON implements interface json.Marshaler for proto message MessageMap1 in file tests/proto/cases/types/type_map.proto
func (x *MessageMap1) MarshalJSON() ([]byte, error) {
	if x == nil {
		return []byte("null"), nil
	}
	var err error
	encoder := jsonencoder.New(68)

	// Add begin JSON identifier
	encoder.AppendObjectBegin()

	encoder.AppendJSONKey("f_string1")
	encoder.AppendValueString(x.FString1)
	encoder.AppendJSONKey("f_string2")
	encoder.AppendValueString(x.FString2)
	encoder.AppendJSONKey("f_string3")
	encoder.AppendValueString(x.FString3)

	// Add end JSON identifier
	encoder.AppendObjectEnd()
	return encoder.Bytes(), err
}

// UnmarshalJSON implements json.Unmarshaler for proto message MessageMap1 in file tests/proto/cases/types/type_map.proto
func (x *MessageMap1) UnmarshalJSON(b []byte) error {
	if x == nil {
		return errors.New("json: Unmarshal: xgo/tests/pb/pbtypes.(*MessageMap1) is nil")
	}

	var (
		err     error
		isNULL  bool
		decoder *jsondecoder.Decoder
	)
	if decoder, err = jsondecoder.New(b); err != nil {
		return err
	}
	if isNULL, err = decoder.CheckJSONBegin(); err != nil || isNULL {
		return err
	}
	// Loop to scan object.
LOOP_OBJECT:
	for {
		if err = decoder.ScanError(); err != nil {
			return err
		}
		if decoder.ReadObjectKeyBefore() { // before read object key
			break LOOP_OBJECT
		}
		// Read JSON key.
		jsonKey := decoder.ReadObjectKey()
		decoder.ReadObjectValueBefore() // Before read object value
		// match field with JSON key.
		switch {
		case jsonKey == "f_string1":
			vv, _err := decoder.ReadValueString(jsonKey)
			if _err != nil {
				return _err
			}
			x.FString1 = vv
		case jsonKey == "f_string2":
			vv, _err := decoder.ReadValueString(jsonKey)
			if _err != nil {
				return _err
			}
			x.FString2 = vv
		case jsonKey == "f_string3":
			vv, _err := decoder.ReadValueString(jsonKey)
			if _err != nil {
				return _err
			}
			x.FString3 = vv
		default:
			_ = decoder.ReadItem() // discard unknown field
		}
		if decoder.ReadObjectValueAfter() { // After read object value
			break LOOP_OBJECT
		}
	}
	// Check error in decoder
	if err = decoder.ScanError(); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements interface json.Marshaler for proto message Embed1 in file tests/proto/cases/types/type_map.proto
func (x *MessageMap1_Embed1) MarshalJSON() ([]byte, error) {
	if x == nil {
		return []byte("null"), nil
	}
	var err error
	encoder := jsonencoder.New(68)

	// Add begin JSON identifier
	encoder.AppendObjectBegin()

	encoder.AppendJSONKey("f_string1")
	encoder.AppendValueString(x.FString1)
	encoder.AppendJSONKey("f_string2")
	encoder.AppendValueString(x.FString2)
	encoder.AppendJSONKey("f_string3")
	encoder.AppendValueString(x.FString3)

	// Add end JSON identifier
	encoder.AppendObjectEnd()
	return encoder.Bytes(), err
}

// UnmarshalJSON implements json.Unmarshaler for proto message Embed1 in file tests/proto/cases/types/type_map.proto
func (x *MessageMap1_Embed1) UnmarshalJSON(b []byte) error {
	if x == nil {
		return errors.New("json: Unmarshal: xgo/tests/pb/pbtypes.(*MessageMap1_Embed1) is nil")
	}

	var (
		err     error
		isNULL  bool
		decoder *jsondecoder.Decoder
	)
	if decoder, err = jsondecoder.New(b); err != nil {
		return err
	}
	if isNULL, err = decoder.CheckJSONBegin(); err != nil || isNULL {
		return err
	}
	// Loop to scan object.
LOOP_OBJECT:
	for {
		if err = decoder.ScanError(); err != nil {
			return err
		}
		if decoder.ReadObjectKeyBefore() { // before read object key
			break LOOP_OBJECT
		}
		// Read JSON key.
		jsonKey := decoder.ReadObjectKey()
		decoder.ReadObjectValueBefore() // Before read object value
		// match field with JSON key.
		switch {
		case jsonKey == "f_string1":
			vv, _err := decoder.ReadValueString(jsonKey)
			if _err != nil {
				return _err
			}
			x.FString1 = vv
		case jsonKey == "f_string2":
			vv, _err := decoder.ReadValueString(jsonKey)
			if _err != nil {
				return _err
			}
			x.FString2 = vv
		case jsonKey == "f_string3":
			vv, _err := decoder.ReadValueString(jsonKey)
			if _err != nil {
				return _err
			}
			x.FString3 = vv
		default:
			_ = decoder.ReadItem() // discard unknown field
		}
		if decoder.ReadObjectValueAfter() { // After read object value
			break LOOP_OBJECT
		}
	}
	// Check error in decoder
	if err = decoder.ScanError(); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements interface json.Marshaler for proto message Embed2 in file tests/proto/cases/types/type_map.proto
func (x *MessageMap1_Embed1_Embed2) MarshalJSON() ([]byte, error) {
	if x == nil {
		return []byte("null"), nil
	}
	var err error
	encoder := jsonencoder.New(68)

	// Add begin JSON identifier
	encoder.AppendObjectBegin()

	encoder.AppendJSONKey("f_string1")
	encoder.AppendValueString(x.FString1)
	encoder.AppendJSONKey("f_string2")
	encoder.AppendValueString(x.FString2)
	encoder.AppendJSONKey("f_string3")
	encoder.AppendValueString(x.FString3)

	// Add end JSON identifier
	encoder.AppendObjectEnd()
	return encoder.Bytes(), err
}

// UnmarshalJSON implements json.Unmarshaler for proto message Embed2 in file tests/proto/cases/types/type_map.proto
func (x *MessageMap1_Embed1_Embed2) UnmarshalJSON(b []byte) error {
	if x == nil {
		return errors.New("json: Unmarshal: xgo/tests/pb/pbtypes.(*MessageMap1_Embed1_Embed2) is nil")
	}

	var (
		err     error
		isNULL  bool
		decoder *jsondecoder.Decoder
	)
	if decoder, err = jsondecoder.New(b); err != nil {
		return err
	}
	if isNULL, err = decoder.CheckJSONBegin(); err != nil || isNULL {
		return err
	}
	// Loop to scan object.
LOOP_OBJECT:
	for {
		if err = decoder.ScanError(); err != nil {
			return err
		}
		if decoder.ReadObjectKeyBefore() { // before read object key
			break LOOP_OBJECT
		}
		// Read JSON key.
		jsonKey := decoder.ReadObjectKey()
		decoder.ReadObjectValueBefore() // Before read object value
		// match field with JSON key.
		switch {
		case jsonKey == "f_string1":
			vv, _err := decoder.ReadValueString(jsonKey)
			if _err != nil {
				return _err
			}
			x.FString1 = vv
		case jsonKey == "f_string2":
			vv, _err := decoder.ReadValueString(jsonKey)
			if _err != nil {
				return _err
			}
			x.FString2 = vv
		case jsonKey == "f_string3":
			vv, _err := decoder.ReadValueString(jsonKey)
			if _err != nil {
				return _err
			}
			x.FString3 = vv
		default:
			_ = decoder.ReadItem() // discard unknown field
		}
		if decoder.ReadObjectValueAfter() { // After read object value
			break LOOP_OBJECT
		}
	}
	// Check error in decoder
	if err = decoder.ScanError(); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements interface json.Marshaler for proto message TypeMap1 in file tests/proto/cases/types/type_map.proto
func (x *TypeMap1) MarshalJSON() ([]byte, error) {
	if x == nil {
		return []byte("null"), nil
	}
	var err error
	encoder := jsonencoder.New(794)

	// Add begin JSON identifier
	encoder.AppendObjectBegin()

	encoder.AppendJSONKey("f_string1")
	if x.FString1 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FString1 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendValueString(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_string2")
	if x.FString2 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FString2 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendValueString(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_int32")
	if x.FInt32 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FInt32 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendValueInt32(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_int64")
	if x.FInt64 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FInt64 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendValueInt64(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_uint32")
	if x.FUint32 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FUint32 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendValueUint32(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_uint64")
	if x.FUint64 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FUint64 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendValueUint64(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_sint32")
	if x.FSint32 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FSint32 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendValueInt32(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_sint64")
	if x.FSint64 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FSint64 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendValueInt64(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_sfixed32")
	if x.FSfixed32 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FSfixed32 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendValueInt32(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_sfixed64")
	if x.FSfixed64 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FSfixed64 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendValueInt64(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_fixed32")
	if x.FFixed32 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FFixed32 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendValueUint32(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_fixed64")
	if x.FFixed64 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FFixed64 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendValueUint64(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_float")
	if x.FFloat != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FFloat {
			encoder.AppendMapKeyString(mk)
			encoder.AppendValueFloat32(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_double")
	if x.FDouble != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FDouble {
			encoder.AppendMapKeyString(mk)
			encoder.AppendValueFloat64(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_bool1")
	if x.FBool1 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FBool1 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendValueBool(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_bytes1")
	if x.FBytes1 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FBytes1 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendValueBytes(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_enum1")
	if x.FEnum1 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FEnum1 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendValueInt32(int32(mv.Number()))
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_enum2")
	if x.FEnum2 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FEnum2 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendValueInt32(int32(mv.Number()))
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_enum3")
	if x.FEnum3 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FEnum3 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendValueInt32(int32(mv.Number()))
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_enum4")
	if x.FEnum4 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FEnum4 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendValueInt32(int32(mv.Number()))
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_enum5")
	if x.FEnum5 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FEnum5 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendValueInt32(int32(mv.Number()))
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_enum6")
	if x.FEnum6 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FEnum6 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendValueInt32(int32(mv.Number()))
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_duration1")
	if x.FDuration1 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FDuration1 {
			encoder.AppendMapKeyString(mk)
			err = encoder.AppendValueInterface(mv)
			if err != nil {
				return nil, err
			}
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_duration2")
	if x.FDuration2 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FDuration2 {
			encoder.AppendMapKeyString(mk)
			err = encoder.AppendValueInterface(mv)
			if err != nil {
				return nil, err
			}
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_timestamp1")
	if x.FTimestamp1 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FTimestamp1 {
			encoder.AppendMapKeyString(mk)
			err = encoder.AppendValueInterface(mv)
			if err != nil {
				return nil, err
			}
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_timestamp2")
	if x.FTimestamp2 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FTimestamp2 {
			encoder.AppendMapKeyString(mk)
			err = encoder.AppendValueInterface(mv)
			if err != nil {
				return nil, err
			}
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_any1")
	if x.FAny1 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FAny1 {
			encoder.AppendMapKeyString(mk)
			err = encoder.AppendValueInterface(mv)
			if err != nil {
				return nil, err
			}
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_any2")
	if x.FAny2 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FAny2 {
			encoder.AppendMapKeyString(mk)
			err = encoder.AppendValueInterface(mv)
			if err != nil {
				return nil, err
			}
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_message1")
	if x.FMessage1 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FMessage1 {
			encoder.AppendMapKeyString(mk)
			err = encoder.AppendValueInterface(mv)
			if err != nil {
				return nil, err
			}
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_message2")
	if x.FMessage2 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FMessage2 {
			encoder.AppendMapKeyString(mk)
			err = encoder.AppendValueInterface(mv)
			if err != nil {
				return nil, err
			}
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_message3")
	if x.FMessage3 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FMessage3 {
			encoder.AppendMapKeyString(mk)
			err = encoder.AppendValueInterface(mv)
			if err != nil {
				return nil, err
			}
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_message4")
	if x.FMessage4 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FMessage4 {
			encoder.AppendMapKeyString(mk)
			err = encoder.AppendValueInterface(mv)
			if err != nil {
				return nil, err
			}
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_message5")
	if x.FMessage5 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FMessage5 {
			encoder.AppendMapKeyString(mk)
			err = encoder.AppendValueInterface(mv)
			if err != nil {
				return nil, err
			}
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_message6")
	if x.FMessage6 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FMessage6 {
			encoder.AppendMapKeyString(mk)
			err = encoder.AppendValueInterface(mv)
			if err != nil {
				return nil, err
			}
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_message7")
	if x.FMessage7 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FMessage7 {
			encoder.AppendMapKeyString(mk)
			err = encoder.AppendValueInterface(mv)
			if err != nil {
				return nil, err
			}
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_message8")
	if x.FMessage8 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FMessage8 {
			encoder.AppendMapKeyString(mk)
			err = encoder.AppendValueInterface(mv)
			if err != nil {
				return nil, err
			}
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_message9")
	if x.FMessage9 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FMessage9 {
			encoder.AppendMapKeyString(mk)
			err = encoder.AppendValueInterface(mv)
			if err != nil {
				return nil, err
			}
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}

	// Add end JSON identifier
	encoder.AppendObjectEnd()
	return encoder.Bytes(), err
}

// UnmarshalJSON implements json.Unmarshaler for proto message TypeMap1 in file tests/proto/cases/types/type_map.proto
func (x *TypeMap1) UnmarshalJSON(b []byte) error {
	if x == nil {
		return errors.New("json: Unmarshal: xgo/tests/pb/pbtypes.(*TypeMap1) is nil")
	}

	var (
		err     error
		isNULL  bool
		decoder *jsondecoder.Decoder
	)
	if decoder, err = jsondecoder.New(b); err != nil {
		return err
	}
	if isNULL, err = decoder.CheckJSONBegin(); err != nil || isNULL {
		return err
	}
	// Loop to scan object.
LOOP_OBJECT:
	for {
		if err = decoder.ScanError(); err != nil {
			return err
		}
		if decoder.ReadObjectKeyBefore() { // before read object key
			break LOOP_OBJECT
		}
		// Read JSON key.
		jsonKey := decoder.ReadObjectKey()
		decoder.ReadObjectValueBefore() // Before read object value
		// match field with JSON key.
		switch {
		case jsonKey == "f_string1":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FString1 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FString1 == nil {
					x.FString1 = make(map[string]string)
				}
			LOOP_MAP_f_string1:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueString(jsonKey)
					if _err != nil {
						return _err
					}
					x.FString1[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_string1
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_string2":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FString2 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FString2 == nil {
					x.FString2 = make(map[string]string)
				}
			LOOP_MAP_f_string2:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueString(jsonKey)
					if _err != nil {
						return _err
					}
					x.FString2[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_string2
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_int32":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FInt32 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FInt32 == nil {
					x.FInt32 = make(map[string]int32)
				}
			LOOP_MAP_f_int32:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueInt32(jsonKey)
					if _err != nil {
						return _err
					}
					x.FInt32[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_int32
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_int64":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FInt64 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FInt64 == nil {
					x.FInt64 = make(map[string]int64)
				}
			LOOP_MAP_f_int64:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueInt64(jsonKey)
					if _err != nil {
						return _err
					}
					x.FInt64[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_int64
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_uint32":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FUint32 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FUint32 == nil {
					x.FUint32 = make(map[string]uint32)
				}
			LOOP_MAP_f_uint32:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueUint32(jsonKey)
					if _err != nil {
						return _err
					}
					x.FUint32[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_uint32
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_uint64":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FUint64 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FUint64 == nil {
					x.FUint64 = make(map[string]uint64)
				}
			LOOP_MAP_f_uint64:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueUint64(jsonKey)
					if _err != nil {
						return _err
					}
					x.FUint64[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_uint64
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_sint32":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FSint32 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FSint32 == nil {
					x.FSint32 = make(map[string]int32)
				}
			LOOP_MAP_f_sint32:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueInt32(jsonKey)
					if _err != nil {
						return _err
					}
					x.FSint32[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_sint32
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_sint64":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FSint64 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FSint64 == nil {
					x.FSint64 = make(map[string]int64)
				}
			LOOP_MAP_f_sint64:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueInt64(jsonKey)
					if _err != nil {
						return _err
					}
					x.FSint64[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_sint64
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_sfixed32":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FSfixed32 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FSfixed32 == nil {
					x.FSfixed32 = make(map[string]int32)
				}
			LOOP_MAP_f_sfixed32:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueInt32(jsonKey)
					if _err != nil {
						return _err
					}
					x.FSfixed32[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_sfixed32
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_sfixed64":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FSfixed64 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FSfixed64 == nil {
					x.FSfixed64 = make(map[string]int64)
				}
			LOOP_MAP_f_sfixed64:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueInt64(jsonKey)
					if _err != nil {
						return _err
					}
					x.FSfixed64[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_sfixed64
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_fixed32":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FFixed32 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FFixed32 == nil {
					x.FFixed32 = make(map[string]uint32)
				}
			LOOP_MAP_f_fixed32:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueUint32(jsonKey)
					if _err != nil {
						return _err
					}
					x.FFixed32[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_fixed32
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_fixed64":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FFixed64 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FFixed64 == nil {
					x.FFixed64 = make(map[string]uint64)
				}
			LOOP_MAP_f_fixed64:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueUint64(jsonKey)
					if _err != nil {
						return _err
					}
					x.FFixed64[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_fixed64
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_float":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FFloat = nil
			case isEmpty:
				// do nothing
			default:
				if x.FFloat == nil {
					x.FFloat = make(map[string]float32)
				}
			LOOP_MAP_f_float:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueFloat32(jsonKey)
					if _err != nil {
						return _err
					}
					x.FFloat[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_float
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_double":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FDouble = nil
			case isEmpty:
				// do nothing
			default:
				if x.FDouble == nil {
					x.FDouble = make(map[string]float64)
				}
			LOOP_MAP_f_double:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueFloat64(jsonKey)
					if _err != nil {
						return _err
					}
					x.FDouble[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_double
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_bool1":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FBool1 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FBool1 == nil {
					x.FBool1 = make(map[string]bool)
				}
			LOOP_MAP_f_bool1:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueBool(jsonKey)
					if _err != nil {
						return _err
					}
					x.FBool1[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_bool1
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_bytes1":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FBytes1 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FBytes1 == nil {
					x.FBytes1 = make(map[string][]byte)
				}
			LOOP_MAP_f_bytes1:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueBytes(jsonKey)
					if _err != nil {
						return _err
					}
					x.FBytes1[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_bytes1
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_enum1":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FEnum1 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FEnum1 == nil {
					x.FEnum1 = make(map[string]EnumMap1)
				}
			LOOP_MAP_f_enum1:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					v1, _err := decoder.ReadMapValueEnumNumber(jsonKey, EnumMap1_name)
					vv := EnumMap1(v1)
					if _err != nil {
						return _err
					}
					x.FEnum1[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_enum1
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_enum2":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FEnum2 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FEnum2 == nil {
					x.FEnum2 = make(map[string]pbexternal.Enum1)
				}
			LOOP_MAP_f_enum2:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					v1, _err := decoder.ReadMapValueEnumNumber(jsonKey, pbexternal.Enum1_name)
					vv := pbexternal.Enum1(v1)
					if _err != nil {
						return _err
					}
					x.FEnum2[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_enum2
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_enum3":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FEnum3 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FEnum3 == nil {
					x.FEnum3 = make(map[string]pbexternal.Embed_Enum1)
				}
			LOOP_MAP_f_enum3:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					v1, _err := decoder.ReadMapValueEnumNumber(jsonKey, pbexternal.Embed_Enum1_name)
					vv := pbexternal.Embed_Enum1(v1)
					if _err != nil {
						return _err
					}
					x.FEnum3[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_enum3
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_enum4":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FEnum4 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FEnum4 == nil {
					x.FEnum4 = make(map[string]pbexternal.Embed_Message_Enum1)
				}
			LOOP_MAP_f_enum4:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					v1, _err := decoder.ReadMapValueEnumNumber(jsonKey, pbexternal.Embed_Message_Enum1_name)
					vv := pbexternal.Embed_Message_Enum1(v1)
					if _err != nil {
						return _err
					}
					x.FEnum4[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_enum4
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_enum5":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FEnum5 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FEnum5 == nil {
					x.FEnum5 = make(map[string]EnumCommon1)
				}
			LOOP_MAP_f_enum5:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					v1, _err := decoder.ReadMapValueEnumNumber(jsonKey, EnumCommon1_name)
					vv := EnumCommon1(v1)
					if _err != nil {
						return _err
					}
					x.FEnum5[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_enum5
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_enum6":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FEnum6 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FEnum6 == nil {
					x.FEnum6 = make(map[string]MessageCommon1_Enum1)
				}
			LOOP_MAP_f_enum6:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					v1, _err := decoder.ReadMapValueEnumNumber(jsonKey, MessageCommon1_Enum1_name)
					vv := MessageCommon1_Enum1(v1)
					if _err != nil {
						return _err
					}
					x.FEnum6[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_enum6
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_duration1":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FDuration1 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FDuration1 == nil {
					x.FDuration1 = make(map[string]*durationpb.Duration)
				}
			LOOP_MAP_f_duration1:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					var vv *durationpb.Duration
					initFN := func() interface{} {
						vv = x.FDuration1[mapKey]
						if vv == nil {
							vv = new(durationpb.Duration)
						}
						return vv
					}
					_err = decoder.ReadMapValueInterface(jsonKey, initFN)
					if _err != nil {
						return _err
					}
					x.FDuration1[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_duration1
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_duration2":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FDuration2 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FDuration2 == nil {
					x.FDuration2 = make(map[string]*durationpb.Duration)
				}
			LOOP_MAP_f_duration2:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					var vv *durationpb.Duration
					initFN := func() interface{} {
						vv = x.FDuration2[mapKey]
						if vv == nil {
							vv = new(durationpb.Duration)
						}
						return vv
					}
					_err = decoder.ReadMapValueInterface(jsonKey, initFN)
					if _err != nil {
						return _err
					}
					x.FDuration2[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_duration2
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_timestamp1":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FTimestamp1 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FTimestamp1 == nil {
					x.FTimestamp1 = make(map[string]*timestamppb.Timestamp)
				}
			LOOP_MAP_f_timestamp1:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					var vv *timestamppb.Timestamp
					initFN := func() interface{} {
						vv = x.FTimestamp1[mapKey]
						if vv == nil {
							vv = new(timestamppb.Timestamp)
						}
						return vv
					}
					_err = decoder.ReadMapValueInterface(jsonKey, initFN)
					if _err != nil {
						return _err
					}
					x.FTimestamp1[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_timestamp1
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_timestamp2":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FTimestamp2 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FTimestamp2 == nil {
					x.FTimestamp2 = make(map[string]*timestamppb.Timestamp)
				}
			LOOP_MAP_f_timestamp2:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					var vv *timestamppb.Timestamp
					initFN := func() interface{} {
						vv = x.FTimestamp2[mapKey]
						if vv == nil {
							vv = new(timestamppb.Timestamp)
						}
						return vv
					}
					_err = decoder.ReadMapValueInterface(jsonKey, initFN)
					if _err != nil {
						return _err
					}
					x.FTimestamp2[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_timestamp2
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_any1":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FAny1 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FAny1 == nil {
					x.FAny1 = make(map[string]*anypb.Any)
				}
			LOOP_MAP_f_any1:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					var vv *anypb.Any
					initFN := func() interface{} {
						vv = x.FAny1[mapKey]
						if vv == nil {
							vv = new(anypb.Any)
						}
						return vv
					}
					_err = decoder.ReadMapValueInterface(jsonKey, initFN)
					if _err != nil {
						return _err
					}
					x.FAny1[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_any1
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_any2":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FAny2 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FAny2 == nil {
					x.FAny2 = make(map[string]*anypb.Any)
				}
			LOOP_MAP_f_any2:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					var vv *anypb.Any
					initFN := func() interface{} {
						vv = x.FAny2[mapKey]
						if vv == nil {
							vv = new(anypb.Any)
						}
						return vv
					}
					_err = decoder.ReadMapValueInterface(jsonKey, initFN)
					if _err != nil {
						return _err
					}
					x.FAny2[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_any2
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_message1":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FMessage1 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FMessage1 == nil {
					x.FMessage1 = make(map[string]*MessageMap1)
				}
			LOOP_MAP_f_message1:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					var vv *MessageMap1
					initFN := func() interface{} {
						vv = x.FMessage1[mapKey]
						if vv == nil {
							vv = new(MessageMap1)
						}
						return vv
					}
					_err = decoder.ReadMapValueInterface(jsonKey, initFN)
					if _err != nil {
						return _err
					}
					x.FMessage1[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_message1
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_message2":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FMessage2 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FMessage2 == nil {
					x.FMessage2 = make(map[string]*MessageMap1_Embed1)
				}
			LOOP_MAP_f_message2:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					var vv *MessageMap1_Embed1
					initFN := func() interface{} {
						vv = x.FMessage2[mapKey]
						if vv == nil {
							vv = new(MessageMap1_Embed1)
						}
						return vv
					}
					_err = decoder.ReadMapValueInterface(jsonKey, initFN)
					if _err != nil {
						return _err
					}
					x.FMessage2[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_message2
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_message3":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FMessage3 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FMessage3 == nil {
					x.FMessage3 = make(map[string]*MessageMap1_Embed1_Embed2)
				}
			LOOP_MAP_f_message3:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					var vv *MessageMap1_Embed1_Embed2
					initFN := func() interface{} {
						vv = x.FMessage3[mapKey]
						if vv == nil {
							vv = new(MessageMap1_Embed1_Embed2)
						}
						return vv
					}
					_err = decoder.ReadMapValueInterface(jsonKey, initFN)
					if _err != nil {
						return _err
					}
					x.FMessage3[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_message3
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_message4":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FMessage4 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FMessage4 == nil {
					x.FMessage4 = make(map[string]*pbexternal.Message1)
				}
			LOOP_MAP_f_message4:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					var vv *pbexternal.Message1
					initFN := func() interface{} {
						vv = x.FMessage4[mapKey]
						if vv == nil {
							vv = new(pbexternal.Message1)
						}
						return vv
					}
					_err = decoder.ReadMapValueInterface(jsonKey, initFN)
					if _err != nil {
						return _err
					}
					x.FMessage4[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_message4
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_message5":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FMessage5 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FMessage5 == nil {
					x.FMessage5 = make(map[string]*pbexternal.Message1_Embed1)
				}
			LOOP_MAP_f_message5:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					var vv *pbexternal.Message1_Embed1
					initFN := func() interface{} {
						vv = x.FMessage5[mapKey]
						if vv == nil {
							vv = new(pbexternal.Message1_Embed1)
						}
						return vv
					}
					_err = decoder.ReadMapValueInterface(jsonKey, initFN)
					if _err != nil {
						return _err
					}
					x.FMessage5[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_message5
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_message6":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FMessage6 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FMessage6 == nil {
					x.FMessage6 = make(map[string]*pbexternal.Message1_Embed1_Embed2)
				}
			LOOP_MAP_f_message6:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					var vv *pbexternal.Message1_Embed1_Embed2
					initFN := func() interface{} {
						vv = x.FMessage6[mapKey]
						if vv == nil {
							vv = new(pbexternal.Message1_Embed1_Embed2)
						}
						return vv
					}
					_err = decoder.ReadMapValueInterface(jsonKey, initFN)
					if _err != nil {
						return _err
					}
					x.FMessage6[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_message6
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_message7":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FMessage7 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FMessage7 == nil {
					x.FMessage7 = make(map[string]*MessageCommon1)
				}
			LOOP_MAP_f_message7:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					var vv *MessageCommon1
					initFN := func() interface{} {
						vv = x.FMessage7[mapKey]
						if vv == nil {
							vv = new(MessageCommon1)
						}
						return vv
					}
					_err = decoder.ReadMapValueInterface(jsonKey, initFN)
					if _err != nil {
						return _err
					}
					x.FMessage7[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_message7
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_message8":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FMessage8 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FMessage8 == nil {
					x.FMessage8 = make(map[string]*MessageCommon1_Embed1)
				}
			LOOP_MAP_f_message8:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					var vv *MessageCommon1_Embed1
					initFN := func() interface{} {
						vv = x.FMessage8[mapKey]
						if vv == nil {
							vv = new(MessageCommon1_Embed1)
						}
						return vv
					}
					_err = decoder.ReadMapValueInterface(jsonKey, initFN)
					if _err != nil {
						return _err
					}
					x.FMessage8[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_message8
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_message9":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FMessage9 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FMessage9 == nil {
					x.FMessage9 = make(map[string]*MessageCommon1_Embed1_Embed2)
				}
			LOOP_MAP_f_message9:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					var vv *MessageCommon1_Embed1_Embed2
					initFN := func() interface{} {
						vv = x.FMessage9[mapKey]
						if vv == nil {
							vv = new(MessageCommon1_Embed1_Embed2)
						}
						return vv
					}
					_err = decoder.ReadMapValueInterface(jsonKey, initFN)
					if _err != nil {
						return _err
					}
					x.FMessage9[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_message9
					}
				}
				decoder.ScanNext()
			}
		default:
			_ = decoder.ReadItem() // discard unknown field
		}
		if decoder.ReadObjectValueAfter() { // After read object value
			break LOOP_OBJECT
		}
	}
	// Check error in decoder
	if err = decoder.ScanError(); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements interface json.Marshaler for proto message TypeMap2 in file tests/proto/cases/types/type_map.proto
func (x *TypeMap2) MarshalJSON() ([]byte, error) {
	if x == nil {
		return []byte("null"), nil
	}
	var err error
	encoder := jsonencoder.New(232)

	// Add begin JSON identifier
	encoder.AppendObjectBegin()

	encoder.AppendJSONKey("f_string1")
	if x.FString1 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FString1 {
			encoder.AppendMapKeyString(mk)
			encoder.AppendValueString(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_int32")
	if x.FInt32 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FInt32 {
			encoder.AppendMapKeyInt32(mk)
			encoder.AppendValueInt32(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_int64")
	if x.FInt64 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FInt64 {
			encoder.AppendMapKeyInt64(mk)
			encoder.AppendValueInt64(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_uint32")
	if x.FUint32 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FUint32 {
			encoder.AppendMapKeyUInt32(mk)
			encoder.AppendValueUint32(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_uint64")
	if x.FUint64 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FUint64 {
			encoder.AppendMapKeyUInt64(mk)
			encoder.AppendValueUint64(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_sint32")
	if x.FSint32 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FSint32 {
			encoder.AppendMapKeyInt32(mk)
			encoder.AppendValueInt32(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_sint64")
	if x.FSint64 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FSint64 {
			encoder.AppendMapKeyInt64(mk)
			encoder.AppendValueInt64(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_sfixed32")
	if x.FSfixed32 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FSfixed32 {
			encoder.AppendMapKeyInt32(mk)
			encoder.AppendValueInt32(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_sfixed64")
	if x.FSfixed64 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FSfixed64 {
			encoder.AppendMapKeyInt64(mk)
			encoder.AppendValueInt64(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_fixed32")
	if x.FFixed32 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FFixed32 {
			encoder.AppendMapKeyUInt32(mk)
			encoder.AppendValueUint32(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}
	encoder.AppendJSONKey("f_fixed64")
	if x.FFixed64 != nil {
		encoder.AppendObjectBegin()
		for mk, mv := range x.FFixed64 {
			encoder.AppendMapKeyUInt64(mk)
			encoder.AppendValueUint64(mv)
		}
		encoder.AppendObjectEnd()
	} else {
		encoder.AppendValueNULL()
	}

	// Add end JSON identifier
	encoder.AppendObjectEnd()
	return encoder.Bytes(), err
}

// UnmarshalJSON implements json.Unmarshaler for proto message TypeMap2 in file tests/proto/cases/types/type_map.proto
func (x *TypeMap2) UnmarshalJSON(b []byte) error {
	if x == nil {
		return errors.New("json: Unmarshal: xgo/tests/pb/pbtypes.(*TypeMap2) is nil")
	}

	var (
		err     error
		isNULL  bool
		decoder *jsondecoder.Decoder
	)
	if decoder, err = jsondecoder.New(b); err != nil {
		return err
	}
	if isNULL, err = decoder.CheckJSONBegin(); err != nil || isNULL {
		return err
	}
	// Loop to scan object.
LOOP_OBJECT:
	for {
		if err = decoder.ScanError(); err != nil {
			return err
		}
		if decoder.ReadObjectKeyBefore() { // before read object key
			break LOOP_OBJECT
		}
		// Read JSON key.
		jsonKey := decoder.ReadObjectKey()
		decoder.ReadObjectValueBefore() // Before read object value
		// match field with JSON key.
		switch {
		case jsonKey == "f_string1":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FString1 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FString1 == nil {
					x.FString1 = make(map[string]string)
				}
			LOOP_MAP_f_string1:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyString(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueString(jsonKey)
					if _err != nil {
						return _err
					}
					x.FString1[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_string1
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_int32":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FInt32 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FInt32 == nil {
					x.FInt32 = make(map[int32]int32)
				}
			LOOP_MAP_f_int32:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyInt32(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueInt32(jsonKey)
					if _err != nil {
						return _err
					}
					x.FInt32[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_int32
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_int64":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FInt64 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FInt64 == nil {
					x.FInt64 = make(map[int64]int64)
				}
			LOOP_MAP_f_int64:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyInt64(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueInt64(jsonKey)
					if _err != nil {
						return _err
					}
					x.FInt64[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_int64
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_uint32":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FUint32 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FUint32 == nil {
					x.FUint32 = make(map[uint32]uint32)
				}
			LOOP_MAP_f_uint32:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyUint32(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueUint32(jsonKey)
					if _err != nil {
						return _err
					}
					x.FUint32[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_uint32
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_uint64":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FUint64 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FUint64 == nil {
					x.FUint64 = make(map[uint64]uint64)
				}
			LOOP_MAP_f_uint64:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyUint64(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueUint64(jsonKey)
					if _err != nil {
						return _err
					}
					x.FUint64[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_uint64
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_sint32":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FSint32 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FSint32 == nil {
					x.FSint32 = make(map[int32]int32)
				}
			LOOP_MAP_f_sint32:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyInt32(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueInt32(jsonKey)
					if _err != nil {
						return _err
					}
					x.FSint32[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_sint32
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_sint64":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FSint64 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FSint64 == nil {
					x.FSint64 = make(map[int64]int64)
				}
			LOOP_MAP_f_sint64:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyInt64(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueInt64(jsonKey)
					if _err != nil {
						return _err
					}
					x.FSint64[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_sint64
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_sfixed32":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FSfixed32 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FSfixed32 == nil {
					x.FSfixed32 = make(map[int32]int32)
				}
			LOOP_MAP_f_sfixed32:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyInt32(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueInt32(jsonKey)
					if _err != nil {
						return _err
					}
					x.FSfixed32[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_sfixed32
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_sfixed64":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FSfixed64 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FSfixed64 == nil {
					x.FSfixed64 = make(map[int64]int64)
				}
			LOOP_MAP_f_sfixed64:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyInt64(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueInt64(jsonKey)
					if _err != nil {
						return _err
					}
					x.FSfixed64[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_sfixed64
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_fixed32":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FFixed32 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FFixed32 == nil {
					x.FFixed32 = make(map[uint32]uint32)
				}
			LOOP_MAP_f_fixed32:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyUint32(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueUint32(jsonKey)
					if _err != nil {
						return _err
					}
					x.FFixed32[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_fixed32
					}
				}
				decoder.ScanNext()
			}
		case jsonKey == "f_fixed64":
			var isEmpty bool
			if isNULL, isEmpty, err = decoder.CheckBeforeReadMap(jsonKey); err != nil {
				return err
			}
			switch {
			case isNULL:
				x.FFixed64 = nil
			case isEmpty:
				// do nothing
			default:
				if x.FFixed64 == nil {
					x.FFixed64 = make(map[uint64]uint64)
				}
			LOOP_MAP_f_fixed64:
				for {
					if err = decoder.ScanError(); err != nil {
						return err
					}
					mapKey, _err := decoder.ReadMapKeyUint64(jsonKey)
					if _err != nil {
						return _err
					}
					vv, _err := decoder.ReadMapValueUint64(jsonKey)
					if _err != nil {
						return _err
					}
					x.FFixed64[mapKey] = vv
					if decoder.ReadMapValueAfter() { // After read map value
						break LOOP_MAP_f_fixed64
					}
				}
				decoder.ScanNext()
			}
		default:
			_ = decoder.ReadItem() // discard unknown field
		}
		if decoder.ReadObjectValueAfter() { // After read object value
			break LOOP_OBJECT
		}
	}
	// Check error in decoder
	if err = decoder.ScanError(); err != nil {
		return err
	}
	return nil
}
