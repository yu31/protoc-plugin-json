// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: tests/proto/cases/types/type_map.proto

package pbtypes

import (
	_ "github.com/yu31/protoc-plugin-json/xgo/pb/pbjson"
	pbexternal "github.com/yu31/protoc-plugin-json/xgo/tests/pb/pbexternal"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EnumMap1 used tests cases in this file.
type EnumMap1 int32

const (
	EnumMap1_Zero  EnumMap1 = 0
	EnumMap1_One   EnumMap1 = 2
	EnumMap1_Two   EnumMap1 = 3
	EnumMap1_Three EnumMap1 = 5
	EnumMap1_Four  EnumMap1 = 6
	EnumMap1_Five  EnumMap1 = 7
	EnumMap1_Six   EnumMap1 = 9
	EnumMap1_Seven EnumMap1 = 11
	EnumMap1_Eight EnumMap1 = 12
	EnumMap1_Nine  EnumMap1 = 15
	EnumMap1_Ten   EnumMap1 = 17
)

// Enum value maps for EnumMap1.
var (
	EnumMap1_name = map[int32]string{
		0:  "Zero",
		2:  "One",
		3:  "Two",
		5:  "Three",
		6:  "Four",
		7:  "Five",
		9:  "Six",
		11: "Seven",
		12: "Eight",
		15: "Nine",
		17: "Ten",
	}
	EnumMap1_value = map[string]int32{
		"Zero":  0,
		"One":   2,
		"Two":   3,
		"Three": 5,
		"Four":  6,
		"Five":  7,
		"Six":   9,
		"Seven": 11,
		"Eight": 12,
		"Nine":  15,
		"Ten":   17,
	}
)

func (x EnumMap1) Enum() *EnumMap1 {
	p := new(EnumMap1)
	*p = x
	return p
}

func (x EnumMap1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumMap1) Descriptor() protoreflect.EnumDescriptor {
	return file_tests_proto_cases_types_type_map_proto_enumTypes[0].Descriptor()
}

func (EnumMap1) Type() protoreflect.EnumType {
	return &file_tests_proto_cases_types_type_map_proto_enumTypes[0]
}

func (x EnumMap1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumMap1.Descriptor instead.
func (EnumMap1) EnumDescriptor() ([]byte, []int) {
	return file_tests_proto_cases_types_type_map_proto_rawDescGZIP(), []int{0}
}

// MessageMap1 used tests cases in this file.
type MessageMap1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FString1 string `protobuf:"bytes,1,opt,name=f_string1,json=fString1,proto3" json:"f_string1,omitempty"`
	FString2 string `protobuf:"bytes,2,opt,name=f_string2,json=fString2,proto3" json:"f_string2,omitempty"`
	FString3 string `protobuf:"bytes,3,opt,name=f_string3,json=fString3,proto3" json:"f_string3,omitempty"`
}

func (x *MessageMap1) Reset() {
	*x = MessageMap1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_cases_types_type_map_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageMap1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageMap1) ProtoMessage() {}

func (x *MessageMap1) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_cases_types_type_map_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageMap1.ProtoReflect.Descriptor instead.
func (*MessageMap1) Descriptor() ([]byte, []int) {
	return file_tests_proto_cases_types_type_map_proto_rawDescGZIP(), []int{0}
}

func (x *MessageMap1) GetFString1() string {
	if x != nil {
		return x.FString1
	}
	return ""
}

func (x *MessageMap1) GetFString2() string {
	if x != nil {
		return x.FString2
	}
	return ""
}

func (x *MessageMap1) GetFString3() string {
	if x != nil {
		return x.FString3
	}
	return ""
}

// Test case for field Map.
// The type key is string.
type TypeMap1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FString1    map[string]string                             `protobuf:"bytes,1,rep,name=f_string1,json=fString1,proto3" json:"f_string1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FString2    map[string]string                             `protobuf:"bytes,2,rep,name=f_string2,json=fString2,proto3" json:"f_string2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FInt32      map[string]int32                              `protobuf:"bytes,11,rep,name=f_int32,json=fInt32,proto3" json:"f_int32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FInt64      map[string]int64                              `protobuf:"bytes,12,rep,name=f_int64,json=fInt64,proto3" json:"f_int64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FUint32     map[string]uint32                             `protobuf:"bytes,13,rep,name=f_uint32,json=fUint32,proto3" json:"f_uint32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FUint64     map[string]uint64                             `protobuf:"bytes,14,rep,name=f_uint64,json=fUint64,proto3" json:"f_uint64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FSint32     map[string]int32                              `protobuf:"bytes,15,rep,name=f_sint32,json=fSint32,proto3" json:"f_sint32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	FSint64     map[string]int64                              `protobuf:"bytes,16,rep,name=f_sint64,json=fSint64,proto3" json:"f_sint64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	FSfixed32   map[string]int32                              `protobuf:"bytes,17,rep,name=f_sfixed32,json=fSfixed32,proto3" json:"f_sfixed32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	FSfixed64   map[string]int64                              `protobuf:"bytes,18,rep,name=f_sfixed64,json=fSfixed64,proto3" json:"f_sfixed64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	FFixed32    map[string]uint32                             `protobuf:"bytes,19,rep,name=f_fixed32,json=fFixed32,proto3" json:"f_fixed32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	FFixed64    map[string]uint64                             `protobuf:"bytes,20,rep,name=f_fixed64,json=fFixed64,proto3" json:"f_fixed64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	FFloat      map[string]float32                            `protobuf:"bytes,21,rep,name=f_float,json=fFloat,proto3" json:"f_float,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	FDouble     map[string]float64                            `protobuf:"bytes,22,rep,name=f_double,json=fDouble,proto3" json:"f_double,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	FBool1      map[string]bool                               `protobuf:"bytes,31,rep,name=f_bool1,json=fBool1,proto3" json:"f_bool1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FBytes1     map[string][]byte                             `protobuf:"bytes,32,rep,name=f_bytes1,json=fBytes1,proto3" json:"f_bytes1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FEnum1      map[string]EnumMap1                           `protobuf:"bytes,51,rep,name=f_enum1,json=fEnum1,proto3" json:"f_enum1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=type_map.EnumMap1"`
	FEnum2      map[string]pbexternal.Enum1                   `protobuf:"bytes,52,rep,name=f_enum2,json=fEnum2,proto3" json:"f_enum2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=external.Enum1"`
	FEnum3      map[string]pbexternal.Embed_Enum1             `protobuf:"bytes,53,rep,name=f_enum3,json=fEnum3,proto3" json:"f_enum3,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=external.Embed_Enum1"`
	FEnum4      map[string]pbexternal.Embed_Message_Enum1     `protobuf:"bytes,54,rep,name=f_enum4,json=fEnum4,proto3" json:"f_enum4,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=external.Embed_Message_Enum1"`
	FEnum5      map[string]EnumCommon1                        `protobuf:"bytes,55,rep,name=f_enum5,json=fEnum5,proto3" json:"f_enum5,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=type_common.EnumCommon1"`
	FEnum6      map[string]MessageCommon1_Enum1               `protobuf:"bytes,56,rep,name=f_enum6,json=fEnum6,proto3" json:"f_enum6,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=type_common.MessageCommon1_Enum1"`
	FDuration1  map[string]*durationpb.Duration               `protobuf:"bytes,61,rep,name=f_duration1,json=fDuration1,proto3" json:"f_duration1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FDuration2  map[string]*durationpb.Duration               `protobuf:"bytes,62,rep,name=f_duration2,json=fDuration2,proto3" json:"f_duration2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FTimestamp1 map[string]*timestamppb.Timestamp             `protobuf:"bytes,63,rep,name=f_timestamp1,json=fTimestamp1,proto3" json:"f_timestamp1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FTimestamp2 map[string]*timestamppb.Timestamp             `protobuf:"bytes,64,rep,name=f_timestamp2,json=fTimestamp2,proto3" json:"f_timestamp2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FAny1       map[string]*anypb.Any                         `protobuf:"bytes,65,rep,name=f_any1,json=fAny1,proto3" json:"f_any1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FAny2       map[string]*anypb.Any                         `protobuf:"bytes,66,rep,name=f_any2,json=fAny2,proto3" json:"f_any2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FMessage1   map[string]*MessageMap1                       `protobuf:"bytes,71,rep,name=f_message1,json=fMessage1,proto3" json:"f_message1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FMessage2   map[string]*MessageMap1_Embed1                `protobuf:"bytes,72,rep,name=f_message2,json=fMessage2,proto3" json:"f_message2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FMessage3   map[string]*MessageMap1_Embed1_Embed2         `protobuf:"bytes,73,rep,name=f_message3,json=fMessage3,proto3" json:"f_message3,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FMessage4   map[string]*pbexternal.Message1               `protobuf:"bytes,74,rep,name=f_message4,json=fMessage4,proto3" json:"f_message4,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FMessage5   map[string]*pbexternal.Message1_Embed1        `protobuf:"bytes,75,rep,name=f_message5,json=fMessage5,proto3" json:"f_message5,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FMessage6   map[string]*pbexternal.Message1_Embed1_Embed2 `protobuf:"bytes,76,rep,name=f_message6,json=fMessage6,proto3" json:"f_message6,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FMessage7   map[string]*MessageCommon1                    `protobuf:"bytes,77,rep,name=f_message7,json=fMessage7,proto3" json:"f_message7,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FMessage8   map[string]*MessageCommon1_Embed1             `protobuf:"bytes,78,rep,name=f_message8,json=fMessage8,proto3" json:"f_message8,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FMessage9   map[string]*MessageCommon1_Embed1_Embed2      `protobuf:"bytes,79,rep,name=f_message9,json=fMessage9,proto3" json:"f_message9,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TypeMap1) Reset() {
	*x = TypeMap1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_cases_types_type_map_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeMap1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeMap1) ProtoMessage() {}

func (x *TypeMap1) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_cases_types_type_map_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeMap1.ProtoReflect.Descriptor instead.
func (*TypeMap1) Descriptor() ([]byte, []int) {
	return file_tests_proto_cases_types_type_map_proto_rawDescGZIP(), []int{1}
}

func (x *TypeMap1) GetFString1() map[string]string {
	if x != nil {
		return x.FString1
	}
	return nil
}

func (x *TypeMap1) GetFString2() map[string]string {
	if x != nil {
		return x.FString2
	}
	return nil
}

func (x *TypeMap1) GetFInt32() map[string]int32 {
	if x != nil {
		return x.FInt32
	}
	return nil
}

func (x *TypeMap1) GetFInt64() map[string]int64 {
	if x != nil {
		return x.FInt64
	}
	return nil
}

func (x *TypeMap1) GetFUint32() map[string]uint32 {
	if x != nil {
		return x.FUint32
	}
	return nil
}

func (x *TypeMap1) GetFUint64() map[string]uint64 {
	if x != nil {
		return x.FUint64
	}
	return nil
}

func (x *TypeMap1) GetFSint32() map[string]int32 {
	if x != nil {
		return x.FSint32
	}
	return nil
}

func (x *TypeMap1) GetFSint64() map[string]int64 {
	if x != nil {
		return x.FSint64
	}
	return nil
}

func (x *TypeMap1) GetFSfixed32() map[string]int32 {
	if x != nil {
		return x.FSfixed32
	}
	return nil
}

func (x *TypeMap1) GetFSfixed64() map[string]int64 {
	if x != nil {
		return x.FSfixed64
	}
	return nil
}

func (x *TypeMap1) GetFFixed32() map[string]uint32 {
	if x != nil {
		return x.FFixed32
	}
	return nil
}

func (x *TypeMap1) GetFFixed64() map[string]uint64 {
	if x != nil {
		return x.FFixed64
	}
	return nil
}

func (x *TypeMap1) GetFFloat() map[string]float32 {
	if x != nil {
		return x.FFloat
	}
	return nil
}

func (x *TypeMap1) GetFDouble() map[string]float64 {
	if x != nil {
		return x.FDouble
	}
	return nil
}

func (x *TypeMap1) GetFBool1() map[string]bool {
	if x != nil {
		return x.FBool1
	}
	return nil
}

func (x *TypeMap1) GetFBytes1() map[string][]byte {
	if x != nil {
		return x.FBytes1
	}
	return nil
}

func (x *TypeMap1) GetFEnum1() map[string]EnumMap1 {
	if x != nil {
		return x.FEnum1
	}
	return nil
}

func (x *TypeMap1) GetFEnum2() map[string]pbexternal.Enum1 {
	if x != nil {
		return x.FEnum2
	}
	return nil
}

func (x *TypeMap1) GetFEnum3() map[string]pbexternal.Embed_Enum1 {
	if x != nil {
		return x.FEnum3
	}
	return nil
}

func (x *TypeMap1) GetFEnum4() map[string]pbexternal.Embed_Message_Enum1 {
	if x != nil {
		return x.FEnum4
	}
	return nil
}

func (x *TypeMap1) GetFEnum5() map[string]EnumCommon1 {
	if x != nil {
		return x.FEnum5
	}
	return nil
}

func (x *TypeMap1) GetFEnum6() map[string]MessageCommon1_Enum1 {
	if x != nil {
		return x.FEnum6
	}
	return nil
}

func (x *TypeMap1) GetFDuration1() map[string]*durationpb.Duration {
	if x != nil {
		return x.FDuration1
	}
	return nil
}

func (x *TypeMap1) GetFDuration2() map[string]*durationpb.Duration {
	if x != nil {
		return x.FDuration2
	}
	return nil
}

func (x *TypeMap1) GetFTimestamp1() map[string]*timestamppb.Timestamp {
	if x != nil {
		return x.FTimestamp1
	}
	return nil
}

func (x *TypeMap1) GetFTimestamp2() map[string]*timestamppb.Timestamp {
	if x != nil {
		return x.FTimestamp2
	}
	return nil
}

func (x *TypeMap1) GetFAny1() map[string]*anypb.Any {
	if x != nil {
		return x.FAny1
	}
	return nil
}

func (x *TypeMap1) GetFAny2() map[string]*anypb.Any {
	if x != nil {
		return x.FAny2
	}
	return nil
}

func (x *TypeMap1) GetFMessage1() map[string]*MessageMap1 {
	if x != nil {
		return x.FMessage1
	}
	return nil
}

func (x *TypeMap1) GetFMessage2() map[string]*MessageMap1_Embed1 {
	if x != nil {
		return x.FMessage2
	}
	return nil
}

func (x *TypeMap1) GetFMessage3() map[string]*MessageMap1_Embed1_Embed2 {
	if x != nil {
		return x.FMessage3
	}
	return nil
}

func (x *TypeMap1) GetFMessage4() map[string]*pbexternal.Message1 {
	if x != nil {
		return x.FMessage4
	}
	return nil
}

func (x *TypeMap1) GetFMessage5() map[string]*pbexternal.Message1_Embed1 {
	if x != nil {
		return x.FMessage5
	}
	return nil
}

func (x *TypeMap1) GetFMessage6() map[string]*pbexternal.Message1_Embed1_Embed2 {
	if x != nil {
		return x.FMessage6
	}
	return nil
}

func (x *TypeMap1) GetFMessage7() map[string]*MessageCommon1 {
	if x != nil {
		return x.FMessage7
	}
	return nil
}

func (x *TypeMap1) GetFMessage8() map[string]*MessageCommon1_Embed1 {
	if x != nil {
		return x.FMessage8
	}
	return nil
}

func (x *TypeMap1) GetFMessage9() map[string]*MessageCommon1_Embed1_Embed2 {
	if x != nil {
		return x.FMessage9
	}
	return nil
}

// For test all type of map key.
type TypeMap2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FString1  map[string]string `protobuf:"bytes,1,rep,name=f_string1,json=fString1,proto3" json:"f_string1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FInt32    map[int32]int32   `protobuf:"bytes,11,rep,name=f_int32,json=fInt32,proto3" json:"f_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FInt64    map[int64]int64   `protobuf:"bytes,12,rep,name=f_int64,json=fInt64,proto3" json:"f_int64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FUint32   map[uint32]uint32 `protobuf:"bytes,13,rep,name=f_uint32,json=fUint32,proto3" json:"f_uint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FUint64   map[uint64]uint64 `protobuf:"bytes,14,rep,name=f_uint64,json=fUint64,proto3" json:"f_uint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FSint32   map[int32]int32   `protobuf:"bytes,15,rep,name=f_sint32,json=fSint32,proto3" json:"f_sint32,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	FSint64   map[int64]int64   `protobuf:"bytes,16,rep,name=f_sint64,json=fSint64,proto3" json:"f_sint64,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	FSfixed32 map[int32]int32   `protobuf:"bytes,17,rep,name=f_sfixed32,json=fSfixed32,proto3" json:"f_sfixed32,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	FSfixed64 map[int64]int64   `protobuf:"bytes,18,rep,name=f_sfixed64,json=fSfixed64,proto3" json:"f_sfixed64,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	FFixed32  map[uint32]uint32 `protobuf:"bytes,19,rep,name=f_fixed32,json=fFixed32,proto3" json:"f_fixed32,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	FFixed64  map[uint64]uint64 `protobuf:"bytes,20,rep,name=f_fixed64,json=fFixed64,proto3" json:"f_fixed64,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *TypeMap2) Reset() {
	*x = TypeMap2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_cases_types_type_map_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeMap2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeMap2) ProtoMessage() {}

func (x *TypeMap2) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_cases_types_type_map_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeMap2.ProtoReflect.Descriptor instead.
func (*TypeMap2) Descriptor() ([]byte, []int) {
	return file_tests_proto_cases_types_type_map_proto_rawDescGZIP(), []int{2}
}

func (x *TypeMap2) GetFString1() map[string]string {
	if x != nil {
		return x.FString1
	}
	return nil
}

func (x *TypeMap2) GetFInt32() map[int32]int32 {
	if x != nil {
		return x.FInt32
	}
	return nil
}

func (x *TypeMap2) GetFInt64() map[int64]int64 {
	if x != nil {
		return x.FInt64
	}
	return nil
}

func (x *TypeMap2) GetFUint32() map[uint32]uint32 {
	if x != nil {
		return x.FUint32
	}
	return nil
}

func (x *TypeMap2) GetFUint64() map[uint64]uint64 {
	if x != nil {
		return x.FUint64
	}
	return nil
}

func (x *TypeMap2) GetFSint32() map[int32]int32 {
	if x != nil {
		return x.FSint32
	}
	return nil
}

func (x *TypeMap2) GetFSint64() map[int64]int64 {
	if x != nil {
		return x.FSint64
	}
	return nil
}

func (x *TypeMap2) GetFSfixed32() map[int32]int32 {
	if x != nil {
		return x.FSfixed32
	}
	return nil
}

func (x *TypeMap2) GetFSfixed64() map[int64]int64 {
	if x != nil {
		return x.FSfixed64
	}
	return nil
}

func (x *TypeMap2) GetFFixed32() map[uint32]uint32 {
	if x != nil {
		return x.FFixed32
	}
	return nil
}

func (x *TypeMap2) GetFFixed64() map[uint64]uint64 {
	if x != nil {
		return x.FFixed64
	}
	return nil
}

// For test the key of map is bool
type TypeMap3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FString1  map[bool]string `protobuf:"bytes,1,rep,name=f_string1,json=fString1,proto3" json:"f_string1,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FInt32    map[bool]int32  `protobuf:"bytes,11,rep,name=f_int32,json=fInt32,proto3" json:"f_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FInt64    map[bool]int64  `protobuf:"bytes,12,rep,name=f_int64,json=fInt64,proto3" json:"f_int64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FUint32   map[bool]uint32 `protobuf:"bytes,13,rep,name=f_uint32,json=fUint32,proto3" json:"f_uint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FUint64   map[bool]uint64 `protobuf:"bytes,14,rep,name=f_uint64,json=fUint64,proto3" json:"f_uint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FSint32   map[bool]int32  `protobuf:"bytes,15,rep,name=f_sint32,json=fSint32,proto3" json:"f_sint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	FSint64   map[bool]int64  `protobuf:"bytes,16,rep,name=f_sint64,json=fSint64,proto3" json:"f_sint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	FSfixed32 map[bool]int32  `protobuf:"bytes,17,rep,name=f_sfixed32,json=fSfixed32,proto3" json:"f_sfixed32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	FSfixed64 map[bool]int64  `protobuf:"bytes,18,rep,name=f_sfixed64,json=fSfixed64,proto3" json:"f_sfixed64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	FFixed32  map[bool]uint32 `protobuf:"bytes,19,rep,name=f_fixed32,json=fFixed32,proto3" json:"f_fixed32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	FFixed64  map[bool]uint64 `protobuf:"bytes,20,rep,name=f_fixed64,json=fFixed64,proto3" json:"f_fixed64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	FBool     map[bool]bool   `protobuf:"bytes,21,rep,name=f_bool,json=fBool,proto3" json:"f_bool,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *TypeMap3) Reset() {
	*x = TypeMap3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_cases_types_type_map_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeMap3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeMap3) ProtoMessage() {}

func (x *TypeMap3) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_cases_types_type_map_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeMap3.ProtoReflect.Descriptor instead.
func (*TypeMap3) Descriptor() ([]byte, []int) {
	return file_tests_proto_cases_types_type_map_proto_rawDescGZIP(), []int{3}
}

func (x *TypeMap3) GetFString1() map[bool]string {
	if x != nil {
		return x.FString1
	}
	return nil
}

func (x *TypeMap3) GetFInt32() map[bool]int32 {
	if x != nil {
		return x.FInt32
	}
	return nil
}

func (x *TypeMap3) GetFInt64() map[bool]int64 {
	if x != nil {
		return x.FInt64
	}
	return nil
}

func (x *TypeMap3) GetFUint32() map[bool]uint32 {
	if x != nil {
		return x.FUint32
	}
	return nil
}

func (x *TypeMap3) GetFUint64() map[bool]uint64 {
	if x != nil {
		return x.FUint64
	}
	return nil
}

func (x *TypeMap3) GetFSint32() map[bool]int32 {
	if x != nil {
		return x.FSint32
	}
	return nil
}

func (x *TypeMap3) GetFSint64() map[bool]int64 {
	if x != nil {
		return x.FSint64
	}
	return nil
}

func (x *TypeMap3) GetFSfixed32() map[bool]int32 {
	if x != nil {
		return x.FSfixed32
	}
	return nil
}

func (x *TypeMap3) GetFSfixed64() map[bool]int64 {
	if x != nil {
		return x.FSfixed64
	}
	return nil
}

func (x *TypeMap3) GetFFixed32() map[bool]uint32 {
	if x != nil {
		return x.FFixed32
	}
	return nil
}

func (x *TypeMap3) GetFFixed64() map[bool]uint64 {
	if x != nil {
		return x.FFixed64
	}
	return nil
}

func (x *TypeMap3) GetFBool() map[bool]bool {
	if x != nil {
		return x.FBool
	}
	return nil
}

type MessageMap1_Embed1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FString1 string `protobuf:"bytes,1,opt,name=f_string1,json=fString1,proto3" json:"f_string1,omitempty"`
	FString2 string `protobuf:"bytes,2,opt,name=f_string2,json=fString2,proto3" json:"f_string2,omitempty"`
	FString3 string `protobuf:"bytes,3,opt,name=f_string3,json=fString3,proto3" json:"f_string3,omitempty"`
}

func (x *MessageMap1_Embed1) Reset() {
	*x = MessageMap1_Embed1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_cases_types_type_map_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageMap1_Embed1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageMap1_Embed1) ProtoMessage() {}

func (x *MessageMap1_Embed1) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_cases_types_type_map_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageMap1_Embed1.ProtoReflect.Descriptor instead.
func (*MessageMap1_Embed1) Descriptor() ([]byte, []int) {
	return file_tests_proto_cases_types_type_map_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MessageMap1_Embed1) GetFString1() string {
	if x != nil {
		return x.FString1
	}
	return ""
}

func (x *MessageMap1_Embed1) GetFString2() string {
	if x != nil {
		return x.FString2
	}
	return ""
}

func (x *MessageMap1_Embed1) GetFString3() string {
	if x != nil {
		return x.FString3
	}
	return ""
}

type MessageMap1_Embed1_Embed2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FString1 string `protobuf:"bytes,1,opt,name=f_string1,json=fString1,proto3" json:"f_string1,omitempty"`
	FString2 string `protobuf:"bytes,2,opt,name=f_string2,json=fString2,proto3" json:"f_string2,omitempty"`
	FString3 string `protobuf:"bytes,3,opt,name=f_string3,json=fString3,proto3" json:"f_string3,omitempty"`
}

func (x *MessageMap1_Embed1_Embed2) Reset() {
	*x = MessageMap1_Embed1_Embed2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_cases_types_type_map_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageMap1_Embed1_Embed2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageMap1_Embed1_Embed2) ProtoMessage() {}

func (x *MessageMap1_Embed1_Embed2) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_cases_types_type_map_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageMap1_Embed1_Embed2.ProtoReflect.Descriptor instead.
func (*MessageMap1_Embed1_Embed2) Descriptor() ([]byte, []int) {
	return file_tests_proto_cases_types_type_map_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *MessageMap1_Embed1_Embed2) GetFString1() string {
	if x != nil {
		return x.FString1
	}
	return ""
}

func (x *MessageMap1_Embed1_Embed2) GetFString2() string {
	if x != nil {
		return x.FString2
	}
	return ""
}

func (x *MessageMap1_Embed1_Embed2) GetFString3() string {
	if x != nil {
		return x.FString3
	}
	return ""
}

var File_tests_proto_cases_types_type_map_proto protoreflect.FileDescriptor

var file_tests_proto_cases_types_type_map_proto_rawDesc = []byte{
	0x0a, 0x26, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x29, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd,
	0x02, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x12, 0x21,
	0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x31, 0x12, 0x21, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x08, 0x66, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x32, 0x12, 0x21, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x08, 0x66,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x1a, 0xe4, 0x01, 0x0a, 0x06, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x31, 0x12, 0x21, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x08, 0x66, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x21, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x08,
	0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x21, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x8a, 0xa2, 0x1f,
	0x00, 0x52, 0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x1a, 0x71, 0x0a, 0x06, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x32, 0x12, 0x21, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x08,
	0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x21, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x8a, 0xa2, 0x1f,
	0x00, 0x52, 0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x21, 0x0a, 0x09, 0x66,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x22, 0xf1,
	0x29, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x12, 0x43, 0x0a, 0x09, 0x66,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61,
	0x70, 0x31, 0x2e, 0x46, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31,
	0x12, 0x43, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x08, 0x66, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x3d, 0x0a, 0x07, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x06, 0x66, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x3d, 0x0a, 0x07, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x06, 0x66, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x40, 0x0a, 0x08, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x07, 0x66, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x40, 0x0a, 0x08, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x07,
	0x66, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x40, 0x0a, 0x08, 0x66, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x53,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00,
	0x52, 0x07, 0x66, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x40, 0x0a, 0x08, 0x66, 0x5f, 0x73,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e,
	0x46, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2,
	0x1f, 0x00, 0x52, 0x07, 0x66, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x46, 0x0a, 0x0a, 0x66,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x61, 0x70, 0x31, 0x2e, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x09, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x12, 0x46, 0x0a, 0x0a, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00,
	0x52, 0x09, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x43, 0x0a, 0x09, 0x66,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61,
	0x70, 0x31, 0x2e, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x08, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x12, 0x43, 0x0a, 0x09, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x08, 0x66, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x3d, 0x0a, 0x07, 0x66, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x06, 0x66, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x66, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x07, 0x66,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c,
	0x31, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x42, 0x6f, 0x6f,
	0x6c, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x06, 0x66,
	0x42, 0x6f, 0x6f, 0x6c, 0x31, 0x12, 0x40, 0x0a, 0x08, 0x66, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x31, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x07,
	0x66, 0x42, 0x79, 0x74, 0x65, 0x73, 0x31, 0x12, 0x3d, 0x0a, 0x07, 0x66, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x31, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x45, 0x6e,
	0x75, 0x6d, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x06,
	0x66, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x12, 0x3d, 0x0a, 0x07, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x32, 0x18, 0x34, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x45, 0x6e, 0x75,
	0x6d, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x06, 0x66,
	0x45, 0x6e, 0x75, 0x6d, 0x32, 0x12, 0x3d, 0x0a, 0x07, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x33,
	0x18, 0x35, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x45, 0x6e, 0x75, 0x6d,
	0x33, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x06, 0x66, 0x45,
	0x6e, 0x75, 0x6d, 0x33, 0x12, 0x3d, 0x0a, 0x07, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x34, 0x18,
	0x36, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x45, 0x6e, 0x75, 0x6d, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x06, 0x66, 0x45, 0x6e,
	0x75, 0x6d, 0x34, 0x12, 0x3d, 0x0a, 0x07, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x35, 0x18, 0x37,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x45, 0x6e, 0x75, 0x6d, 0x35, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x06, 0x66, 0x45, 0x6e, 0x75,
	0x6d, 0x35, 0x12, 0x3d, 0x0a, 0x07, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x36, 0x18, 0x38, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x45, 0x6e, 0x75, 0x6d, 0x36, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x06, 0x66, 0x45, 0x6e, 0x75, 0x6d,
	0x36, 0x12, 0x49, 0x0a, 0x0b, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31,
	0x18, 0x3d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00,
	0x52, 0x0a, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x12, 0x49, 0x0a, 0x0b,
	0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x18, 0x3e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x0a, 0x66, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0x4c, 0x0a, 0x0c, 0x66, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x31, 0x18, 0x3f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70,
	0x31, 0x2e, 0x46, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x31, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x0b, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x31, 0x12, 0x4c, 0x0a, 0x0c, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x32, 0x18, 0x40, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e,
	0x46, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x0b, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x32, 0x12, 0x3a, 0x0a, 0x06, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x31, 0x18, 0x41, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x41, 0x6e, 0x79, 0x31, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x05, 0x66, 0x41, 0x6e, 0x79, 0x31, 0x12,
	0x3a, 0x0a, 0x06, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x32, 0x18, 0x42, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x61, 0x70, 0x31, 0x2e, 0x46, 0x41, 0x6e, 0x79, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04,
	0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x05, 0x66, 0x41, 0x6e, 0x79, 0x32, 0x12, 0x46, 0x0a, 0x0a, 0x66,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x18, 0x47, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x61, 0x70, 0x31, 0x2e, 0x46, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x09, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x31, 0x12, 0x46, 0x0a, 0x0a, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x18, 0x48, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00,
	0x52, 0x09, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0x46, 0x0a, 0x0a, 0x66,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x33, 0x18, 0x49, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x61, 0x70, 0x31, 0x2e, 0x46, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x33, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x09, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x33, 0x12, 0x46, 0x0a, 0x0a, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x34, 0x18, 0x4a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00,
	0x52, 0x09, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x34, 0x12, 0x46, 0x0a, 0x0a, 0x66,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x35, 0x18, 0x4b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x61, 0x70, 0x31, 0x2e, 0x46, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x35, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x09, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x35, 0x12, 0x46, 0x0a, 0x0a, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x36, 0x18, 0x4c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x36, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00,
	0x52, 0x09, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x36, 0x12, 0x46, 0x0a, 0x0a, 0x66,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x37, 0x18, 0x4d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x61, 0x70, 0x31, 0x2e, 0x46, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x37, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x09, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x37, 0x12, 0x46, 0x0a, 0x0a, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x38, 0x18, 0x4e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x46, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x38, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00,
	0x52, 0x09, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x38, 0x12, 0x46, 0x0a, 0x0a, 0x66,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x39, 0x18, 0x4f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x61, 0x70, 0x31, 0x2e, 0x46, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x39, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x09, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x39, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a,
	0x0b, 0x46, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3a, 0x0a, 0x0c, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x46,
	0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x46, 0x53, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3b, 0x0a, 0x0d, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d,
	0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x46, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x42, 0x6f, 0x6f, 0x6c, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x46,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x0b, 0x46, 0x45, 0x6e, 0x75, 0x6d,
	0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x0b, 0x46, 0x45, 0x6e, 0x75, 0x6d, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x50, 0x0a, 0x0b, 0x46, 0x45, 0x6e, 0x75, 0x6d, 0x33, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x0b, 0x46, 0x45, 0x6e, 0x75, 0x6d, 0x34, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53,
	0x0a, 0x0b, 0x46, 0x45, 0x6e, 0x75, 0x6d, 0x35, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x0b, 0x46, 0x45, 0x6e, 0x75, 0x6d, 0x36, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x58, 0x0a, 0x0f, 0x46, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x0f, 0x46,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a, 0x0a, 0x10, 0x46, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x5a, 0x0a, 0x10, 0x46, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4e, 0x0a,
	0x0a, 0x46, 0x41, 0x6e, 0x79, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4e, 0x0a,
	0x0a, 0x46, 0x41, 0x6e, 0x79, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a,
	0x0e, 0x46, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x5a, 0x0a, 0x0e, 0x46, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x61,
	0x0a, 0x0e, 0x46, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x33, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x31, 0x2e,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x32, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x50, 0x0a, 0x0e, 0x46, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x34, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x0e, 0x46, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x35,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e, 0x0a, 0x0e,
	0x46, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x36, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x32, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x59, 0x0a, 0x0e,
	0x46, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x37, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x0e, 0x46, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x38, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x31, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x67, 0x0a, 0x0e, 0x46, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x39, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x31,
	0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x32, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x88, 0x0b, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x12,
	0x43, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x08, 0x66, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x31, 0x12, 0x3d, 0x0a, 0x07, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x06, 0x66, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x3d, 0x0a, 0x07, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x06, 0x66, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x40, 0x0a, 0x08, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x07, 0x66, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x40, 0x0a, 0x08, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x07, 0x66,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x40, 0x0a, 0x08, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46, 0x53, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52,
	0x07, 0x66, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x40, 0x0a, 0x08, 0x66, 0x5f, 0x73, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46,
	0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f,
	0x00, 0x52, 0x07, 0x66, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x46, 0x0a, 0x0a, 0x66, 0x5f,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61,
	0x70, 0x32, 0x2e, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x09, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x12, 0x46, 0x0a, 0x0a, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52,
	0x09, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x43, 0x0a, 0x09, 0x66, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70,
	0x32, 0x2e, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x08, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12,
	0x43, 0x0a, 0x09, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x08, 0x66, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b,
	0x46, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x46, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3a, 0x0a, 0x0c, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x46,
	0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x46, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x10, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfe, 0x0b,
	0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x33, 0x12, 0x43, 0x0a, 0x09, 0x66, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70,
	0x33, 0x2e, 0x46, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12,
	0x3d, 0x0a, 0x07, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x4d, 0x61, 0x70, 0x33, 0x2e, 0x46, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x06, 0x66, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x3d,
	0x0a, 0x07, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x61, 0x70, 0x33, 0x2e, 0x46, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x06, 0x66, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x40, 0x0a,
	0x08, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x61, 0x70, 0x33, 0x2e, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x07, 0x66, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x40, 0x0a, 0x08, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x61, 0x70, 0x33, 0x2e, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x07, 0x66, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x40, 0x0a, 0x08, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x33, 0x2e, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x07, 0x66, 0x53, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x40, 0x0a, 0x08, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x33, 0x2e, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x07, 0x66, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x46, 0x0a, 0x0a, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x33, 0x2e, 0x46, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2,
	0x1f, 0x00, 0x52, 0x09, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x46, 0x0a,
	0x0a, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x61, 0x70, 0x33, 0x2e, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x09, 0x66, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x43, 0x0a, 0x09, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x33, 0x2e, 0x46, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0x8a, 0xa2, 0x1f, 0x00,
	0x52, 0x08, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x43, 0x0a, 0x09, 0x66, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70,
	0x33, 0x2e, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x04, 0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x08, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12,
	0x3a, 0x0a, 0x06, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x61, 0x70, 0x33, 0x2e, 0x46, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04,
	0x8a, 0xa2, 0x1f, 0x00, 0x52, 0x05, 0x66, 0x42, 0x6f, 0x6f, 0x6c, 0x1a, 0x3b, 0x0a, 0x0d, 0x46,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a,
	0x0a, 0x0c, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x46, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c,
	0x0a, 0x0e, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e,
	0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x46, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x77,
	0x0a, 0x08, 0x45, 0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x31, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x65,
	0x72, 0x6f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x54, 0x77, 0x6f, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x68, 0x72, 0x65, 0x65, 0x10,
	0x05, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x6f, 0x75, 0x72, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x46,
	0x69, 0x76, 0x65, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x69, 0x78, 0x10, 0x09, 0x12, 0x09,
	0x0a, 0x05, 0x53, 0x65, 0x76, 0x65, 0x6e, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x69, 0x67,
	0x68, 0x74, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x69, 0x6e, 0x65, 0x10, 0x0f, 0x12, 0x07,
	0x0a, 0x03, 0x54, 0x65, 0x6e, 0x10, 0x11, 0x42, 0x16, 0x5a, 0x14, 0x78, 0x67, 0x6f, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x62, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tests_proto_cases_types_type_map_proto_rawDescOnce sync.Once
	file_tests_proto_cases_types_type_map_proto_rawDescData = file_tests_proto_cases_types_type_map_proto_rawDesc
)

func file_tests_proto_cases_types_type_map_proto_rawDescGZIP() []byte {
	file_tests_proto_cases_types_type_map_proto_rawDescOnce.Do(func() {
		file_tests_proto_cases_types_type_map_proto_rawDescData = protoimpl.X.CompressGZIP(file_tests_proto_cases_types_type_map_proto_rawDescData)
	})
	return file_tests_proto_cases_types_type_map_proto_rawDescData
}

var file_tests_proto_cases_types_type_map_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tests_proto_cases_types_type_map_proto_msgTypes = make([]protoimpl.MessageInfo, 66)
var file_tests_proto_cases_types_type_map_proto_goTypes = []interface{}{
	(EnumMap1)(0),                       // 0: type_map.EnumMap1
	(*MessageMap1)(nil),                 // 1: type_map.MessageMap1
	(*TypeMap1)(nil),                    // 2: type_map.TypeMap1
	(*TypeMap2)(nil),                    // 3: type_map.TypeMap2
	(*TypeMap3)(nil),                    // 4: type_map.TypeMap3
	(*MessageMap1_Embed1)(nil),          // 5: type_map.MessageMap1.Embed1
	(*MessageMap1_Embed1_Embed2)(nil),   // 6: type_map.MessageMap1.Embed1.Embed2
	nil,                                 // 7: type_map.TypeMap1.FString1Entry
	nil,                                 // 8: type_map.TypeMap1.FString2Entry
	nil,                                 // 9: type_map.TypeMap1.FInt32Entry
	nil,                                 // 10: type_map.TypeMap1.FInt64Entry
	nil,                                 // 11: type_map.TypeMap1.FUint32Entry
	nil,                                 // 12: type_map.TypeMap1.FUint64Entry
	nil,                                 // 13: type_map.TypeMap1.FSint32Entry
	nil,                                 // 14: type_map.TypeMap1.FSint64Entry
	nil,                                 // 15: type_map.TypeMap1.FSfixed32Entry
	nil,                                 // 16: type_map.TypeMap1.FSfixed64Entry
	nil,                                 // 17: type_map.TypeMap1.FFixed32Entry
	nil,                                 // 18: type_map.TypeMap1.FFixed64Entry
	nil,                                 // 19: type_map.TypeMap1.FFloatEntry
	nil,                                 // 20: type_map.TypeMap1.FDoubleEntry
	nil,                                 // 21: type_map.TypeMap1.FBool1Entry
	nil,                                 // 22: type_map.TypeMap1.FBytes1Entry
	nil,                                 // 23: type_map.TypeMap1.FEnum1Entry
	nil,                                 // 24: type_map.TypeMap1.FEnum2Entry
	nil,                                 // 25: type_map.TypeMap1.FEnum3Entry
	nil,                                 // 26: type_map.TypeMap1.FEnum4Entry
	nil,                                 // 27: type_map.TypeMap1.FEnum5Entry
	nil,                                 // 28: type_map.TypeMap1.FEnum6Entry
	nil,                                 // 29: type_map.TypeMap1.FDuration1Entry
	nil,                                 // 30: type_map.TypeMap1.FDuration2Entry
	nil,                                 // 31: type_map.TypeMap1.FTimestamp1Entry
	nil,                                 // 32: type_map.TypeMap1.FTimestamp2Entry
	nil,                                 // 33: type_map.TypeMap1.FAny1Entry
	nil,                                 // 34: type_map.TypeMap1.FAny2Entry
	nil,                                 // 35: type_map.TypeMap1.FMessage1Entry
	nil,                                 // 36: type_map.TypeMap1.FMessage2Entry
	nil,                                 // 37: type_map.TypeMap1.FMessage3Entry
	nil,                                 // 38: type_map.TypeMap1.FMessage4Entry
	nil,                                 // 39: type_map.TypeMap1.FMessage5Entry
	nil,                                 // 40: type_map.TypeMap1.FMessage6Entry
	nil,                                 // 41: type_map.TypeMap1.FMessage7Entry
	nil,                                 // 42: type_map.TypeMap1.FMessage8Entry
	nil,                                 // 43: type_map.TypeMap1.FMessage9Entry
	nil,                                 // 44: type_map.TypeMap2.FString1Entry
	nil,                                 // 45: type_map.TypeMap2.FInt32Entry
	nil,                                 // 46: type_map.TypeMap2.FInt64Entry
	nil,                                 // 47: type_map.TypeMap2.FUint32Entry
	nil,                                 // 48: type_map.TypeMap2.FUint64Entry
	nil,                                 // 49: type_map.TypeMap2.FSint32Entry
	nil,                                 // 50: type_map.TypeMap2.FSint64Entry
	nil,                                 // 51: type_map.TypeMap2.FSfixed32Entry
	nil,                                 // 52: type_map.TypeMap2.FSfixed64Entry
	nil,                                 // 53: type_map.TypeMap2.FFixed32Entry
	nil,                                 // 54: type_map.TypeMap2.FFixed64Entry
	nil,                                 // 55: type_map.TypeMap3.FString1Entry
	nil,                                 // 56: type_map.TypeMap3.FInt32Entry
	nil,                                 // 57: type_map.TypeMap3.FInt64Entry
	nil,                                 // 58: type_map.TypeMap3.FUint32Entry
	nil,                                 // 59: type_map.TypeMap3.FUint64Entry
	nil,                                 // 60: type_map.TypeMap3.FSint32Entry
	nil,                                 // 61: type_map.TypeMap3.FSint64Entry
	nil,                                 // 62: type_map.TypeMap3.FSfixed32Entry
	nil,                                 // 63: type_map.TypeMap3.FSfixed64Entry
	nil,                                 // 64: type_map.TypeMap3.FFixed32Entry
	nil,                                 // 65: type_map.TypeMap3.FFixed64Entry
	nil,                                 // 66: type_map.TypeMap3.FBoolEntry
	(pbexternal.Enum1)(0),               // 67: external.Enum1
	(pbexternal.Embed_Enum1)(0),         // 68: external.Embed.Enum1
	(pbexternal.Embed_Message_Enum1)(0), // 69: external.Embed.Message.Enum1
	(EnumCommon1)(0),                    // 70: type_common.EnumCommon1
	(MessageCommon1_Enum1)(0),           // 71: type_common.MessageCommon1.Enum1
	(*durationpb.Duration)(nil),         // 72: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),       // 73: google.protobuf.Timestamp
	(*anypb.Any)(nil),                   // 74: google.protobuf.Any
	(*pbexternal.Message1)(nil),         // 75: external.Message1
	(*pbexternal.Message1_Embed1)(nil),  // 76: external.Message1.Embed1
	(*pbexternal.Message1_Embed1_Embed2)(nil), // 77: external.Message1.Embed1.Embed2
	(*MessageCommon1)(nil),                    // 78: type_common.MessageCommon1
	(*MessageCommon1_Embed1)(nil),             // 79: type_common.MessageCommon1.Embed1
	(*MessageCommon1_Embed1_Embed2)(nil),      // 80: type_common.MessageCommon1.Embed1.Embed2
}
var file_tests_proto_cases_types_type_map_proto_depIdxs = []int32{
	7,  // 0: type_map.TypeMap1.f_string1:type_name -> type_map.TypeMap1.FString1Entry
	8,  // 1: type_map.TypeMap1.f_string2:type_name -> type_map.TypeMap1.FString2Entry
	9,  // 2: type_map.TypeMap1.f_int32:type_name -> type_map.TypeMap1.FInt32Entry
	10, // 3: type_map.TypeMap1.f_int64:type_name -> type_map.TypeMap1.FInt64Entry
	11, // 4: type_map.TypeMap1.f_uint32:type_name -> type_map.TypeMap1.FUint32Entry
	12, // 5: type_map.TypeMap1.f_uint64:type_name -> type_map.TypeMap1.FUint64Entry
	13, // 6: type_map.TypeMap1.f_sint32:type_name -> type_map.TypeMap1.FSint32Entry
	14, // 7: type_map.TypeMap1.f_sint64:type_name -> type_map.TypeMap1.FSint64Entry
	15, // 8: type_map.TypeMap1.f_sfixed32:type_name -> type_map.TypeMap1.FSfixed32Entry
	16, // 9: type_map.TypeMap1.f_sfixed64:type_name -> type_map.TypeMap1.FSfixed64Entry
	17, // 10: type_map.TypeMap1.f_fixed32:type_name -> type_map.TypeMap1.FFixed32Entry
	18, // 11: type_map.TypeMap1.f_fixed64:type_name -> type_map.TypeMap1.FFixed64Entry
	19, // 12: type_map.TypeMap1.f_float:type_name -> type_map.TypeMap1.FFloatEntry
	20, // 13: type_map.TypeMap1.f_double:type_name -> type_map.TypeMap1.FDoubleEntry
	21, // 14: type_map.TypeMap1.f_bool1:type_name -> type_map.TypeMap1.FBool1Entry
	22, // 15: type_map.TypeMap1.f_bytes1:type_name -> type_map.TypeMap1.FBytes1Entry
	23, // 16: type_map.TypeMap1.f_enum1:type_name -> type_map.TypeMap1.FEnum1Entry
	24, // 17: type_map.TypeMap1.f_enum2:type_name -> type_map.TypeMap1.FEnum2Entry
	25, // 18: type_map.TypeMap1.f_enum3:type_name -> type_map.TypeMap1.FEnum3Entry
	26, // 19: type_map.TypeMap1.f_enum4:type_name -> type_map.TypeMap1.FEnum4Entry
	27, // 20: type_map.TypeMap1.f_enum5:type_name -> type_map.TypeMap1.FEnum5Entry
	28, // 21: type_map.TypeMap1.f_enum6:type_name -> type_map.TypeMap1.FEnum6Entry
	29, // 22: type_map.TypeMap1.f_duration1:type_name -> type_map.TypeMap1.FDuration1Entry
	30, // 23: type_map.TypeMap1.f_duration2:type_name -> type_map.TypeMap1.FDuration2Entry
	31, // 24: type_map.TypeMap1.f_timestamp1:type_name -> type_map.TypeMap1.FTimestamp1Entry
	32, // 25: type_map.TypeMap1.f_timestamp2:type_name -> type_map.TypeMap1.FTimestamp2Entry
	33, // 26: type_map.TypeMap1.f_any1:type_name -> type_map.TypeMap1.FAny1Entry
	34, // 27: type_map.TypeMap1.f_any2:type_name -> type_map.TypeMap1.FAny2Entry
	35, // 28: type_map.TypeMap1.f_message1:type_name -> type_map.TypeMap1.FMessage1Entry
	36, // 29: type_map.TypeMap1.f_message2:type_name -> type_map.TypeMap1.FMessage2Entry
	37, // 30: type_map.TypeMap1.f_message3:type_name -> type_map.TypeMap1.FMessage3Entry
	38, // 31: type_map.TypeMap1.f_message4:type_name -> type_map.TypeMap1.FMessage4Entry
	39, // 32: type_map.TypeMap1.f_message5:type_name -> type_map.TypeMap1.FMessage5Entry
	40, // 33: type_map.TypeMap1.f_message6:type_name -> type_map.TypeMap1.FMessage6Entry
	41, // 34: type_map.TypeMap1.f_message7:type_name -> type_map.TypeMap1.FMessage7Entry
	42, // 35: type_map.TypeMap1.f_message8:type_name -> type_map.TypeMap1.FMessage8Entry
	43, // 36: type_map.TypeMap1.f_message9:type_name -> type_map.TypeMap1.FMessage9Entry
	44, // 37: type_map.TypeMap2.f_string1:type_name -> type_map.TypeMap2.FString1Entry
	45, // 38: type_map.TypeMap2.f_int32:type_name -> type_map.TypeMap2.FInt32Entry
	46, // 39: type_map.TypeMap2.f_int64:type_name -> type_map.TypeMap2.FInt64Entry
	47, // 40: type_map.TypeMap2.f_uint32:type_name -> type_map.TypeMap2.FUint32Entry
	48, // 41: type_map.TypeMap2.f_uint64:type_name -> type_map.TypeMap2.FUint64Entry
	49, // 42: type_map.TypeMap2.f_sint32:type_name -> type_map.TypeMap2.FSint32Entry
	50, // 43: type_map.TypeMap2.f_sint64:type_name -> type_map.TypeMap2.FSint64Entry
	51, // 44: type_map.TypeMap2.f_sfixed32:type_name -> type_map.TypeMap2.FSfixed32Entry
	52, // 45: type_map.TypeMap2.f_sfixed64:type_name -> type_map.TypeMap2.FSfixed64Entry
	53, // 46: type_map.TypeMap2.f_fixed32:type_name -> type_map.TypeMap2.FFixed32Entry
	54, // 47: type_map.TypeMap2.f_fixed64:type_name -> type_map.TypeMap2.FFixed64Entry
	55, // 48: type_map.TypeMap3.f_string1:type_name -> type_map.TypeMap3.FString1Entry
	56, // 49: type_map.TypeMap3.f_int32:type_name -> type_map.TypeMap3.FInt32Entry
	57, // 50: type_map.TypeMap3.f_int64:type_name -> type_map.TypeMap3.FInt64Entry
	58, // 51: type_map.TypeMap3.f_uint32:type_name -> type_map.TypeMap3.FUint32Entry
	59, // 52: type_map.TypeMap3.f_uint64:type_name -> type_map.TypeMap3.FUint64Entry
	60, // 53: type_map.TypeMap3.f_sint32:type_name -> type_map.TypeMap3.FSint32Entry
	61, // 54: type_map.TypeMap3.f_sint64:type_name -> type_map.TypeMap3.FSint64Entry
	62, // 55: type_map.TypeMap3.f_sfixed32:type_name -> type_map.TypeMap3.FSfixed32Entry
	63, // 56: type_map.TypeMap3.f_sfixed64:type_name -> type_map.TypeMap3.FSfixed64Entry
	64, // 57: type_map.TypeMap3.f_fixed32:type_name -> type_map.TypeMap3.FFixed32Entry
	65, // 58: type_map.TypeMap3.f_fixed64:type_name -> type_map.TypeMap3.FFixed64Entry
	66, // 59: type_map.TypeMap3.f_bool:type_name -> type_map.TypeMap3.FBoolEntry
	0,  // 60: type_map.TypeMap1.FEnum1Entry.value:type_name -> type_map.EnumMap1
	67, // 61: type_map.TypeMap1.FEnum2Entry.value:type_name -> external.Enum1
	68, // 62: type_map.TypeMap1.FEnum3Entry.value:type_name -> external.Embed.Enum1
	69, // 63: type_map.TypeMap1.FEnum4Entry.value:type_name -> external.Embed.Message.Enum1
	70, // 64: type_map.TypeMap1.FEnum5Entry.value:type_name -> type_common.EnumCommon1
	71, // 65: type_map.TypeMap1.FEnum6Entry.value:type_name -> type_common.MessageCommon1.Enum1
	72, // 66: type_map.TypeMap1.FDuration1Entry.value:type_name -> google.protobuf.Duration
	72, // 67: type_map.TypeMap1.FDuration2Entry.value:type_name -> google.protobuf.Duration
	73, // 68: type_map.TypeMap1.FTimestamp1Entry.value:type_name -> google.protobuf.Timestamp
	73, // 69: type_map.TypeMap1.FTimestamp2Entry.value:type_name -> google.protobuf.Timestamp
	74, // 70: type_map.TypeMap1.FAny1Entry.value:type_name -> google.protobuf.Any
	74, // 71: type_map.TypeMap1.FAny2Entry.value:type_name -> google.protobuf.Any
	1,  // 72: type_map.TypeMap1.FMessage1Entry.value:type_name -> type_map.MessageMap1
	5,  // 73: type_map.TypeMap1.FMessage2Entry.value:type_name -> type_map.MessageMap1.Embed1
	6,  // 74: type_map.TypeMap1.FMessage3Entry.value:type_name -> type_map.MessageMap1.Embed1.Embed2
	75, // 75: type_map.TypeMap1.FMessage4Entry.value:type_name -> external.Message1
	76, // 76: type_map.TypeMap1.FMessage5Entry.value:type_name -> external.Message1.Embed1
	77, // 77: type_map.TypeMap1.FMessage6Entry.value:type_name -> external.Message1.Embed1.Embed2
	78, // 78: type_map.TypeMap1.FMessage7Entry.value:type_name -> type_common.MessageCommon1
	79, // 79: type_map.TypeMap1.FMessage8Entry.value:type_name -> type_common.MessageCommon1.Embed1
	80, // 80: type_map.TypeMap1.FMessage9Entry.value:type_name -> type_common.MessageCommon1.Embed1.Embed2
	81, // [81:81] is the sub-list for method output_type
	81, // [81:81] is the sub-list for method input_type
	81, // [81:81] is the sub-list for extension type_name
	81, // [81:81] is the sub-list for extension extendee
	0,  // [0:81] is the sub-list for field type_name
}

func init() { file_tests_proto_cases_types_type_map_proto_init() }
func file_tests_proto_cases_types_type_map_proto_init() {
	if File_tests_proto_cases_types_type_map_proto != nil {
		return
	}
	file_tests_proto_cases_types_type_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tests_proto_cases_types_type_map_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageMap1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_proto_cases_types_type_map_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeMap1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_proto_cases_types_type_map_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeMap2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_proto_cases_types_type_map_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeMap3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_proto_cases_types_type_map_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageMap1_Embed1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_proto_cases_types_type_map_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageMap1_Embed1_Embed2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tests_proto_cases_types_type_map_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   66,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tests_proto_cases_types_type_map_proto_goTypes,
		DependencyIndexes: file_tests_proto_cases_types_type_map_proto_depIdxs,
		EnumInfos:         file_tests_proto_cases_types_type_map_proto_enumTypes,
		MessageInfos:      file_tests_proto_cases_types_type_map_proto_msgTypes,
	}.Build()
	File_tests_proto_cases_types_type_map_proto = out.File
	file_tests_proto_cases_types_type_map_proto_rawDesc = nil
	file_tests_proto_cases_types_type_map_proto_goTypes = nil
	file_tests_proto_cases_types_type_map_proto_depIdxs = nil
}
