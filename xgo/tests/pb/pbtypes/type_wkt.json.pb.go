// Code generated by protoc-gen-gojson. DO NOT EDIT.
// versions:
// 		protoc-gen-gojson 0.0.1
// source: tests/proto/cases/types/type_wkt.proto

package pbtypes

import (
	errors "errors"
	_ "github.com/yu31/protoc-plugin-json/xgo/pb/pbjson"
	jsondecoder "github.com/yu31/protoc-plugin-json/xgo/pkg/jsondecoder"
	jsonencoder "github.com/yu31/protoc-plugin-json/xgo/pkg/jsonencoder"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// MarshalJSON implements interface json.Marshaler for proto message MessageWKT1 in file tests/proto/cases/types/type_wkt.proto
func (x *MessageWKT1) MarshalJSON() ([]byte, error) {
	if x == nil {
		return []byte("null"), nil
	}
	var err error
	encoder := jsonencoder.New(68)

	// Add begin JSON identifier
	encoder.AppendObjectBegin()

	encoder.AppendJSONKey("f_string1")
	encoder.AppendValueString(x.FString1)
	encoder.AppendJSONKey("f_string2")
	encoder.AppendValueString(x.FString2)
	encoder.AppendJSONKey("f_string3")
	encoder.AppendValueString(x.FString3)

	// Add end JSON identifier
	encoder.AppendObjectEnd()
	return encoder.Bytes(), err
}

// UnmarshalJSON implements json.Unmarshaler for proto message MessageWKT1 in file tests/proto/cases/types/type_wkt.proto
func (x *MessageWKT1) UnmarshalJSON(b []byte) error {
	if x == nil {
		return errors.New("json: Unmarshal: xgo/tests/pb/pbtypes.(*MessageWKT1) is nil")
	}

	var (
		err     error
		isNULL  bool
		decoder *jsondecoder.Decoder
	)
	if decoder, err = jsondecoder.New(b); err != nil {
		return err
	}
	if isNULL, err = decoder.BeforeScanJSON(); err != nil {
		return err
	}
	if isNULL {
		return nil
	}
LOOP_SCAN:
	for { // Loop to scan object.
		var (
			jsonKey string
			isEnd   bool
		)
		if isEnd, err = decoder.BeforeReadJSONKey(); err != nil {
			return err
		}
		if isEnd {
			break LOOP_SCAN
		}
		if jsonKey, err = decoder.ReadJSONKey(); err != nil {
			return err
		}
		switch jsonKey { // match the JSON key
		case "f_string1":
			var vv string
			vv, err = decoder.ReadValueString(jsonKey)
			if err != nil {
				return err
			}
			x.FString1 = vv
		case "f_string2":
			var vv string
			vv, err = decoder.ReadValueString(jsonKey)
			if err != nil {
				return err
			}
			x.FString2 = vv
		case "f_string3":
			var vv string
			vv, err = decoder.ReadValueString(jsonKey)
			if err != nil {
				return err
			}
			x.FString3 = vv
		default:
			if err = decoder.DiscardValue(jsonKey); err != nil {
				return err
			}
		}
	}
	return nil
}

// MarshalJSON implements interface json.Marshaler for proto message TypeWKTPlain1 in file tests/proto/cases/types/type_wkt.proto
func (x *TypeWKTPlain1) MarshalJSON() ([]byte, error) {
	if x == nil {
		return []byte("null"), nil
	}
	var err error
	encoder := jsonencoder.New(874)

	// Add begin JSON identifier
	encoder.AppendObjectBegin()

	encoder.AppendJSONKey("f_any1")
	if err = encoder.AppendValueInterface(x.FAny1); err != nil {
		return nil, err
	}
	encoder.AppendJSONKey("f_any2")
	if err = encoder.AppendValueInterface(x.FAny2); err != nil {
		return nil, err
	}
	encoder.AppendJSONKey("f_any3")
	if err = encoder.AppendValueAnyExpand(x.FAny3); err != nil {
		return nil, err
	}
	encoder.AppendJSONKey("f_any4")
	if err = encoder.AppendValueInterface(x.FAny4); err != nil {
		return nil, err
	}
	encoder.AppendJSONKey("f_duration11")
	if err = encoder.AppendValueInterface(x.FDuration11); err != nil {
		return nil, err
	}
	encoder.AppendJSONKey("f_duration21")
	if err = encoder.AppendValueInterface(x.FDuration21); err != nil {
		return nil, err
	}
	encoder.AppendJSONKey("f_duration12")
	encoder.AppendValueString(x.FDuration12.AsDuration().String())
	encoder.AppendJSONKey("f_duration22")
	if err = encoder.AppendValueInterface(x.FDuration22); err != nil {
		return nil, err
	}
	encoder.AppendJSONKey("f_duration13")
	encoder.AppendValueInt64(x.FDuration13.AsDuration().Nanoseconds())
	encoder.AppendJSONKey("f_duration23")
	if err = encoder.AppendValueInterface(x.FDuration23); err != nil {
		return nil, err
	}
	encoder.AppendJSONKey("f_duration14")
	encoder.AppendValueInt64(x.FDuration14.AsDuration().Microseconds())
	encoder.AppendJSONKey("f_duration24")
	if err = encoder.AppendValueInterface(x.FDuration24); err != nil {
		return nil, err
	}
	encoder.AppendJSONKey("f_duration15")
	encoder.AppendValueInt64(x.FDuration15.AsDuration().Milliseconds())
	encoder.AppendJSONKey("f_duration25")
	if err = encoder.AppendValueInterface(x.FDuration25); err != nil {
		return nil, err
	}
	encoder.AppendJSONKey("f_duration16")
	encoder.AppendValueFloat64(x.FDuration16.AsDuration().Seconds())
	encoder.AppendJSONKey("f_duration26")
	if err = encoder.AppendValueInterface(x.FDuration26); err != nil {
		return nil, err
	}
	encoder.AppendJSONKey("f_duration17")
	encoder.AppendValueFloat64(x.FDuration17.AsDuration().Minutes())
	encoder.AppendJSONKey("f_duration27")
	if err = encoder.AppendValueInterface(x.FDuration27); err != nil {
		return nil, err
	}
	encoder.AppendJSONKey("f_duration18")
	encoder.AppendValueFloat64(x.FDuration18.AsDuration().Hours())
	encoder.AppendJSONKey("f_duration28")
	if err = encoder.AppendValueInterface(x.FDuration28); err != nil {
		return nil, err
	}
	encoder.AppendJSONKey("f_timestamp31")
	if err = encoder.AppendValueInterface(x.FTimestamp31); err != nil {
		return nil, err
	}
	encoder.AppendJSONKey("f_timestamp41")
	if err = encoder.AppendValueInterface(x.FTimestamp41); err != nil {
		return nil, err
	}
	encoder.AppendJSONKey("f_timestamp32")
	encoder.AppendValueString(x.FTimestamp32.AsTime().Format("2006-01-02T15:04:05Z07:00"))
	encoder.AppendJSONKey("f_timestamp42")
	encoder.AppendValueString(x.FTimestamp42.AsTime().Format("Mon, 02 Jan 2006 15:04:05 MST"))
	encoder.AppendJSONKey("f_timestamp33")
	encoder.AppendValueInt64(x.FTimestamp33.AsTime().UnixNano())
	encoder.AppendJSONKey("f_timestamp43")
	if err = encoder.AppendValueInterface(x.FTimestamp43); err != nil {
		return nil, err
	}
	encoder.AppendJSONKey("f_timestamp34")
	encoder.AppendValueInt64(x.FTimestamp34.AsTime().UnixMicro())
	encoder.AppendJSONKey("f_timestamp44")
	if err = encoder.AppendValueInterface(x.FTimestamp44); err != nil {
		return nil, err
	}
	encoder.AppendJSONKey("f_timestamp35")
	encoder.AppendValueInt64(x.FTimestamp35.AsTime().UnixMilli())
	encoder.AppendJSONKey("f_timestamp45")
	if err = encoder.AppendValueInterface(x.FTimestamp45); err != nil {
		return nil, err
	}
	encoder.AppendJSONKey("f_timestamp36")
	encoder.AppendValueInt64(x.FTimestamp36.AsTime().Unix())
	encoder.AppendJSONKey("f_timestamp46")
	if err = encoder.AppendValueInterface(x.FTimestamp46); err != nil {
		return nil, err
	}

	// Add end JSON identifier
	encoder.AppendObjectEnd()
	return encoder.Bytes(), err
}

// UnmarshalJSON implements json.Unmarshaler for proto message TypeWKTPlain1 in file tests/proto/cases/types/type_wkt.proto
func (x *TypeWKTPlain1) UnmarshalJSON(b []byte) error {
	if x == nil {
		return errors.New("json: Unmarshal: xgo/tests/pb/pbtypes.(*TypeWKTPlain1) is nil")
	}

	var (
		err     error
		isNULL  bool
		decoder *jsondecoder.Decoder
	)
	if decoder, err = jsondecoder.New(b); err != nil {
		return err
	}
	if isNULL, err = decoder.BeforeScanJSON(); err != nil {
		return err
	}
	if isNULL {
		return nil
	}
LOOP_SCAN:
	for { // Loop to scan object.
		var (
			jsonKey string
			isEnd   bool
		)
		if isEnd, err = decoder.BeforeReadJSONKey(); err != nil {
			return err
		}
		if isEnd {
			break LOOP_SCAN
		}
		if jsonKey, err = decoder.ReadJSONKey(); err != nil {
			return err
		}
		switch jsonKey { // match the JSON key
		case "f_any1":
			var vv *anypb.Any
			initFN := func() interface{} {
				if x.FAny1 != nil {
					vv = x.FAny1
				} else {
					vv = new(anypb.Any)
				}
				return vv
			}
			err = decoder.ReadValueInterface(jsonKey, initFN)
			if err != nil {
				return err
			}
			x.FAny1 = vv
		case "f_any2":
			var vv *anypb.Any
			initFN := func() interface{} {
				if x.FAny2 != nil {
					vv = x.FAny2
				} else {
					vv = new(anypb.Any)
				}
				return vv
			}
			err = decoder.ReadValueInterface(jsonKey, initFN)
			if err != nil {
				return err
			}
			x.FAny2 = vv
		case "f_any3":
			var vv *anypb.Any
			if x.FAny3 != nil {
				vv = x.FAny3
			} else {
				vv = new(anypb.Any)
			}
			err = decoder.ReadValueWKTAnyExpand(jsonKey, vv)
			if err != nil {
				return err
			}
			x.FAny3 = vv
		case "f_any4":
			var vv *anypb.Any
			initFN := func() interface{} {
				if x.FAny4 != nil {
					vv = x.FAny4
				} else {
					vv = new(anypb.Any)
				}
				return vv
			}
			err = decoder.ReadValueInterface(jsonKey, initFN)
			if err != nil {
				return err
			}
			x.FAny4 = vv
		case "f_duration11":
			var vv *durationpb.Duration
			initFN := func() interface{} {
				if x.FDuration11 != nil {
					vv = x.FDuration11
				} else {
					vv = new(durationpb.Duration)
				}
				return vv
			}
			err = decoder.ReadValueInterface(jsonKey, initFN)
			if err != nil {
				return err
			}
			x.FDuration11 = vv
		case "f_duration21":
			var vv *durationpb.Duration
			initFN := func() interface{} {
				if x.FDuration21 != nil {
					vv = x.FDuration21
				} else {
					vv = new(durationpb.Duration)
				}
				return vv
			}
			err = decoder.ReadValueInterface(jsonKey, initFN)
			if err != nil {
				return err
			}
			x.FDuration21 = vv
		case "f_duration12":
			var vv *durationpb.Duration
			if x.FDuration12 != nil {
				vv = x.FDuration12
			} else {
				vv = new(durationpb.Duration)
			}
			err = decoder.ReadValueWKTDurationString(jsonKey, vv)
			if err != nil {
				return err
			}
			x.FDuration12 = vv
		case "f_duration22":
			var vv *durationpb.Duration
			initFN := func() interface{} {
				if x.FDuration22 != nil {
					vv = x.FDuration22
				} else {
					vv = new(durationpb.Duration)
				}
				return vv
			}
			err = decoder.ReadValueInterface(jsonKey, initFN)
			if err != nil {
				return err
			}
			x.FDuration22 = vv
		case "f_duration13":
			var vv *durationpb.Duration
			if x.FDuration13 != nil {
				vv = x.FDuration13
			} else {
				vv = new(durationpb.Duration)
			}
			err = decoder.ReadValueWKTDurationNanoseconds(jsonKey, vv)
			if err != nil {
				return err
			}
			x.FDuration13 = vv
		case "f_duration23":
			var vv *durationpb.Duration
			initFN := func() interface{} {
				if x.FDuration23 != nil {
					vv = x.FDuration23
				} else {
					vv = new(durationpb.Duration)
				}
				return vv
			}
			err = decoder.ReadValueInterface(jsonKey, initFN)
			if err != nil {
				return err
			}
			x.FDuration23 = vv
		case "f_duration14":
			var vv *durationpb.Duration
			if x.FDuration14 != nil {
				vv = x.FDuration14
			} else {
				vv = new(durationpb.Duration)
			}
			err = decoder.ReadValueWKTDurationMicroseconds(jsonKey, vv)
			if err != nil {
				return err
			}
			x.FDuration14 = vv
		case "f_duration24":
			var vv *durationpb.Duration
			initFN := func() interface{} {
				if x.FDuration24 != nil {
					vv = x.FDuration24
				} else {
					vv = new(durationpb.Duration)
				}
				return vv
			}
			err = decoder.ReadValueInterface(jsonKey, initFN)
			if err != nil {
				return err
			}
			x.FDuration24 = vv
		case "f_duration15":
			var vv *durationpb.Duration
			if x.FDuration15 != nil {
				vv = x.FDuration15
			} else {
				vv = new(durationpb.Duration)
			}
			err = decoder.ReadValueWKTDurationMilliseconds(jsonKey, vv)
			if err != nil {
				return err
			}
			x.FDuration15 = vv
		case "f_duration25":
			var vv *durationpb.Duration
			initFN := func() interface{} {
				if x.FDuration25 != nil {
					vv = x.FDuration25
				} else {
					vv = new(durationpb.Duration)
				}
				return vv
			}
			err = decoder.ReadValueInterface(jsonKey, initFN)
			if err != nil {
				return err
			}
			x.FDuration25 = vv
		case "f_duration16":
			var vv *durationpb.Duration
			if x.FDuration16 != nil {
				vv = x.FDuration16
			} else {
				vv = new(durationpb.Duration)
			}
			err = decoder.ReadValueWKTDurationSeconds(jsonKey, vv)
			if err != nil {
				return err
			}
			x.FDuration16 = vv
		case "f_duration26":
			var vv *durationpb.Duration
			initFN := func() interface{} {
				if x.FDuration26 != nil {
					vv = x.FDuration26
				} else {
					vv = new(durationpb.Duration)
				}
				return vv
			}
			err = decoder.ReadValueInterface(jsonKey, initFN)
			if err != nil {
				return err
			}
			x.FDuration26 = vv
		case "f_duration17":
			var vv *durationpb.Duration
			if x.FDuration17 != nil {
				vv = x.FDuration17
			} else {
				vv = new(durationpb.Duration)
			}
			err = decoder.ReadValueWKTDurationMinutes(jsonKey, vv)
			if err != nil {
				return err
			}
			x.FDuration17 = vv
		case "f_duration27":
			var vv *durationpb.Duration
			initFN := func() interface{} {
				if x.FDuration27 != nil {
					vv = x.FDuration27
				} else {
					vv = new(durationpb.Duration)
				}
				return vv
			}
			err = decoder.ReadValueInterface(jsonKey, initFN)
			if err != nil {
				return err
			}
			x.FDuration27 = vv
		case "f_duration18":
			var vv *durationpb.Duration
			if x.FDuration18 != nil {
				vv = x.FDuration18
			} else {
				vv = new(durationpb.Duration)
			}
			err = decoder.ReadValueWKTDurationHours(jsonKey, vv)
			if err != nil {
				return err
			}
			x.FDuration18 = vv
		case "f_duration28":
			var vv *durationpb.Duration
			initFN := func() interface{} {
				if x.FDuration28 != nil {
					vv = x.FDuration28
				} else {
					vv = new(durationpb.Duration)
				}
				return vv
			}
			err = decoder.ReadValueInterface(jsonKey, initFN)
			if err != nil {
				return err
			}
			x.FDuration28 = vv
		case "f_timestamp31":
			var vv *timestamppb.Timestamp
			initFN := func() interface{} {
				if x.FTimestamp31 != nil {
					vv = x.FTimestamp31
				} else {
					vv = new(timestamppb.Timestamp)
				}
				return vv
			}
			err = decoder.ReadValueInterface(jsonKey, initFN)
			if err != nil {
				return err
			}
			x.FTimestamp31 = vv
		case "f_timestamp41":
			var vv *timestamppb.Timestamp
			initFN := func() interface{} {
				if x.FTimestamp41 != nil {
					vv = x.FTimestamp41
				} else {
					vv = new(timestamppb.Timestamp)
				}
				return vv
			}
			err = decoder.ReadValueInterface(jsonKey, initFN)
			if err != nil {
				return err
			}
			x.FTimestamp41 = vv
		case "f_timestamp32":
			var vv *timestamppb.Timestamp
			if x.FTimestamp32 != nil {
				vv = x.FTimestamp32
			} else {
				vv = new(timestamppb.Timestamp)
			}
			err = decoder.ReadValueWKTTimestampString(jsonKey, vv, "2006-01-02T15:04:05Z07:00")
			if err != nil {
				return err
			}
			x.FTimestamp32 = vv
		case "f_timestamp42":
			var vv *timestamppb.Timestamp
			if x.FTimestamp42 != nil {
				vv = x.FTimestamp42
			} else {
				vv = new(timestamppb.Timestamp)
			}
			err = decoder.ReadValueWKTTimestampString(jsonKey, vv, "Mon, 02 Jan 2006 15:04:05 MST")
			if err != nil {
				return err
			}
			x.FTimestamp42 = vv
		case "f_timestamp33":
			var vv *timestamppb.Timestamp
			if x.FTimestamp33 != nil {
				vv = x.FTimestamp33
			} else {
				vv = new(timestamppb.Timestamp)
			}
			err = decoder.ReadValueWKTTimestampUnixNano(jsonKey, vv)
			if err != nil {
				return err
			}
			x.FTimestamp33 = vv
		case "f_timestamp43":
			var vv *timestamppb.Timestamp
			initFN := func() interface{} {
				if x.FTimestamp43 != nil {
					vv = x.FTimestamp43
				} else {
					vv = new(timestamppb.Timestamp)
				}
				return vv
			}
			err = decoder.ReadValueInterface(jsonKey, initFN)
			if err != nil {
				return err
			}
			x.FTimestamp43 = vv
		case "f_timestamp34":
			var vv *timestamppb.Timestamp
			if x.FTimestamp34 != nil {
				vv = x.FTimestamp34
			} else {
				vv = new(timestamppb.Timestamp)
			}
			err = decoder.ReadValueWKTTimestampUnixMicro(jsonKey, vv)
			if err != nil {
				return err
			}
			x.FTimestamp34 = vv
		case "f_timestamp44":
			var vv *timestamppb.Timestamp
			initFN := func() interface{} {
				if x.FTimestamp44 != nil {
					vv = x.FTimestamp44
				} else {
					vv = new(timestamppb.Timestamp)
				}
				return vv
			}
			err = decoder.ReadValueInterface(jsonKey, initFN)
			if err != nil {
				return err
			}
			x.FTimestamp44 = vv
		case "f_timestamp35":
			var vv *timestamppb.Timestamp
			if x.FTimestamp35 != nil {
				vv = x.FTimestamp35
			} else {
				vv = new(timestamppb.Timestamp)
			}
			err = decoder.ReadValueWKTTimestampUnixMilli(jsonKey, vv)
			if err != nil {
				return err
			}
			x.FTimestamp35 = vv
		case "f_timestamp45":
			var vv *timestamppb.Timestamp
			initFN := func() interface{} {
				if x.FTimestamp45 != nil {
					vv = x.FTimestamp45
				} else {
					vv = new(timestamppb.Timestamp)
				}
				return vv
			}
			err = decoder.ReadValueInterface(jsonKey, initFN)
			if err != nil {
				return err
			}
			x.FTimestamp45 = vv
		case "f_timestamp36":
			var vv *timestamppb.Timestamp
			if x.FTimestamp36 != nil {
				vv = x.FTimestamp36
			} else {
				vv = new(timestamppb.Timestamp)
			}
			err = decoder.ReadValueWKTTimestampUnixSec(jsonKey, vv)
			if err != nil {
				return err
			}
			x.FTimestamp36 = vv
		case "f_timestamp46":
			var vv *timestamppb.Timestamp
			initFN := func() interface{} {
				if x.FTimestamp46 != nil {
					vv = x.FTimestamp46
				} else {
					vv = new(timestamppb.Timestamp)
				}
				return vv
			}
			err = decoder.ReadValueInterface(jsonKey, initFN)
			if err != nil {
				return err
			}
			x.FTimestamp46 = vv
		default:
			if err = decoder.DiscardValue(jsonKey); err != nil {
				return err
			}
		}
	}
	return nil
}
