// Code generated by protoc-gen-gojson. DO NOT EDIT.
// versions:
// 		protoc-gen-gojson 0.0.1
// source: tests/proto/benchmark/benchmark.proto

package pbbenchmark

import (
	errors "errors"
	_ "github.com/yu31/protoc-plugin-json/xgo/pb/pbjson"
	jsondecoder "github.com/yu31/protoc-plugin-json/xgo/pkg/jsondecoder"
	jsonencoder "github.com/yu31/protoc-plugin-json/xgo/pkg/jsonencoder"
)

// MarshalJSON implements interface json.Marshaler for proto message Message1 in file tests/proto/benchmark/benchmark.proto
func (x *Message1) MarshalJSON() ([]byte, error) {
	if x == nil {
		return []byte("null"), nil
	}
	enc := jsonencoder.New(136)
	enc.AppendObjectBegin() // Add begin JSON identifier

	jsonencoder.AppendValStr(enc, "f_string1", x.FString1, false)
	jsonencoder.AppendValStr(enc, "f_string2", x.FString2, false)
	jsonencoder.AppendValStr(enc, "f_string3", x.FString3, false)
	enc.AppendObjectEnd() // Add end JSON identifier
	return enc.Bytes(), nil
}

// UnmarshalJSON implements json.Unmarshaler for proto message Message1 in file tests/proto/benchmark/benchmark.proto
func (x *Message1) UnmarshalJSON(b []byte) error {
	if x == nil {
		return errors.New("json: Unmarshal: xgo/tests/pb/pbbenchmark.(*Message1) is nil")
	}
	var (
		err    error
		isNULL bool
		dec    *jsondecoder.Decoder
	)
	if dec, err = jsondecoder.New(b); err != nil {
		return err
	}
	if isNULL, err = dec.BeforeScanJSON(); err != nil || isNULL {
		return err
	}
LOOP_SCAN:
	for { // Loop to read the JSON objects
		var (
			jsonKey string
			isEnd   bool
		)

		if isEnd, err = dec.BeforeScanNext(); err != nil {
			return err
		}
		if isEnd {
			break LOOP_SCAN
		}

		if jsonKey, err = dec.ReadJSONKey(); err != nil {
			return err
		}
		switch jsonKey { // match the jsonKey
		case "f_string1":
			if x.FString1, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_string2":
			if x.FString2, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_string3":
			if x.FString3, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		default:
			if err = dec.DiscardValue(); err != nil {
				return err
			}
		} // end switch
	}
	return nil
}

// MarshalJSON implements interface json.Marshaler for proto message BenchModelSimple in file tests/proto/benchmark/benchmark.proto
func (x *BenchModelSimple) MarshalJSON() ([]byte, error) {
	if x == nil {
		return []byte("null"), nil
	}
	enc := jsonencoder.New(624)
	enc.AppendObjectBegin() // Add begin JSON identifier

	jsonencoder.AppendValStr(enc, "f_string1", x.FString1, false)
	jsonencoder.AppendValStr(enc, "f_string2", x.FString2, false)
	jsonencoder.AppendValStr(enc, "f_string3", x.FString3, false)
	jsonencoder.AppendValStr(enc, "f_string4", x.FString4, false)
	jsonencoder.AppendValStr(enc, "f_string5", x.FString5, false)
	jsonencoder.AppendValStr(enc, "f_string6", x.FString6, false)
	jsonencoder.AppendValStr(enc, "f_string7", x.FString7, false)
	jsonencoder.AppendValStr(enc, "f_string8", x.FString8, false)
	jsonencoder.AppendValStr(enc, "f_string9", x.FString9, false)
	jsonencoder.AppendValI32(enc, "f_int32", x.FInt32, false, false)
	jsonencoder.AppendValI64(enc, "f_int64", x.FInt64, false, false)
	jsonencoder.AppendValU32(enc, "f_uint32", x.FUint32, false, false)
	jsonencoder.AppendValU64(enc, "f_uint64", x.FUint64, false, false)
	jsonencoder.AppendValI32(enc, "f_sint32", x.FSint32, false, false)
	jsonencoder.AppendValI64(enc, "f_sint64", x.FSint64, false, false)
	jsonencoder.AppendValI32(enc, "f_sfixed32", x.FSfixed32, false, false)
	jsonencoder.AppendValI64(enc, "f_sfixed64", x.FSfixed64, false, false)
	jsonencoder.AppendValU32(enc, "f_fixed32", x.FFixed32, false, false)
	jsonencoder.AppendValU64(enc, "f_fixed64", x.FFixed64, false, false)
	jsonencoder.AppendValF32(enc, "f_float", x.FFloat, false, false)
	jsonencoder.AppendValF64(enc, "f_double", x.FDouble, false, false)
	jsonencoder.AppendValBool(enc, "f_bool1", x.FBool1, false, false)
	jsonencoder.AppendValBool(enc, "f_bool2", x.FBool2, false, false)
	jsonencoder.AppendValBool(enc, "f_bool3", x.FBool3, false, false)
	enc.AppendObjectEnd() // Add end JSON identifier
	return enc.Bytes(), nil
}

// UnmarshalJSON implements json.Unmarshaler for proto message BenchModelSimple in file tests/proto/benchmark/benchmark.proto
func (x *BenchModelSimple) UnmarshalJSON(b []byte) error {
	if x == nil {
		return errors.New("json: Unmarshal: xgo/tests/pb/pbbenchmark.(*BenchModelSimple) is nil")
	}
	var (
		err    error
		isNULL bool
		dec    *jsondecoder.Decoder
	)
	if dec, err = jsondecoder.New(b); err != nil {
		return err
	}
	if isNULL, err = dec.BeforeScanJSON(); err != nil || isNULL {
		return err
	}
LOOP_SCAN:
	for { // Loop to read the JSON objects
		var (
			jsonKey string
			isEnd   bool
		)

		if isEnd, err = dec.BeforeScanNext(); err != nil {
			return err
		}
		if isEnd {
			break LOOP_SCAN
		}

		if jsonKey, err = dec.ReadJSONKey(); err != nil {
			return err
		}
		switch jsonKey { // match the jsonKey
		case "f_string1":
			if x.FString1, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_string2":
			if x.FString2, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_string3":
			if x.FString3, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_string4":
			if x.FString4, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_string5":
			if x.FString5, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_string6":
			if x.FString6, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_string7":
			if x.FString7, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_string8":
			if x.FString8, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_string9":
			if x.FString9, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_int32":
			if x.FInt32, err = jsondecoder.ReadValI32(dec, false); err != nil {
				return err
			}
		case "f_int64":
			if x.FInt64, err = jsondecoder.ReadValI64(dec, false); err != nil {
				return err
			}
		case "f_uint32":
			if x.FUint32, err = jsondecoder.ReadValU32(dec, false); err != nil {
				return err
			}
		case "f_uint64":
			if x.FUint64, err = jsondecoder.ReadValU64(dec, false); err != nil {
				return err
			}
		case "f_sint32":
			if x.FSint32, err = jsondecoder.ReadValI32(dec, false); err != nil {
				return err
			}
		case "f_sint64":
			if x.FSint64, err = jsondecoder.ReadValI64(dec, false); err != nil {
				return err
			}
		case "f_sfixed32":
			if x.FSfixed32, err = jsondecoder.ReadValI32(dec, false); err != nil {
				return err
			}
		case "f_sfixed64":
			if x.FSfixed64, err = jsondecoder.ReadValI64(dec, false); err != nil {
				return err
			}
		case "f_fixed32":
			if x.FFixed32, err = jsondecoder.ReadValU32(dec, false); err != nil {
				return err
			}
		case "f_fixed64":
			if x.FFixed64, err = jsondecoder.ReadValU64(dec, false); err != nil {
				return err
			}
		case "f_float":
			if x.FFloat, err = jsondecoder.ReadValF32(dec, false); err != nil {
				return err
			}
		case "f_double":
			if x.FDouble, err = jsondecoder.ReadValF64(dec, false); err != nil {
				return err
			}
		case "f_bool1":
			if x.FBool1, err = jsondecoder.ReadValBool(dec, false); err != nil {
				return err
			}
		case "f_bool2":
			if x.FBool2, err = jsondecoder.ReadValBool(dec, false); err != nil {
				return err
			}
		case "f_bool3":
			if x.FBool3, err = jsondecoder.ReadValBool(dec, false); err != nil {
				return err
			}
		default:
			if err = dec.DiscardValue(); err != nil {
				return err
			}
		} // end switch
	}
	return nil
}

// MarshalJSON implements interface json.Marshaler for proto message BenchModelComplex in file tests/proto/benchmark/benchmark.proto
func (x *BenchModelComplex) MarshalJSON() ([]byte, error) {
	if x == nil {
		return []byte("null"), nil
	}
	enc := jsonencoder.New(33232)
	enc.AppendObjectBegin() // Add begin JSON identifier

	jsonencoder.AppendValStr(enc, "f_string1", x.FString1, false)
	jsonencoder.AppendValStr(enc, "f_string2", x.FString2, false)
	jsonencoder.AppendValStr(enc, "f_string3", x.FString3, false)
	jsonencoder.AppendValStr(enc, "f_string4", x.FString4, false)
	jsonencoder.AppendValStr(enc, "f_string5", x.FString5, false)
	jsonencoder.AppendValStr(enc, "f_string6", x.FString6, false)
	jsonencoder.AppendValStr(enc, "f_string7", x.FString7, false)
	jsonencoder.AppendValStr(enc, "f_string8", x.FString8, false)
	jsonencoder.AppendValStr(enc, "f_string9", x.FString9, false)
	jsonencoder.AppendValI32(enc, "f_int32", x.FInt32, false, false)
	jsonencoder.AppendValI64(enc, "f_int64", x.FInt64, false, false)
	jsonencoder.AppendValU32(enc, "f_uint32", x.FUint32, false, false)
	jsonencoder.AppendValU64(enc, "f_uint64", x.FUint64, false, false)
	jsonencoder.AppendValI32(enc, "f_sint32", x.FSint32, false, false)
	jsonencoder.AppendValI64(enc, "f_sint64", x.FSint64, false, false)
	jsonencoder.AppendValI32(enc, "f_sfixed32", x.FSfixed32, false, false)
	jsonencoder.AppendValI64(enc, "f_sfixed64", x.FSfixed64, false, false)
	jsonencoder.AppendValU32(enc, "f_fixed32", x.FFixed32, false, false)
	jsonencoder.AppendValU64(enc, "f_fixed64", x.FFixed64, false, false)
	jsonencoder.AppendValF32(enc, "f_float", x.FFloat, false, false)
	jsonencoder.AppendValF64(enc, "f_double", x.FDouble, false, false)
	jsonencoder.AppendValBool(enc, "f_bool1", x.FBool1, false, false)
	jsonencoder.AppendValBool(enc, "f_bool2", x.FBool2, false, false)
	jsonencoder.AppendValBool(enc, "f_bool3", x.FBool3, false, false)
	if err := jsonencoder.AppendValBytes(enc, "f_bytes1", x.FBytes1, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendValBytes(enc, "f_bytes2", x.FBytes2, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendValBytes(enc, "f_bytes3", x.FBytes3, false); err != nil {
		return nil, err
	}
	jsonencoder.AppendValEnumNum(enc, "f_enum1", x.FEnum1, false, false)
	jsonencoder.AppendValEnumNum(enc, "f_enum2", x.FEnum2, false, false)
	jsonencoder.AppendValEnumNum(enc, "f_enum3", x.FEnum3, false, false)
	jsonencoder.AppendValEnumNum(enc, "f_enum4", x.FEnum4, false, false)
	jsonencoder.AppendValEnumNum(enc, "f_enum5", x.FEnum5, false, false)
	jsonencoder.AppendValEnumNum(enc, "f_enum6", x.FEnum6, false, false)
	jsonencoder.AppendValEnumNum(enc, "f_enum7", x.FEnum7, false, false)
	if err := jsonencoder.AppendValMessage(enc, "f_message1", x.FMessage1, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendValMessage(enc, "f_message2", x.FMessage2, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendValMessage(enc, "f_message3", x.FMessage3, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendValMessage(enc, "f_message4", x.FMessage4, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendValMessage(enc, "f_message5", x.FMessage5, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendValMessage(enc, "f_message6", x.FMessage6, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendValMessage(enc, "f_message7", x.FMessage7, false); err != nil {
		return nil, err
	}
	jsonencoder.AppendPtrStr(enc, "p_string1", x.PString1, false)
	jsonencoder.AppendPtrStr(enc, "p_string2", x.PString2, false)
	jsonencoder.AppendPtrStr(enc, "p_string3", x.PString3, false)
	jsonencoder.AppendPtrStr(enc, "p_string4", x.PString4, false)
	jsonencoder.AppendPtrStr(enc, "p_string5", x.PString5, false)
	jsonencoder.AppendPtrStr(enc, "p_string6", x.PString6, false)
	jsonencoder.AppendPtrStr(enc, "p_string7", x.PString7, false)
	jsonencoder.AppendPtrStr(enc, "p_string8", x.PString8, false)
	jsonencoder.AppendPtrStr(enc, "p_string9", x.PString9, false)
	jsonencoder.AppendPtrI32(enc, "p_int32", x.PInt32, false, false)
	jsonencoder.AppendPtrI64(enc, "p_int64", x.PInt64, false, false)
	jsonencoder.AppendPtrU32(enc, "p_uint32", x.PUint32, false, false)
	jsonencoder.AppendPtrU64(enc, "p_uint64", x.PUint64, false, false)
	jsonencoder.AppendPtrI32(enc, "p_sint32", x.PSint32, false, false)
	jsonencoder.AppendPtrI64(enc, "p_sint64", x.PSint64, false, false)
	jsonencoder.AppendPtrI32(enc, "p_sfixed32", x.PSfixed32, false, false)
	jsonencoder.AppendPtrI64(enc, "p_sfixed64", x.PSfixed64, false, false)
	jsonencoder.AppendPtrU32(enc, "p_fixed32", x.PFixed32, false, false)
	jsonencoder.AppendPtrU64(enc, "p_fixed64", x.PFixed64, false, false)
	jsonencoder.AppendPtrF32(enc, "p_float", x.PFloat, false, false)
	jsonencoder.AppendPtrF64(enc, "p_double", x.PDouble, false, false)
	jsonencoder.AppendPtrBool(enc, "p_bool1", x.PBool1, false, false)
	jsonencoder.AppendPtrBool(enc, "p_bool2", x.PBool2, false, false)
	jsonencoder.AppendPtrBool(enc, "p_bool3", x.PBool3, false, false)
	if err := jsonencoder.AppendValBytes(enc, "p_bytes1", x.PBytes1, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendValBytes(enc, "p_bytes2", x.PBytes2, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendValBytes(enc, "p_bytes3", x.PBytes3, false); err != nil {
		return nil, err
	}
	jsonencoder.AppendPtrEnumNum(enc, "p_enum1", x.PEnum1, false, false)
	jsonencoder.AppendPtrEnumNum(enc, "p_enum2", x.PEnum2, false, false)
	jsonencoder.AppendPtrEnumNum(enc, "p_enum3", x.PEnum3, false, false)
	jsonencoder.AppendPtrEnumNum(enc, "p_enum4", x.PEnum4, false, false)
	jsonencoder.AppendPtrEnumNum(enc, "p_enum5", x.PEnum5, false, false)
	jsonencoder.AppendPtrEnumNum(enc, "p_enum6", x.PEnum6, false, false)
	jsonencoder.AppendPtrEnumNum(enc, "p_enum7", x.PEnum7, false, false)
	if err := jsonencoder.AppendValMessage(enc, "p_message1", x.PMessage1, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendValMessage(enc, "p_message2", x.PMessage2, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendValMessage(enc, "p_message3", x.PMessage3, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendValMessage(enc, "p_message4", x.PMessage4, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendValMessage(enc, "p_message5", x.PMessage5, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendValMessage(enc, "p_message6", x.PMessage6, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendValMessage(enc, "p_message7", x.PMessage7, false); err != nil {
		return nil, err
	}
	jsonencoder.AppendListStr(enc, "r_string1", x.RString1, false)
	jsonencoder.AppendListStr(enc, "r_string2", x.RString2, false)
	jsonencoder.AppendListStr(enc, "r_string3", x.RString3, false)
	jsonencoder.AppendListStr(enc, "r_string4", x.RString4, false)
	jsonencoder.AppendListStr(enc, "r_string5", x.RString5, false)
	jsonencoder.AppendListStr(enc, "r_string6", x.RString6, false)
	jsonencoder.AppendListStr(enc, "r_string7", x.RString7, false)
	jsonencoder.AppendListStr(enc, "r_string8", x.RString8, false)
	jsonencoder.AppendListStr(enc, "r_string9", x.RString9, false)
	jsonencoder.AppendListI32(enc, "r_int32", x.RInt32, false, false)
	jsonencoder.AppendListI64(enc, "r_int64", x.RInt64, false, false)
	jsonencoder.AppendListU32(enc, "r_uint32", x.RUint32, false, false)
	jsonencoder.AppendListU64(enc, "r_uint64", x.RUint64, false, false)
	jsonencoder.AppendListI32(enc, "r_sint32", x.RSint32, false, false)
	jsonencoder.AppendListI64(enc, "r_sint64", x.RSint64, false, false)
	jsonencoder.AppendListI32(enc, "r_sfixed32", x.RSfixed32, false, false)
	jsonencoder.AppendListI64(enc, "r_sfixed64", x.RSfixed64, false, false)
	jsonencoder.AppendListU32(enc, "r_fixed32", x.RFixed32, false, false)
	jsonencoder.AppendListU64(enc, "r_fixed64", x.RFixed64, false, false)
	jsonencoder.AppendListF32(enc, "r_float", x.RFloat, false, false)
	jsonencoder.AppendListF64(enc, "r_double", x.RDouble, false, false)
	jsonencoder.AppendListBool(enc, "r_bool1", x.RBool1, false, false)
	jsonencoder.AppendListBool(enc, "r_bool2", x.RBool2, false, false)
	jsonencoder.AppendListBool(enc, "r_bool3", x.RBool3, false, false)
	if err := jsonencoder.AppendListBytes(enc, "r_bytes1", x.RBytes1, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendListBytes(enc, "r_bytes2", x.RBytes2, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendListBytes(enc, "r_bytes3", x.RBytes3, false); err != nil {
		return nil, err
	}
	jsonencoder.AppendListEnumNum(enc, "r_enum1", x.REnum1, false, false)
	jsonencoder.AppendListEnumNum(enc, "r_enum2", x.REnum2, false, false)
	jsonencoder.AppendListEnumNum(enc, "r_enum3", x.REnum3, false, false)
	jsonencoder.AppendListEnumNum(enc, "r_enum4", x.REnum4, false, false)
	jsonencoder.AppendListEnumNum(enc, "r_enum5", x.REnum5, false, false)
	jsonencoder.AppendListEnumNum(enc, "r_enum6", x.REnum6, false, false)
	jsonencoder.AppendListEnumNum(enc, "r_enum7", x.REnum7, false, false)
	if err := jsonencoder.AppendListMessage(enc, "r_message1", x.RMessage1, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendListMessage(enc, "r_message2", x.RMessage2, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendListMessage(enc, "r_message3", x.RMessage3, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendListMessage(enc, "r_message4", x.RMessage4, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendListMessage(enc, "r_message5", x.RMessage5, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendListMessage(enc, "r_message6", x.RMessage6, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendListMessage(enc, "r_message7", x.RMessage7, false); err != nil {
		return nil, err
	}
	jsonencoder.AppendMapStrStr(enc, "m_string1", x.MString1, false)
	jsonencoder.AppendMapStrStr(enc, "m_string2", x.MString2, false)
	jsonencoder.AppendMapStrStr(enc, "m_string3", x.MString3, false)
	jsonencoder.AppendMapStrStr(enc, "m_string4", x.MString4, false)
	jsonencoder.AppendMapStrStr(enc, "m_string5", x.MString5, false)
	jsonencoder.AppendMapStrStr(enc, "m_string6", x.MString6, false)
	jsonencoder.AppendMapStrStr(enc, "m_string7", x.MString7, false)
	jsonencoder.AppendMapStrStr(enc, "m_string8", x.MString8, false)
	jsonencoder.AppendMapStrStr(enc, "m_string9", x.MString9, false)
	jsonencoder.AppendMapStrI32(enc, "m_int32", x.MInt32, false, false)
	jsonencoder.AppendMapStrI64(enc, "m_int64", x.MInt64, false, false)
	jsonencoder.AppendMapStrU32(enc, "m_uint32", x.MUint32, false, false)
	jsonencoder.AppendMapStrU64(enc, "m_uint64", x.MUint64, false, false)
	jsonencoder.AppendMapStrI32(enc, "m_sint32", x.MSint32, false, false)
	jsonencoder.AppendMapStrI64(enc, "m_sint64", x.MSint64, false, false)
	jsonencoder.AppendMapStrI32(enc, "m_sfixed32", x.MSfixed32, false, false)
	jsonencoder.AppendMapStrI64(enc, "m_sfixed64", x.MSfixed64, false, false)
	jsonencoder.AppendMapStrU32(enc, "m_fixed32", x.MFixed32, false, false)
	jsonencoder.AppendMapStrU64(enc, "m_fixed64", x.MFixed64, false, false)
	jsonencoder.AppendMapStrF32(enc, "m_float", x.MFloat, false, false)
	jsonencoder.AppendMapStrF64(enc, "m_double", x.MDouble, false, false)
	jsonencoder.AppendMapStrBool(enc, "m_bool1", x.MBool1, false, false)
	jsonencoder.AppendMapStrBool(enc, "m_bool2", x.MBool2, false, false)
	jsonencoder.AppendMapStrBool(enc, "m_bool3", x.MBool3, false, false)
	if err := jsonencoder.AppendMapStrBytes(enc, "m_bytes1", x.MBytes1, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapStrBytes(enc, "m_bytes2", x.MBytes2, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapStrBytes(enc, "m_bytes3", x.MBytes3, false); err != nil {
		return nil, err
	}
	jsonencoder.AppendMapStrEnumNum(enc, "m_enum1", x.MEnum1, false, false)
	jsonencoder.AppendMapStrEnumNum(enc, "m_enum2", x.MEnum2, false, false)
	jsonencoder.AppendMapStrEnumNum(enc, "m_enum3", x.MEnum3, false, false)
	jsonencoder.AppendMapStrEnumNum(enc, "m_enum4", x.MEnum4, false, false)
	jsonencoder.AppendMapStrEnumNum(enc, "m_enum5", x.MEnum5, false, false)
	jsonencoder.AppendMapStrEnumNum(enc, "m_enum6", x.MEnum6, false, false)
	jsonencoder.AppendMapStrEnumNum(enc, "m_enum7", x.MEnum7, false, false)
	if err := jsonencoder.AppendMapStrMessage(enc, "m_message1", x.MMessage1, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapStrMessage(enc, "m_message2", x.MMessage2, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapStrMessage(enc, "m_message3", x.MMessage3, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapStrMessage(enc, "m_message4", x.MMessage4, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapStrMessage(enc, "m_message5", x.MMessage5, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapStrMessage(enc, "m_message6", x.MMessage6, false); err != nil {
		return nil, err
	}
	if err := jsonencoder.AppendMapStrMessage(enc, "m_message7", x.MMessage7, false); err != nil {
		return nil, err
	}
	enc.AppendObjectEnd() // Add end JSON identifier
	return enc.Bytes(), nil
}

// UnmarshalJSON implements json.Unmarshaler for proto message BenchModelComplex in file tests/proto/benchmark/benchmark.proto
func (x *BenchModelComplex) UnmarshalJSON(b []byte) error {
	if x == nil {
		return errors.New("json: Unmarshal: xgo/tests/pb/pbbenchmark.(*BenchModelComplex) is nil")
	}
	var (
		err    error
		isNULL bool
		dec    *jsondecoder.Decoder
	)
	if dec, err = jsondecoder.New(b); err != nil {
		return err
	}
	if isNULL, err = dec.BeforeScanJSON(); err != nil || isNULL {
		return err
	}
LOOP_SCAN:
	for { // Loop to read the JSON objects
		var (
			jsonKey string
			isEnd   bool
		)

		if isEnd, err = dec.BeforeScanNext(); err != nil {
			return err
		}
		if isEnd {
			break LOOP_SCAN
		}

		if jsonKey, err = dec.ReadJSONKey(); err != nil {
			return err
		}
		switch jsonKey { // match the jsonKey
		case "f_string1":
			if x.FString1, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_string2":
			if x.FString2, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_string3":
			if x.FString3, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_string4":
			if x.FString4, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_string5":
			if x.FString5, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_string6":
			if x.FString6, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_string7":
			if x.FString7, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_string8":
			if x.FString8, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_string9":
			if x.FString9, err = jsondecoder.ReadValStr(dec); err != nil {
				return err
			}
		case "f_int32":
			if x.FInt32, err = jsondecoder.ReadValI32(dec, false); err != nil {
				return err
			}
		case "f_int64":
			if x.FInt64, err = jsondecoder.ReadValI64(dec, false); err != nil {
				return err
			}
		case "f_uint32":
			if x.FUint32, err = jsondecoder.ReadValU32(dec, false); err != nil {
				return err
			}
		case "f_uint64":
			if x.FUint64, err = jsondecoder.ReadValU64(dec, false); err != nil {
				return err
			}
		case "f_sint32":
			if x.FSint32, err = jsondecoder.ReadValI32(dec, false); err != nil {
				return err
			}
		case "f_sint64":
			if x.FSint64, err = jsondecoder.ReadValI64(dec, false); err != nil {
				return err
			}
		case "f_sfixed32":
			if x.FSfixed32, err = jsondecoder.ReadValI32(dec, false); err != nil {
				return err
			}
		case "f_sfixed64":
			if x.FSfixed64, err = jsondecoder.ReadValI64(dec, false); err != nil {
				return err
			}
		case "f_fixed32":
			if x.FFixed32, err = jsondecoder.ReadValU32(dec, false); err != nil {
				return err
			}
		case "f_fixed64":
			if x.FFixed64, err = jsondecoder.ReadValU64(dec, false); err != nil {
				return err
			}
		case "f_float":
			if x.FFloat, err = jsondecoder.ReadValF32(dec, false); err != nil {
				return err
			}
		case "f_double":
			if x.FDouble, err = jsondecoder.ReadValF64(dec, false); err != nil {
				return err
			}
		case "f_bool1":
			if x.FBool1, err = jsondecoder.ReadValBool(dec, false); err != nil {
				return err
			}
		case "f_bool2":
			if x.FBool2, err = jsondecoder.ReadValBool(dec, false); err != nil {
				return err
			}
		case "f_bool3":
			if x.FBool3, err = jsondecoder.ReadValBool(dec, false); err != nil {
				return err
			}
		case "f_bytes1":
			if x.FBytes1, err = jsondecoder.ReadValBytes(dec); err != nil {
				return err
			}
		case "f_bytes2":
			if x.FBytes2, err = jsondecoder.ReadValBytes(dec); err != nil {
				return err
			}
		case "f_bytes3":
			if x.FBytes3, err = jsondecoder.ReadValBytes(dec); err != nil {
				return err
			}
		case "f_enum1":
			if x.FEnum1, err = jsondecoder.ReadValEnumNum(dec, x.FEnum1, false); err != nil {
				return err
			}
		case "f_enum2":
			if x.FEnum2, err = jsondecoder.ReadValEnumNum(dec, x.FEnum2, false); err != nil {
				return err
			}
		case "f_enum3":
			if x.FEnum3, err = jsondecoder.ReadValEnumNum(dec, x.FEnum3, false); err != nil {
				return err
			}
		case "f_enum4":
			if x.FEnum4, err = jsondecoder.ReadValEnumNum(dec, x.FEnum4, false); err != nil {
				return err
			}
		case "f_enum5":
			if x.FEnum5, err = jsondecoder.ReadValEnumNum(dec, x.FEnum5, false); err != nil {
				return err
			}
		case "f_enum6":
			if x.FEnum6, err = jsondecoder.ReadValEnumNum(dec, x.FEnum6, false); err != nil {
				return err
			}
		case "f_enum7":
			if x.FEnum7, err = jsondecoder.ReadValEnumNum(dec, x.FEnum7, false); err != nil {
				return err
			}
		case "f_message1":
			if x.FMessage1, err = jsondecoder.ReadValMessage(dec, x.FMessage1); err != nil {
				return err
			}
		case "f_message2":
			if x.FMessage2, err = jsondecoder.ReadValMessage(dec, x.FMessage2); err != nil {
				return err
			}
		case "f_message3":
			if x.FMessage3, err = jsondecoder.ReadValMessage(dec, x.FMessage3); err != nil {
				return err
			}
		case "f_message4":
			if x.FMessage4, err = jsondecoder.ReadValMessage(dec, x.FMessage4); err != nil {
				return err
			}
		case "f_message5":
			if x.FMessage5, err = jsondecoder.ReadValMessage(dec, x.FMessage5); err != nil {
				return err
			}
		case "f_message6":
			if x.FMessage6, err = jsondecoder.ReadValMessage(dec, x.FMessage6); err != nil {
				return err
			}
		case "f_message7":
			if x.FMessage7, err = jsondecoder.ReadValMessage(dec, x.FMessage7); err != nil {
				return err
			}
		case "p_string1":
			if x.PString1, err = jsondecoder.ReadPtrStr(dec); err != nil {
				return err
			}
		case "p_string2":
			if x.PString2, err = jsondecoder.ReadPtrStr(dec); err != nil {
				return err
			}
		case "p_string3":
			if x.PString3, err = jsondecoder.ReadPtrStr(dec); err != nil {
				return err
			}
		case "p_string4":
			if x.PString4, err = jsondecoder.ReadPtrStr(dec); err != nil {
				return err
			}
		case "p_string5":
			if x.PString5, err = jsondecoder.ReadPtrStr(dec); err != nil {
				return err
			}
		case "p_string6":
			if x.PString6, err = jsondecoder.ReadPtrStr(dec); err != nil {
				return err
			}
		case "p_string7":
			if x.PString7, err = jsondecoder.ReadPtrStr(dec); err != nil {
				return err
			}
		case "p_string8":
			if x.PString8, err = jsondecoder.ReadPtrStr(dec); err != nil {
				return err
			}
		case "p_string9":
			if x.PString9, err = jsondecoder.ReadPtrStr(dec); err != nil {
				return err
			}
		case "p_int32":
			if x.PInt32, err = jsondecoder.ReadPtrI32(dec, false); err != nil {
				return err
			}
		case "p_int64":
			if x.PInt64, err = jsondecoder.ReadPtrI64(dec, false); err != nil {
				return err
			}
		case "p_uint32":
			if x.PUint32, err = jsondecoder.ReadPtrU32(dec, false); err != nil {
				return err
			}
		case "p_uint64":
			if x.PUint64, err = jsondecoder.ReadPtrU64(dec, false); err != nil {
				return err
			}
		case "p_sint32":
			if x.PSint32, err = jsondecoder.ReadPtrI32(dec, false); err != nil {
				return err
			}
		case "p_sint64":
			if x.PSint64, err = jsondecoder.ReadPtrI64(dec, false); err != nil {
				return err
			}
		case "p_sfixed32":
			if x.PSfixed32, err = jsondecoder.ReadPtrI32(dec, false); err != nil {
				return err
			}
		case "p_sfixed64":
			if x.PSfixed64, err = jsondecoder.ReadPtrI64(dec, false); err != nil {
				return err
			}
		case "p_fixed32":
			if x.PFixed32, err = jsondecoder.ReadPtrU32(dec, false); err != nil {
				return err
			}
		case "p_fixed64":
			if x.PFixed64, err = jsondecoder.ReadPtrU64(dec, false); err != nil {
				return err
			}
		case "p_float":
			if x.PFloat, err = jsondecoder.ReadPtrF32(dec, false); err != nil {
				return err
			}
		case "p_double":
			if x.PDouble, err = jsondecoder.ReadPtrF64(dec, false); err != nil {
				return err
			}
		case "p_bool1":
			if x.PBool1, err = jsondecoder.ReadPtrBool(dec, false); err != nil {
				return err
			}
		case "p_bool2":
			if x.PBool2, err = jsondecoder.ReadPtrBool(dec, false); err != nil {
				return err
			}
		case "p_bool3":
			if x.PBool3, err = jsondecoder.ReadPtrBool(dec, false); err != nil {
				return err
			}
		case "p_bytes1":
			if x.PBytes1, err = jsondecoder.ReadValBytes(dec); err != nil {
				return err
			}
		case "p_bytes2":
			if x.PBytes2, err = jsondecoder.ReadValBytes(dec); err != nil {
				return err
			}
		case "p_bytes3":
			if x.PBytes3, err = jsondecoder.ReadValBytes(dec); err != nil {
				return err
			}
		case "p_enum1":
			if x.PEnum1, err = jsondecoder.ReadPtrEnumNum(dec, x.PEnum1, false); err != nil {
				return err
			}
		case "p_enum2":
			if x.PEnum2, err = jsondecoder.ReadPtrEnumNum(dec, x.PEnum2, false); err != nil {
				return err
			}
		case "p_enum3":
			if x.PEnum3, err = jsondecoder.ReadPtrEnumNum(dec, x.PEnum3, false); err != nil {
				return err
			}
		case "p_enum4":
			if x.PEnum4, err = jsondecoder.ReadPtrEnumNum(dec, x.PEnum4, false); err != nil {
				return err
			}
		case "p_enum5":
			if x.PEnum5, err = jsondecoder.ReadPtrEnumNum(dec, x.PEnum5, false); err != nil {
				return err
			}
		case "p_enum6":
			if x.PEnum6, err = jsondecoder.ReadPtrEnumNum(dec, x.PEnum6, false); err != nil {
				return err
			}
		case "p_enum7":
			if x.PEnum7, err = jsondecoder.ReadPtrEnumNum(dec, x.PEnum7, false); err != nil {
				return err
			}
		case "p_message1":
			if x.PMessage1, err = jsondecoder.ReadValMessage(dec, x.PMessage1); err != nil {
				return err
			}
		case "p_message2":
			if x.PMessage2, err = jsondecoder.ReadValMessage(dec, x.PMessage2); err != nil {
				return err
			}
		case "p_message3":
			if x.PMessage3, err = jsondecoder.ReadValMessage(dec, x.PMessage3); err != nil {
				return err
			}
		case "p_message4":
			if x.PMessage4, err = jsondecoder.ReadValMessage(dec, x.PMessage4); err != nil {
				return err
			}
		case "p_message5":
			if x.PMessage5, err = jsondecoder.ReadValMessage(dec, x.PMessage5); err != nil {
				return err
			}
		case "p_message6":
			if x.PMessage6, err = jsondecoder.ReadValMessage(dec, x.PMessage6); err != nil {
				return err
			}
		case "p_message7":
			if x.PMessage7, err = jsondecoder.ReadValMessage(dec, x.PMessage7); err != nil {
				return err
			}
		case "r_string1":
			if x.RString1, err = jsondecoder.ReadListStr(dec, x.RString1); err != nil {
				return err
			}
		case "r_string2":
			if x.RString2, err = jsondecoder.ReadListStr(dec, x.RString2); err != nil {
				return err
			}
		case "r_string3":
			if x.RString3, err = jsondecoder.ReadListStr(dec, x.RString3); err != nil {
				return err
			}
		case "r_string4":
			if x.RString4, err = jsondecoder.ReadListStr(dec, x.RString4); err != nil {
				return err
			}
		case "r_string5":
			if x.RString5, err = jsondecoder.ReadListStr(dec, x.RString5); err != nil {
				return err
			}
		case "r_string6":
			if x.RString6, err = jsondecoder.ReadListStr(dec, x.RString6); err != nil {
				return err
			}
		case "r_string7":
			if x.RString7, err = jsondecoder.ReadListStr(dec, x.RString7); err != nil {
				return err
			}
		case "r_string8":
			if x.RString8, err = jsondecoder.ReadListStr(dec, x.RString8); err != nil {
				return err
			}
		case "r_string9":
			if x.RString9, err = jsondecoder.ReadListStr(dec, x.RString9); err != nil {
				return err
			}
		case "r_int32":
			if x.RInt32, err = jsondecoder.ReadListI32(dec, x.RInt32, false); err != nil {
				return err
			}
		case "r_int64":
			if x.RInt64, err = jsondecoder.ReadListI64(dec, x.RInt64, false); err != nil {
				return err
			}
		case "r_uint32":
			if x.RUint32, err = jsondecoder.ReadListU32(dec, x.RUint32, false); err != nil {
				return err
			}
		case "r_uint64":
			if x.RUint64, err = jsondecoder.ReadListU64(dec, x.RUint64, false); err != nil {
				return err
			}
		case "r_sint32":
			if x.RSint32, err = jsondecoder.ReadListI32(dec, x.RSint32, false); err != nil {
				return err
			}
		case "r_sint64":
			if x.RSint64, err = jsondecoder.ReadListI64(dec, x.RSint64, false); err != nil {
				return err
			}
		case "r_sfixed32":
			if x.RSfixed32, err = jsondecoder.ReadListI32(dec, x.RSfixed32, false); err != nil {
				return err
			}
		case "r_sfixed64":
			if x.RSfixed64, err = jsondecoder.ReadListI64(dec, x.RSfixed64, false); err != nil {
				return err
			}
		case "r_fixed32":
			if x.RFixed32, err = jsondecoder.ReadListU32(dec, x.RFixed32, false); err != nil {
				return err
			}
		case "r_fixed64":
			if x.RFixed64, err = jsondecoder.ReadListU64(dec, x.RFixed64, false); err != nil {
				return err
			}
		case "r_float":
			if x.RFloat, err = jsondecoder.ReadListF32(dec, x.RFloat, false); err != nil {
				return err
			}
		case "r_double":
			if x.RDouble, err = jsondecoder.ReadListF64(dec, x.RDouble, false); err != nil {
				return err
			}
		case "r_bool1":
			if x.RBool1, err = jsondecoder.ReadListBool(dec, x.RBool1, false); err != nil {
				return err
			}
		case "r_bool2":
			if x.RBool2, err = jsondecoder.ReadListBool(dec, x.RBool2, false); err != nil {
				return err
			}
		case "r_bool3":
			if x.RBool3, err = jsondecoder.ReadListBool(dec, x.RBool3, false); err != nil {
				return err
			}
		case "r_bytes1":
			if x.RBytes1, err = jsondecoder.ReadListBytes(dec, x.RBytes1); err != nil {
				return err
			}
		case "r_bytes2":
			if x.RBytes2, err = jsondecoder.ReadListBytes(dec, x.RBytes2); err != nil {
				return err
			}
		case "r_bytes3":
			if x.RBytes3, err = jsondecoder.ReadListBytes(dec, x.RBytes3); err != nil {
				return err
			}
		case "r_enum1":
			if x.REnum1, err = jsondecoder.ReadListEnumNum(dec, x.REnum1, false); err != nil {
				return err
			}
		case "r_enum2":
			if x.REnum2, err = jsondecoder.ReadListEnumNum(dec, x.REnum2, false); err != nil {
				return err
			}
		case "r_enum3":
			if x.REnum3, err = jsondecoder.ReadListEnumNum(dec, x.REnum3, false); err != nil {
				return err
			}
		case "r_enum4":
			if x.REnum4, err = jsondecoder.ReadListEnumNum(dec, x.REnum4, false); err != nil {
				return err
			}
		case "r_enum5":
			if x.REnum5, err = jsondecoder.ReadListEnumNum(dec, x.REnum5, false); err != nil {
				return err
			}
		case "r_enum6":
			if x.REnum6, err = jsondecoder.ReadListEnumNum(dec, x.REnum6, false); err != nil {
				return err
			}
		case "r_enum7":
			if x.REnum7, err = jsondecoder.ReadListEnumNum(dec, x.REnum7, false); err != nil {
				return err
			}
		case "r_message1":
			if x.RMessage1, err = jsondecoder.ReadListMessage(dec, x.RMessage1); err != nil {
				return err
			}
		case "r_message2":
			if x.RMessage2, err = jsondecoder.ReadListMessage(dec, x.RMessage2); err != nil {
				return err
			}
		case "r_message3":
			if x.RMessage3, err = jsondecoder.ReadListMessage(dec, x.RMessage3); err != nil {
				return err
			}
		case "r_message4":
			if x.RMessage4, err = jsondecoder.ReadListMessage(dec, x.RMessage4); err != nil {
				return err
			}
		case "r_message5":
			if x.RMessage5, err = jsondecoder.ReadListMessage(dec, x.RMessage5); err != nil {
				return err
			}
		case "r_message6":
			if x.RMessage6, err = jsondecoder.ReadListMessage(dec, x.RMessage6); err != nil {
				return err
			}
		case "r_message7":
			if x.RMessage7, err = jsondecoder.ReadListMessage(dec, x.RMessage7); err != nil {
				return err
			}
		case "m_string1":
			if x.MString1, err = jsondecoder.ReadMapStrStr(dec, x.MString1); err != nil {
				return err
			}
		case "m_string2":
			if x.MString2, err = jsondecoder.ReadMapStrStr(dec, x.MString2); err != nil {
				return err
			}
		case "m_string3":
			if x.MString3, err = jsondecoder.ReadMapStrStr(dec, x.MString3); err != nil {
				return err
			}
		case "m_string4":
			if x.MString4, err = jsondecoder.ReadMapStrStr(dec, x.MString4); err != nil {
				return err
			}
		case "m_string5":
			if x.MString5, err = jsondecoder.ReadMapStrStr(dec, x.MString5); err != nil {
				return err
			}
		case "m_string6":
			if x.MString6, err = jsondecoder.ReadMapStrStr(dec, x.MString6); err != nil {
				return err
			}
		case "m_string7":
			if x.MString7, err = jsondecoder.ReadMapStrStr(dec, x.MString7); err != nil {
				return err
			}
		case "m_string8":
			if x.MString8, err = jsondecoder.ReadMapStrStr(dec, x.MString8); err != nil {
				return err
			}
		case "m_string9":
			if x.MString9, err = jsondecoder.ReadMapStrStr(dec, x.MString9); err != nil {
				return err
			}
		case "m_int32":
			if x.MInt32, err = jsondecoder.ReadMapStrI32(dec, x.MInt32, false); err != nil {
				return err
			}
		case "m_int64":
			if x.MInt64, err = jsondecoder.ReadMapStrI64(dec, x.MInt64, false); err != nil {
				return err
			}
		case "m_uint32":
			if x.MUint32, err = jsondecoder.ReadMapStrU32(dec, x.MUint32, false); err != nil {
				return err
			}
		case "m_uint64":
			if x.MUint64, err = jsondecoder.ReadMapStrU64(dec, x.MUint64, false); err != nil {
				return err
			}
		case "m_sint32":
			if x.MSint32, err = jsondecoder.ReadMapStrI32(dec, x.MSint32, false); err != nil {
				return err
			}
		case "m_sint64":
			if x.MSint64, err = jsondecoder.ReadMapStrI64(dec, x.MSint64, false); err != nil {
				return err
			}
		case "m_sfixed32":
			if x.MSfixed32, err = jsondecoder.ReadMapStrI32(dec, x.MSfixed32, false); err != nil {
				return err
			}
		case "m_sfixed64":
			if x.MSfixed64, err = jsondecoder.ReadMapStrI64(dec, x.MSfixed64, false); err != nil {
				return err
			}
		case "m_fixed32":
			if x.MFixed32, err = jsondecoder.ReadMapStrU32(dec, x.MFixed32, false); err != nil {
				return err
			}
		case "m_fixed64":
			if x.MFixed64, err = jsondecoder.ReadMapStrU64(dec, x.MFixed64, false); err != nil {
				return err
			}
		case "m_float":
			if x.MFloat, err = jsondecoder.ReadMapStrF32(dec, x.MFloat, false); err != nil {
				return err
			}
		case "m_double":
			if x.MDouble, err = jsondecoder.ReadMapStrF64(dec, x.MDouble, false); err != nil {
				return err
			}
		case "m_bool1":
			if x.MBool1, err = jsondecoder.ReadMapStrBool(dec, x.MBool1, false); err != nil {
				return err
			}
		case "m_bool2":
			if x.MBool2, err = jsondecoder.ReadMapStrBool(dec, x.MBool2, false); err != nil {
				return err
			}
		case "m_bool3":
			if x.MBool3, err = jsondecoder.ReadMapStrBool(dec, x.MBool3, false); err != nil {
				return err
			}
		case "m_bytes1":
			if x.MBytes1, err = jsondecoder.ReadMapStrBytes(dec, x.MBytes1); err != nil {
				return err
			}
		case "m_bytes2":
			if x.MBytes2, err = jsondecoder.ReadMapStrBytes(dec, x.MBytes2); err != nil {
				return err
			}
		case "m_bytes3":
			if x.MBytes3, err = jsondecoder.ReadMapStrBytes(dec, x.MBytes3); err != nil {
				return err
			}
		case "m_enum1":
			if x.MEnum1, err = jsondecoder.ReadMapStrEnumNum(dec, x.MEnum1, false); err != nil {
				return err
			}
		case "m_enum2":
			if x.MEnum2, err = jsondecoder.ReadMapStrEnumNum(dec, x.MEnum2, false); err != nil {
				return err
			}
		case "m_enum3":
			if x.MEnum3, err = jsondecoder.ReadMapStrEnumNum(dec, x.MEnum3, false); err != nil {
				return err
			}
		case "m_enum4":
			if x.MEnum4, err = jsondecoder.ReadMapStrEnumNum(dec, x.MEnum4, false); err != nil {
				return err
			}
		case "m_enum5":
			if x.MEnum5, err = jsondecoder.ReadMapStrEnumNum(dec, x.MEnum5, false); err != nil {
				return err
			}
		case "m_enum6":
			if x.MEnum6, err = jsondecoder.ReadMapStrEnumNum(dec, x.MEnum6, false); err != nil {
				return err
			}
		case "m_enum7":
			if x.MEnum7, err = jsondecoder.ReadMapStrEnumNum(dec, x.MEnum7, false); err != nil {
				return err
			}
		case "m_message1":
			if x.MMessage1, err = jsondecoder.ReadMapStrMessage(dec, x.MMessage1); err != nil {
				return err
			}
		case "m_message2":
			if x.MMessage2, err = jsondecoder.ReadMapStrMessage(dec, x.MMessage2); err != nil {
				return err
			}
		case "m_message3":
			if x.MMessage3, err = jsondecoder.ReadMapStrMessage(dec, x.MMessage3); err != nil {
				return err
			}
		case "m_message4":
			if x.MMessage4, err = jsondecoder.ReadMapStrMessage(dec, x.MMessage4); err != nil {
				return err
			}
		case "m_message5":
			if x.MMessage5, err = jsondecoder.ReadMapStrMessage(dec, x.MMessage5); err != nil {
				return err
			}
		case "m_message6":
			if x.MMessage6, err = jsondecoder.ReadMapStrMessage(dec, x.MMessage6); err != nil {
				return err
			}
		case "m_message7":
			if x.MMessage7, err = jsondecoder.ReadMapStrMessage(dec, x.MMessage7); err != nil {
				return err
			}
		default:
			if err = dec.DiscardValue(); err != nil {
				return err
			}
		} // end switch
	}
	return nil
}
